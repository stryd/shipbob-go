/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the ProductInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductInfo{}

// ProductInfo struct for ProductInfo
type ProductInfo struct {
	// Numeric assignment per item. Used as a reference number for multiple purposes such as split orders, split containers, etc.
	ExternalLineId NullableInt32 `json:"external_line_id,omitempty"`
	// Global Trade Item Number - unique and internationally recognized identifier assigned to item by company GS1
	Gtin *string `json:"gtin,omitempty"`
	// Unique id of the product
	Id NullableInt32 `json:"id,omitempty"`
	// The quantity of this product ordered
	Quantity *int32 `json:"quantity,omitempty"`
	// Defined standard for measure for an item (each, inner pack, case, pallet).  Values: EA, INP, CS and PL
	QuantityUnitOfMeasureCode *string `json:"quantity_unit_of_measure_code,omitempty"`
	// Unique reference id of the product
	ReferenceId *string `json:"reference_id,omitempty"`
	// Stock keeping unit for the product
	Sku *string `json:"sku,omitempty"`
	// Price for one item
	UnitPrice NullableFloat64 `json:"unit_price,omitempty"`
	// Universal Product Code - Unique external identifier
	Upc *string `json:"upc,omitempty"`
}

// NewProductInfo instantiates a new ProductInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductInfo() *ProductInfo {
	this := ProductInfo{}
	return &this
}

// NewProductInfoWithDefaults instantiates a new ProductInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductInfoWithDefaults() *ProductInfo {
	this := ProductInfo{}
	return &this
}

// GetExternalLineId returns the ExternalLineId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductInfo) GetExternalLineId() int32 {
	if o == nil || IsNil(o.ExternalLineId.Get()) {
		var ret int32
		return ret
	}
	return *o.ExternalLineId.Get()
}

// GetExternalLineIdOk returns a tuple with the ExternalLineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInfo) GetExternalLineIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalLineId.Get(), o.ExternalLineId.IsSet()
}

// HasExternalLineId returns a boolean if a field has been set.
func (o *ProductInfo) HasExternalLineId() bool {
	if o != nil && o.ExternalLineId.IsSet() {
		return true
	}

	return false
}

// SetExternalLineId gets a reference to the given NullableInt32 and assigns it to the ExternalLineId field.
func (o *ProductInfo) SetExternalLineId(v int32) {
	o.ExternalLineId.Set(&v)
}

// SetExternalLineIdNil sets the value for ExternalLineId to be an explicit nil
func (o *ProductInfo) SetExternalLineIdNil() {
	o.ExternalLineId.Set(nil)
}

// UnsetExternalLineId ensures that no value is present for ExternalLineId, not even an explicit nil
func (o *ProductInfo) UnsetExternalLineId() {
	o.ExternalLineId.Unset()
}

// GetGtin returns the Gtin field value if set, zero value otherwise.
func (o *ProductInfo) GetGtin() string {
	if o == nil || IsNil(o.Gtin) {
		var ret string
		return ret
	}
	return *o.Gtin
}

// GetGtinOk returns a tuple with the Gtin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfo) GetGtinOk() (*string, bool) {
	if o == nil || IsNil(o.Gtin) {
		return nil, false
	}
	return o.Gtin, true
}

// HasGtin returns a boolean if a field has been set.
func (o *ProductInfo) HasGtin() bool {
	if o != nil && !IsNil(o.Gtin) {
		return true
	}

	return false
}

// SetGtin gets a reference to the given string and assigns it to the Gtin field.
func (o *ProductInfo) SetGtin(v string) {
	o.Gtin = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductInfo) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInfo) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ProductInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *ProductInfo) SetId(v int32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *ProductInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ProductInfo) UnsetId() {
	o.Id.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ProductInfo) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfo) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ProductInfo) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ProductInfo) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetQuantityUnitOfMeasureCode returns the QuantityUnitOfMeasureCode field value if set, zero value otherwise.
func (o *ProductInfo) GetQuantityUnitOfMeasureCode() string {
	if o == nil || IsNil(o.QuantityUnitOfMeasureCode) {
		var ret string
		return ret
	}
	return *o.QuantityUnitOfMeasureCode
}

// GetQuantityUnitOfMeasureCodeOk returns a tuple with the QuantityUnitOfMeasureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfo) GetQuantityUnitOfMeasureCodeOk() (*string, bool) {
	if o == nil || IsNil(o.QuantityUnitOfMeasureCode) {
		return nil, false
	}
	return o.QuantityUnitOfMeasureCode, true
}

// HasQuantityUnitOfMeasureCode returns a boolean if a field has been set.
func (o *ProductInfo) HasQuantityUnitOfMeasureCode() bool {
	if o != nil && !IsNil(o.QuantityUnitOfMeasureCode) {
		return true
	}

	return false
}

// SetQuantityUnitOfMeasureCode gets a reference to the given string and assigns it to the QuantityUnitOfMeasureCode field.
func (o *ProductInfo) SetQuantityUnitOfMeasureCode(v string) {
	o.QuantityUnitOfMeasureCode = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *ProductInfo) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfo) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *ProductInfo) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *ProductInfo) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ProductInfo) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfo) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ProductInfo) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ProductInfo) SetSku(v string) {
	o.Sku = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductInfo) GetUnitPrice() float64 {
	if o == nil || IsNil(o.UnitPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.UnitPrice.Get()
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductInfo) GetUnitPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitPrice.Get(), o.UnitPrice.IsSet()
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *ProductInfo) HasUnitPrice() bool {
	if o != nil && o.UnitPrice.IsSet() {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given NullableFloat64 and assigns it to the UnitPrice field.
func (o *ProductInfo) SetUnitPrice(v float64) {
	o.UnitPrice.Set(&v)
}

// SetUnitPriceNil sets the value for UnitPrice to be an explicit nil
func (o *ProductInfo) SetUnitPriceNil() {
	o.UnitPrice.Set(nil)
}

// UnsetUnitPrice ensures that no value is present for UnitPrice, not even an explicit nil
func (o *ProductInfo) UnsetUnitPrice() {
	o.UnitPrice.Unset()
}

// GetUpc returns the Upc field value if set, zero value otherwise.
func (o *ProductInfo) GetUpc() string {
	if o == nil || IsNil(o.Upc) {
		var ret string
		return ret
	}
	return *o.Upc
}

// GetUpcOk returns a tuple with the Upc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfo) GetUpcOk() (*string, bool) {
	if o == nil || IsNil(o.Upc) {
		return nil, false
	}
	return o.Upc, true
}

// HasUpc returns a boolean if a field has been set.
func (o *ProductInfo) HasUpc() bool {
	if o != nil && !IsNil(o.Upc) {
		return true
	}

	return false
}

// SetUpc gets a reference to the given string and assigns it to the Upc field.
func (o *ProductInfo) SetUpc(v string) {
	o.Upc = &v
}

func (o ProductInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalLineId.IsSet() {
		toSerialize["external_line_id"] = o.ExternalLineId.Get()
	}
	if !IsNil(o.Gtin) {
		toSerialize["gtin"] = o.Gtin
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.QuantityUnitOfMeasureCode) {
		toSerialize["quantity_unit_of_measure_code"] = o.QuantityUnitOfMeasureCode
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["reference_id"] = o.ReferenceId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if o.UnitPrice.IsSet() {
		toSerialize["unit_price"] = o.UnitPrice.Get()
	}
	if !IsNil(o.Upc) {
		toSerialize["upc"] = o.Upc
	}
	return toSerialize, nil
}

type NullableProductInfo struct {
	value *ProductInfo
	isSet bool
}

func (v NullableProductInfo) Get() *ProductInfo {
	return v.value
}

func (v *NullableProductInfo) Set(val *ProductInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProductInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProductInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductInfo(val *ProductInfo) *NullableProductInfo {
	return &NullableProductInfo{value: val, isSet: true}
}

func (v NullableProductInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
