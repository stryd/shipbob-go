/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ProductActiveStatus the model 'ProductActiveStatus'
type ProductActiveStatus string

// List of ProductActiveStatus
const (
	PRODUCTACTIVESTATUS_ANY      ProductActiveStatus = "Any"
	PRODUCTACTIVESTATUS_ACTIVE   ProductActiveStatus = "Active"
	PRODUCTACTIVESTATUS_INACTIVE ProductActiveStatus = "Inactive"
)

// All allowed values of ProductActiveStatus enum
var AllowedProductActiveStatusEnumValues = []ProductActiveStatus{
	"Any",
	"Active",
	"Inactive",
}

func (v *ProductActiveStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductActiveStatus(value)
	for _, existing := range AllowedProductActiveStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductActiveStatus", value)
}

// NewProductActiveStatusFromValue returns a pointer to a valid ProductActiveStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductActiveStatusFromValue(v string) (*ProductActiveStatus, error) {
	ev := ProductActiveStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductActiveStatus: valid values are %v", v, AllowedProductActiveStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductActiveStatus) IsValid() bool {
	for _, existing := range AllowedProductActiveStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductActiveStatus value
func (v ProductActiveStatus) Ptr() *ProductActiveStatus {
	return &v
}

type NullableProductActiveStatus struct {
	value *ProductActiveStatus
	isSet bool
}

func (v NullableProductActiveStatus) Get() *ProductActiveStatus {
	return v.value
}

func (v *NullableProductActiveStatus) Set(val *ProductActiveStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProductActiveStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProductActiveStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductActiveStatus(val *ProductActiveStatus) *NullableProductActiveStatus {
	return &NullableProductActiveStatus{value: val, isSet: true}
}

func (v NullableProductActiveStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductActiveStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
