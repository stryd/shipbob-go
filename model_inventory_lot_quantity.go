/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"time"
)

// checks if the InventoryLotQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryLotQuantity{}

// InventoryLotQuantity Break down of fulfillable quantity by lot
type InventoryLotQuantity struct {
	// Quantity of inventory items belonging to this lot awaiting arrival of a receiving order
	AwaitingQuantity *int32 `json:"awaiting_quantity,omitempty"`
	// Committed quantity of inventory items belonging to this lot
	CommittedQuantity *int32 `json:"committed_quantity,omitempty"`
	// Expiration date for this lot
	ExpirationDate NullableTime `json:"expiration_date,omitempty"`
	// Fulfillable quantity of inventory items belonging to this lot
	FulfillableQuantity *int32 `json:"fulfillable_quantity,omitempty"`
	// Fulfillable quantity of inventory items belonging to this lot broken down by fulfillment center location
	FulfillableQuantityByFulfillmentCenter []InventoryFulfillmentCenterQuantity `json:"fulfillable_quantity_by_fulfillment_center,omitempty"`
	// The quantity of all items belonging to this lot that are in the process of internal transit  between ShipBob fulfillment centers. These items are not pickable or fulfillable until they have been received and moved to the \"On Hand\" quantity of the destination FC. Internal transit quantities for each FC represent the incoming transfer stock for that specific location.
	InternalTransferQuantity *int32 `json:"internal_transfer_quantity,omitempty"`
	// Identification number of this lot
	LotNumber *string `json:"lot_number,omitempty"`
	// OnHand quantity of inventory items belonging to this lot
	OnhandQuantity *int32 `json:"onhand_quantity,omitempty"`
}

// NewInventoryLotQuantity instantiates a new InventoryLotQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryLotQuantity() *InventoryLotQuantity {
	this := InventoryLotQuantity{}
	return &this
}

// NewInventoryLotQuantityWithDefaults instantiates a new InventoryLotQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryLotQuantityWithDefaults() *InventoryLotQuantity {
	this := InventoryLotQuantity{}
	return &this
}

// GetAwaitingQuantity returns the AwaitingQuantity field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetAwaitingQuantity() int32 {
	if o == nil || IsNil(o.AwaitingQuantity) {
		var ret int32
		return ret
	}
	return *o.AwaitingQuantity
}

// GetAwaitingQuantityOk returns a tuple with the AwaitingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetAwaitingQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.AwaitingQuantity) {
		return nil, false
	}
	return o.AwaitingQuantity, true
}

// HasAwaitingQuantity returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasAwaitingQuantity() bool {
	if o != nil && !IsNil(o.AwaitingQuantity) {
		return true
	}

	return false
}

// SetAwaitingQuantity gets a reference to the given int32 and assigns it to the AwaitingQuantity field.
func (o *InventoryLotQuantity) SetAwaitingQuantity(v int32) {
	o.AwaitingQuantity = &v
}

// GetCommittedQuantity returns the CommittedQuantity field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetCommittedQuantity() int32 {
	if o == nil || IsNil(o.CommittedQuantity) {
		var ret int32
		return ret
	}
	return *o.CommittedQuantity
}

// GetCommittedQuantityOk returns a tuple with the CommittedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetCommittedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.CommittedQuantity) {
		return nil, false
	}
	return o.CommittedQuantity, true
}

// HasCommittedQuantity returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasCommittedQuantity() bool {
	if o != nil && !IsNil(o.CommittedQuantity) {
		return true
	}

	return false
}

// SetCommittedQuantity gets a reference to the given int32 and assigns it to the CommittedQuantity field.
func (o *InventoryLotQuantity) SetCommittedQuantity(v int32) {
	o.CommittedQuantity = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InventoryLotQuantity) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InventoryLotQuantity) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableTime and assigns it to the ExpirationDate field.
func (o *InventoryLotQuantity) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}
// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *InventoryLotQuantity) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *InventoryLotQuantity) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

// GetFulfillableQuantity returns the FulfillableQuantity field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetFulfillableQuantity() int32 {
	if o == nil || IsNil(o.FulfillableQuantity) {
		var ret int32
		return ret
	}
	return *o.FulfillableQuantity
}

// GetFulfillableQuantityOk returns a tuple with the FulfillableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetFulfillableQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.FulfillableQuantity) {
		return nil, false
	}
	return o.FulfillableQuantity, true
}

// HasFulfillableQuantity returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasFulfillableQuantity() bool {
	if o != nil && !IsNil(o.FulfillableQuantity) {
		return true
	}

	return false
}

// SetFulfillableQuantity gets a reference to the given int32 and assigns it to the FulfillableQuantity field.
func (o *InventoryLotQuantity) SetFulfillableQuantity(v int32) {
	o.FulfillableQuantity = &v
}

// GetFulfillableQuantityByFulfillmentCenter returns the FulfillableQuantityByFulfillmentCenter field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetFulfillableQuantityByFulfillmentCenter() []InventoryFulfillmentCenterQuantity {
	if o == nil || IsNil(o.FulfillableQuantityByFulfillmentCenter) {
		var ret []InventoryFulfillmentCenterQuantity
		return ret
	}
	return o.FulfillableQuantityByFulfillmentCenter
}

// GetFulfillableQuantityByFulfillmentCenterOk returns a tuple with the FulfillableQuantityByFulfillmentCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetFulfillableQuantityByFulfillmentCenterOk() ([]InventoryFulfillmentCenterQuantity, bool) {
	if o == nil || IsNil(o.FulfillableQuantityByFulfillmentCenter) {
		return nil, false
	}
	return o.FulfillableQuantityByFulfillmentCenter, true
}

// HasFulfillableQuantityByFulfillmentCenter returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasFulfillableQuantityByFulfillmentCenter() bool {
	if o != nil && !IsNil(o.FulfillableQuantityByFulfillmentCenter) {
		return true
	}

	return false
}

// SetFulfillableQuantityByFulfillmentCenter gets a reference to the given []InventoryFulfillmentCenterQuantity and assigns it to the FulfillableQuantityByFulfillmentCenter field.
func (o *InventoryLotQuantity) SetFulfillableQuantityByFulfillmentCenter(v []InventoryFulfillmentCenterQuantity) {
	o.FulfillableQuantityByFulfillmentCenter = v
}

// GetInternalTransferQuantity returns the InternalTransferQuantity field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetInternalTransferQuantity() int32 {
	if o == nil || IsNil(o.InternalTransferQuantity) {
		var ret int32
		return ret
	}
	return *o.InternalTransferQuantity
}

// GetInternalTransferQuantityOk returns a tuple with the InternalTransferQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetInternalTransferQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.InternalTransferQuantity) {
		return nil, false
	}
	return o.InternalTransferQuantity, true
}

// HasInternalTransferQuantity returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasInternalTransferQuantity() bool {
	if o != nil && !IsNil(o.InternalTransferQuantity) {
		return true
	}

	return false
}

// SetInternalTransferQuantity gets a reference to the given int32 and assigns it to the InternalTransferQuantity field.
func (o *InventoryLotQuantity) SetInternalTransferQuantity(v int32) {
	o.InternalTransferQuantity = &v
}

// GetLotNumber returns the LotNumber field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetLotNumber() string {
	if o == nil || IsNil(o.LotNumber) {
		var ret string
		return ret
	}
	return *o.LotNumber
}

// GetLotNumberOk returns a tuple with the LotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetLotNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LotNumber) {
		return nil, false
	}
	return o.LotNumber, true
}

// HasLotNumber returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasLotNumber() bool {
	if o != nil && !IsNil(o.LotNumber) {
		return true
	}

	return false
}

// SetLotNumber gets a reference to the given string and assigns it to the LotNumber field.
func (o *InventoryLotQuantity) SetLotNumber(v string) {
	o.LotNumber = &v
}

// GetOnhandQuantity returns the OnhandQuantity field value if set, zero value otherwise.
func (o *InventoryLotQuantity) GetOnhandQuantity() int32 {
	if o == nil || IsNil(o.OnhandQuantity) {
		var ret int32
		return ret
	}
	return *o.OnhandQuantity
}

// GetOnhandQuantityOk returns a tuple with the OnhandQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLotQuantity) GetOnhandQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.OnhandQuantity) {
		return nil, false
	}
	return o.OnhandQuantity, true
}

// HasOnhandQuantity returns a boolean if a field has been set.
func (o *InventoryLotQuantity) HasOnhandQuantity() bool {
	if o != nil && !IsNil(o.OnhandQuantity) {
		return true
	}

	return false
}

// SetOnhandQuantity gets a reference to the given int32 and assigns it to the OnhandQuantity field.
func (o *InventoryLotQuantity) SetOnhandQuantity(v int32) {
	o.OnhandQuantity = &v
}

func (o InventoryLotQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryLotQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwaitingQuantity) {
		toSerialize["awaiting_quantity"] = o.AwaitingQuantity
	}
	if !IsNil(o.CommittedQuantity) {
		toSerialize["committed_quantity"] = o.CommittedQuantity
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expiration_date"] = o.ExpirationDate.Get()
	}
	if !IsNil(o.FulfillableQuantity) {
		toSerialize["fulfillable_quantity"] = o.FulfillableQuantity
	}
	if !IsNil(o.FulfillableQuantityByFulfillmentCenter) {
		toSerialize["fulfillable_quantity_by_fulfillment_center"] = o.FulfillableQuantityByFulfillmentCenter
	}
	if !IsNil(o.InternalTransferQuantity) {
		toSerialize["internal_transfer_quantity"] = o.InternalTransferQuantity
	}
	if !IsNil(o.LotNumber) {
		toSerialize["lot_number"] = o.LotNumber
	}
	if !IsNil(o.OnhandQuantity) {
		toSerialize["onhand_quantity"] = o.OnhandQuantity
	}
	return toSerialize, nil
}

type NullableInventoryLotQuantity struct {
	value *InventoryLotQuantity
	isSet bool
}

func (v NullableInventoryLotQuantity) Get() *InventoryLotQuantity {
	return v.value
}

func (v *NullableInventoryLotQuantity) Set(val *InventoryLotQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryLotQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryLotQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryLotQuantity(val *InventoryLotQuantity) *NullableInventoryLotQuantity {
	return &NullableInventoryLotQuantity{value: val, isSet: true}
}

func (v NullableInventoryLotQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryLotQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


