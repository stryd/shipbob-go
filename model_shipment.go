/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// Shipment - Information about a shipment
type Shipment struct {
	InternalShipment *InternalShipment
}

// InternalShipmentAsShipment is a convenience function that returns InternalShipment wrapped in Shipment
func InternalShipmentAsShipment(v *InternalShipment) Shipment {
	return Shipment{
		InternalShipment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Shipment) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InternalShipment
	err = newStrictDecoder(data).Decode(&dst.InternalShipment)
	if err == nil {
		jsonInternalShipment, _ := json.Marshal(dst.InternalShipment)
		if string(jsonInternalShipment) == "{}" { // empty struct
			dst.InternalShipment = nil
		} else {
			match++
		}
	} else {
		dst.InternalShipment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InternalShipment = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Shipment)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Shipment)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Shipment) MarshalJSON() ([]byte, error) {
	if src.InternalShipment != nil {
		return json.Marshal(&src.InternalShipment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Shipment) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InternalShipment != nil {
		return obj.InternalShipment
	}

	// all schemas are nil
	return nil
}

type NullableShipment struct {
	value *Shipment
	isSet bool
}

func (v NullableShipment) Get() *Shipment {
	return v.value
}

func (v *NullableShipment) Set(val *Shipment) {
	v.value = val
	v.isSet = true
}

func (v NullableShipment) IsSet() bool {
	return v.isSet
}

func (v *NullableShipment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipment(val *Shipment) *NullableShipment {
	return &NullableShipment{value: val, isSet: true}
}

func (v NullableShipment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


