/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the CancelShipment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelShipment{}

// CancelShipment Model for cancel multiple shipments at once
type CancelShipment struct {
	// Shipment IDs to cancel
	ShipmentIds []int32 `json:"shipment_ids,omitempty"`
}

// NewCancelShipment instantiates a new CancelShipment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelShipment() *CancelShipment {
	this := CancelShipment{}
	return &this
}

// NewCancelShipmentWithDefaults instantiates a new CancelShipment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelShipmentWithDefaults() *CancelShipment {
	this := CancelShipment{}
	return &this
}

// GetShipmentIds returns the ShipmentIds field value if set, zero value otherwise.
func (o *CancelShipment) GetShipmentIds() []int32 {
	if o == nil || IsNil(o.ShipmentIds) {
		var ret []int32
		return ret
	}
	return o.ShipmentIds
}

// GetShipmentIdsOk returns a tuple with the ShipmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelShipment) GetShipmentIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ShipmentIds) {
		return nil, false
	}
	return o.ShipmentIds, true
}

// HasShipmentIds returns a boolean if a field has been set.
func (o *CancelShipment) HasShipmentIds() bool {
	if o != nil && !IsNil(o.ShipmentIds) {
		return true
	}

	return false
}

// SetShipmentIds gets a reference to the given []int32 and assigns it to the ShipmentIds field.
func (o *CancelShipment) SetShipmentIds(v []int32) {
	o.ShipmentIds = v
}

func (o CancelShipment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelShipment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShipmentIds) {
		toSerialize["shipment_ids"] = o.ShipmentIds
	}
	return toSerialize, nil
}

type NullableCancelShipment struct {
	value *CancelShipment
	isSet bool
}

func (v NullableCancelShipment) Get() *CancelShipment {
	return v.value
}

func (v *NullableCancelShipment) Set(val *CancelShipment) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelShipment) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelShipment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelShipment(val *CancelShipment) *NullableCancelShipment {
	return &NullableCancelShipment{value: val, isSet: true}
}

func (v NullableCancelShipment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelShipment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
