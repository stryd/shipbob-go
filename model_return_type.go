/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ReturnType the model 'ReturnType'
type ReturnType string

// List of ReturnType
const (
	REGULAR ReturnType = "Regular"
	RETURN_TO_SENDER ReturnType = "ReturnToSender"
)

// All allowed values of ReturnType enum
var AllowedReturnTypeEnumValues = []ReturnType{
	"Regular",
	"ReturnToSender",
}

func (v *ReturnType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnType(value)
	for _, existing := range AllowedReturnTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnType", value)
}

// NewReturnTypeFromValue returns a pointer to a valid ReturnType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnTypeFromValue(v string) (*ReturnType, error) {
	ev := ReturnType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnType: valid values are %v", v, AllowedReturnTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnType) IsValid() bool {
	for _, existing := range AllowedReturnTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnType value
func (v ReturnType) Ptr() *ReturnType {
	return &v
}

type NullableReturnType struct {
	value *ReturnType
	isSet bool
}

func (v NullableReturnType) Get() *ReturnType {
	return v.value
}

func (v *NullableReturnType) Set(val *ReturnType) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnType) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnType(val *ReturnType) *NullableReturnType {
	return &NullableReturnType{value: val, isSet: true}
}

func (v NullableReturnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

