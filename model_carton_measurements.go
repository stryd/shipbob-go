/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the CartonMeasurements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartonMeasurements{}

// CartonMeasurements Measurements of a carton
type CartonMeasurements struct {
	// Total depth in inches
	DepthIn *float64 `json:"depth_in,omitempty"`
	// Total length in inches
	LengthIn *float64 `json:"length_in,omitempty"`
	// Total weight in ounces
	TotalWeightOz *float64 `json:"total_weight_oz,omitempty"`
	// Total width in inches
	WidthIn *float64 `json:"width_in,omitempty"`
}

// NewCartonMeasurements instantiates a new CartonMeasurements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartonMeasurements() *CartonMeasurements {
	this := CartonMeasurements{}
	return &this
}

// NewCartonMeasurementsWithDefaults instantiates a new CartonMeasurements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartonMeasurementsWithDefaults() *CartonMeasurements {
	this := CartonMeasurements{}
	return &this
}

// GetDepthIn returns the DepthIn field value if set, zero value otherwise.
func (o *CartonMeasurements) GetDepthIn() float64 {
	if o == nil || IsNil(o.DepthIn) {
		var ret float64
		return ret
	}
	return *o.DepthIn
}

// GetDepthInOk returns a tuple with the DepthIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartonMeasurements) GetDepthInOk() (*float64, bool) {
	if o == nil || IsNil(o.DepthIn) {
		return nil, false
	}
	return o.DepthIn, true
}

// HasDepthIn returns a boolean if a field has been set.
func (o *CartonMeasurements) HasDepthIn() bool {
	if o != nil && !IsNil(o.DepthIn) {
		return true
	}

	return false
}

// SetDepthIn gets a reference to the given float64 and assigns it to the DepthIn field.
func (o *CartonMeasurements) SetDepthIn(v float64) {
	o.DepthIn = &v
}

// GetLengthIn returns the LengthIn field value if set, zero value otherwise.
func (o *CartonMeasurements) GetLengthIn() float64 {
	if o == nil || IsNil(o.LengthIn) {
		var ret float64
		return ret
	}
	return *o.LengthIn
}

// GetLengthInOk returns a tuple with the LengthIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartonMeasurements) GetLengthInOk() (*float64, bool) {
	if o == nil || IsNil(o.LengthIn) {
		return nil, false
	}
	return o.LengthIn, true
}

// HasLengthIn returns a boolean if a field has been set.
func (o *CartonMeasurements) HasLengthIn() bool {
	if o != nil && !IsNil(o.LengthIn) {
		return true
	}

	return false
}

// SetLengthIn gets a reference to the given float64 and assigns it to the LengthIn field.
func (o *CartonMeasurements) SetLengthIn(v float64) {
	o.LengthIn = &v
}

// GetTotalWeightOz returns the TotalWeightOz field value if set, zero value otherwise.
func (o *CartonMeasurements) GetTotalWeightOz() float64 {
	if o == nil || IsNil(o.TotalWeightOz) {
		var ret float64
		return ret
	}
	return *o.TotalWeightOz
}

// GetTotalWeightOzOk returns a tuple with the TotalWeightOz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartonMeasurements) GetTotalWeightOzOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalWeightOz) {
		return nil, false
	}
	return o.TotalWeightOz, true
}

// HasTotalWeightOz returns a boolean if a field has been set.
func (o *CartonMeasurements) HasTotalWeightOz() bool {
	if o != nil && !IsNil(o.TotalWeightOz) {
		return true
	}

	return false
}

// SetTotalWeightOz gets a reference to the given float64 and assigns it to the TotalWeightOz field.
func (o *CartonMeasurements) SetTotalWeightOz(v float64) {
	o.TotalWeightOz = &v
}

// GetWidthIn returns the WidthIn field value if set, zero value otherwise.
func (o *CartonMeasurements) GetWidthIn() float64 {
	if o == nil || IsNil(o.WidthIn) {
		var ret float64
		return ret
	}
	return *o.WidthIn
}

// GetWidthInOk returns a tuple with the WidthIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartonMeasurements) GetWidthInOk() (*float64, bool) {
	if o == nil || IsNil(o.WidthIn) {
		return nil, false
	}
	return o.WidthIn, true
}

// HasWidthIn returns a boolean if a field has been set.
func (o *CartonMeasurements) HasWidthIn() bool {
	if o != nil && !IsNil(o.WidthIn) {
		return true
	}

	return false
}

// SetWidthIn gets a reference to the given float64 and assigns it to the WidthIn field.
func (o *CartonMeasurements) SetWidthIn(v float64) {
	o.WidthIn = &v
}

func (o CartonMeasurements) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartonMeasurements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepthIn) {
		toSerialize["depth_in"] = o.DepthIn
	}
	if !IsNil(o.LengthIn) {
		toSerialize["length_in"] = o.LengthIn
	}
	if !IsNil(o.TotalWeightOz) {
		toSerialize["total_weight_oz"] = o.TotalWeightOz
	}
	if !IsNil(o.WidthIn) {
		toSerialize["width_in"] = o.WidthIn
	}
	return toSerialize, nil
}

type NullableCartonMeasurements struct {
	value *CartonMeasurements
	isSet bool
}

func (v NullableCartonMeasurements) Get() *CartonMeasurements {
	return v.value
}

func (v *NullableCartonMeasurements) Set(val *CartonMeasurements) {
	v.value = val
	v.isSet = true
}

func (v NullableCartonMeasurements) IsSet() bool {
	return v.isSet
}

func (v *NullableCartonMeasurements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartonMeasurements(val *CartonMeasurements) *NullableCartonMeasurements {
	return &NullableCartonMeasurements{value: val, isSet: true}
}

func (v NullableCartonMeasurements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartonMeasurements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
