/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the ProductFulfillmentCenterQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductFulfillmentCenterQuantity{}

// ProductFulfillmentCenterQuantity Break down of quantities by fulfillment center
type ProductFulfillmentCenterQuantity struct {
	// Amount of committed quantity at this fulfillment center
	CommittedQuantity *int32 `json:"committed_quantity,omitempty"`
	// Amount of fulfillable quantity at this fulfillment center
	FulfillableQuantity *int32 `json:"fulfillable_quantity,omitempty"`
	// Unique id of the fulfillment center
	Id *int32 `json:"id,omitempty"`
	// Name of the fulfillment center
	Name NullableString `json:"name,omitempty"`
	// Amount of onhand quantity at this fulfillment center
	OnhandQuantity *int32 `json:"onhand_quantity,omitempty"`
}

// NewProductFulfillmentCenterQuantity instantiates a new ProductFulfillmentCenterQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductFulfillmentCenterQuantity() *ProductFulfillmentCenterQuantity {
	this := ProductFulfillmentCenterQuantity{}
	return &this
}

// NewProductFulfillmentCenterQuantityWithDefaults instantiates a new ProductFulfillmentCenterQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductFulfillmentCenterQuantityWithDefaults() *ProductFulfillmentCenterQuantity {
	this := ProductFulfillmentCenterQuantity{}
	return &this
}

// GetCommittedQuantity returns the CommittedQuantity field value if set, zero value otherwise.
func (o *ProductFulfillmentCenterQuantity) GetCommittedQuantity() int32 {
	if o == nil || IsNil(o.CommittedQuantity) {
		var ret int32
		return ret
	}
	return *o.CommittedQuantity
}

// GetCommittedQuantityOk returns a tuple with the CommittedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductFulfillmentCenterQuantity) GetCommittedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.CommittedQuantity) {
		return nil, false
	}
	return o.CommittedQuantity, true
}

// HasCommittedQuantity returns a boolean if a field has been set.
func (o *ProductFulfillmentCenterQuantity) HasCommittedQuantity() bool {
	if o != nil && !IsNil(o.CommittedQuantity) {
		return true
	}

	return false
}

// SetCommittedQuantity gets a reference to the given int32 and assigns it to the CommittedQuantity field.
func (o *ProductFulfillmentCenterQuantity) SetCommittedQuantity(v int32) {
	o.CommittedQuantity = &v
}

// GetFulfillableQuantity returns the FulfillableQuantity field value if set, zero value otherwise.
func (o *ProductFulfillmentCenterQuantity) GetFulfillableQuantity() int32 {
	if o == nil || IsNil(o.FulfillableQuantity) {
		var ret int32
		return ret
	}
	return *o.FulfillableQuantity
}

// GetFulfillableQuantityOk returns a tuple with the FulfillableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductFulfillmentCenterQuantity) GetFulfillableQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.FulfillableQuantity) {
		return nil, false
	}
	return o.FulfillableQuantity, true
}

// HasFulfillableQuantity returns a boolean if a field has been set.
func (o *ProductFulfillmentCenterQuantity) HasFulfillableQuantity() bool {
	if o != nil && !IsNil(o.FulfillableQuantity) {
		return true
	}

	return false
}

// SetFulfillableQuantity gets a reference to the given int32 and assigns it to the FulfillableQuantity field.
func (o *ProductFulfillmentCenterQuantity) SetFulfillableQuantity(v int32) {
	o.FulfillableQuantity = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductFulfillmentCenterQuantity) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductFulfillmentCenterQuantity) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductFulfillmentCenterQuantity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProductFulfillmentCenterQuantity) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductFulfillmentCenterQuantity) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductFulfillmentCenterQuantity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProductFulfillmentCenterQuantity) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProductFulfillmentCenterQuantity) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ProductFulfillmentCenterQuantity) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProductFulfillmentCenterQuantity) UnsetName() {
	o.Name.Unset()
}

// GetOnhandQuantity returns the OnhandQuantity field value if set, zero value otherwise.
func (o *ProductFulfillmentCenterQuantity) GetOnhandQuantity() int32 {
	if o == nil || IsNil(o.OnhandQuantity) {
		var ret int32
		return ret
	}
	return *o.OnhandQuantity
}

// GetOnhandQuantityOk returns a tuple with the OnhandQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductFulfillmentCenterQuantity) GetOnhandQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.OnhandQuantity) {
		return nil, false
	}
	return o.OnhandQuantity, true
}

// HasOnhandQuantity returns a boolean if a field has been set.
func (o *ProductFulfillmentCenterQuantity) HasOnhandQuantity() bool {
	if o != nil && !IsNil(o.OnhandQuantity) {
		return true
	}

	return false
}

// SetOnhandQuantity gets a reference to the given int32 and assigns it to the OnhandQuantity field.
func (o *ProductFulfillmentCenterQuantity) SetOnhandQuantity(v int32) {
	o.OnhandQuantity = &v
}

func (o ProductFulfillmentCenterQuantity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductFulfillmentCenterQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommittedQuantity) {
		toSerialize["committed_quantity"] = o.CommittedQuantity
	}
	if !IsNil(o.FulfillableQuantity) {
		toSerialize["fulfillable_quantity"] = o.FulfillableQuantity
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.OnhandQuantity) {
		toSerialize["onhand_quantity"] = o.OnhandQuantity
	}
	return toSerialize, nil
}

type NullableProductFulfillmentCenterQuantity struct {
	value *ProductFulfillmentCenterQuantity
	isSet bool
}

func (v NullableProductFulfillmentCenterQuantity) Get() *ProductFulfillmentCenterQuantity {
	return v.value
}

func (v *NullableProductFulfillmentCenterQuantity) Set(val *ProductFulfillmentCenterQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableProductFulfillmentCenterQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableProductFulfillmentCenterQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductFulfillmentCenterQuantity(val *ProductFulfillmentCenterQuantity) *NullableProductFulfillmentCenterQuantity {
	return &NullableProductFulfillmentCenterQuantity{value: val, isSet: true}
}

func (v NullableProductFulfillmentCenterQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductFulfillmentCenterQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
