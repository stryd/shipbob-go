/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// Topics the model 'Topics'
type Topics string

// List of Topics
const (
	ORDER_SHIPPED Topics = "order_shipped"
	SHIPMENT_DELIVERED Topics = "shipment_delivered"
	SHIPMENT_EXCEPTION Topics = "shipment_exception"
	SHIPMENT_ONHOLD Topics = "shipment_onhold"
	SHIPMENT_CANCELLED Topics = "shipment_cancelled"
)

// All allowed values of Topics enum
var AllowedTopicsEnumValues = []Topics{
	"order_shipped",
	"shipment_delivered",
	"shipment_exception",
	"shipment_onhold",
	"shipment_cancelled",
}

func (v *Topics) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Topics(value)
	for _, existing := range AllowedTopicsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Topics", value)
}

// NewTopicsFromValue returns a pointer to a valid Topics
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTopicsFromValue(v string) (*Topics, error) {
	ev := Topics(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Topics: valid values are %v", v, AllowedTopicsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Topics) IsValid() bool {
	for _, existing := range AllowedTopicsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Topics value
func (v Topics) Ptr() *Topics {
	return &v
}

type NullableTopics struct {
	value *Topics
	isSet bool
}

func (v NullableTopics) Get() *Topics {
	return v.value
}

func (v *NullableTopics) Set(val *Topics) {
	v.value = val
	v.isSet = true
}

func (v NullableTopics) IsSet() bool {
	return v.isSet
}

func (v *NullableTopics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopics(val *Topics) *NullableTopics {
	return &NullableTopics{value: val, isSet: true}
}

func (v NullableTopics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

