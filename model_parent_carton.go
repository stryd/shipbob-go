/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the ParentCarton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentCarton{}

// ParentCarton struct for ParentCarton
type ParentCarton struct {
	// Barcode assigned to this carton
	Barcode *string `json:"barcode,omitempty"`
	// Cartons packed inside this parent container
	Cartons []Carton `json:"cartons,omitempty"`
	Measurements *CartonMeasurements `json:"measurements,omitempty"`
	// Type of this carton container
	Type *string `json:"type,omitempty"`
}

// NewParentCarton instantiates a new ParentCarton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentCarton() *ParentCarton {
	this := ParentCarton{}
	return &this
}

// NewParentCartonWithDefaults instantiates a new ParentCarton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentCartonWithDefaults() *ParentCarton {
	this := ParentCarton{}
	return &this
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *ParentCarton) GetBarcode() string {
	if o == nil || IsNil(o.Barcode) {
		var ret string
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentCarton) GetBarcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *ParentCarton) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given string and assigns it to the Barcode field.
func (o *ParentCarton) SetBarcode(v string) {
	o.Barcode = &v
}

// GetCartons returns the Cartons field value if set, zero value otherwise.
func (o *ParentCarton) GetCartons() []Carton {
	if o == nil || IsNil(o.Cartons) {
		var ret []Carton
		return ret
	}
	return o.Cartons
}

// GetCartonsOk returns a tuple with the Cartons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentCarton) GetCartonsOk() ([]Carton, bool) {
	if o == nil || IsNil(o.Cartons) {
		return nil, false
	}
	return o.Cartons, true
}

// HasCartons returns a boolean if a field has been set.
func (o *ParentCarton) HasCartons() bool {
	if o != nil && !IsNil(o.Cartons) {
		return true
	}

	return false
}

// SetCartons gets a reference to the given []Carton and assigns it to the Cartons field.
func (o *ParentCarton) SetCartons(v []Carton) {
	o.Cartons = v
}

// GetMeasurements returns the Measurements field value if set, zero value otherwise.
func (o *ParentCarton) GetMeasurements() CartonMeasurements {
	if o == nil || IsNil(o.Measurements) {
		var ret CartonMeasurements
		return ret
	}
	return *o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentCarton) GetMeasurementsOk() (*CartonMeasurements, bool) {
	if o == nil || IsNil(o.Measurements) {
		return nil, false
	}
	return o.Measurements, true
}

// HasMeasurements returns a boolean if a field has been set.
func (o *ParentCarton) HasMeasurements() bool {
	if o != nil && !IsNil(o.Measurements) {
		return true
	}

	return false
}

// SetMeasurements gets a reference to the given CartonMeasurements and assigns it to the Measurements field.
func (o *ParentCarton) SetMeasurements(v CartonMeasurements) {
	o.Measurements = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ParentCarton) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentCarton) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ParentCarton) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ParentCarton) SetType(v string) {
	o.Type = &v
}

func (o ParentCarton) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentCarton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.Cartons) {
		toSerialize["cartons"] = o.Cartons
	}
	if !IsNil(o.Measurements) {
		toSerialize["measurements"] = o.Measurements
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableParentCarton struct {
	value *ParentCarton
	isSet bool
}

func (v NullableParentCarton) Get() *ParentCarton {
	return v.value
}

func (v *NullableParentCarton) Set(val *ParentCarton) {
	v.value = val
	v.isSet = true
}

func (v NullableParentCarton) IsSet() bool {
	return v.isSet
}

func (v *NullableParentCarton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentCarton(val *ParentCarton) *NullableParentCarton {
	return &NullableParentCarton{value: val, isSet: true}
}

func (v NullableParentCarton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentCarton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


