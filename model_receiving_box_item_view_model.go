/*
 * ShipBob Developer API
 *
 * ShipBob Developer API Documentation
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"time"
)

// ReceivingBoxItemViewModel Information about an item contained inside a box as part of a receiving order
type ReceivingBoxItemViewModel struct {
	// Unique identifier of the inventory item
	InventoryId *int32 `json:"inventory_id,omitempty"`
	// Expiration date of the item's lot
	LotDate NullableTime `json:"lot_date,omitempty"`
	// Lot number the item belongs to
	LotNumber NullableString `json:"lot_number,omitempty"`
	// Quantity of the item included
	Quantity *int32 `json:"quantity,omitempty"`
	// Quantity of the item that was received after processing the receiving order
	ReceivedQuantity *int32 `json:"received_quantity,omitempty"`
}

// NewReceivingBoxItemViewModel instantiates a new ReceivingBoxItemViewModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceivingBoxItemViewModel() *ReceivingBoxItemViewModel {
	this := ReceivingBoxItemViewModel{}
	return &this
}

// NewReceivingBoxItemViewModelWithDefaults instantiates a new ReceivingBoxItemViewModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceivingBoxItemViewModelWithDefaults() *ReceivingBoxItemViewModel {
	this := ReceivingBoxItemViewModel{}
	return &this
}

// GetInventoryId returns the InventoryId field value if set, zero value otherwise.
func (o *ReceivingBoxItemViewModel) GetInventoryId() int32 {
	if o == nil || o.InventoryId == nil {
		var ret int32
		return ret
	}
	return *o.InventoryId
}

// GetInventoryIdOk returns a tuple with the InventoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingBoxItemViewModel) GetInventoryIdOk() (*int32, bool) {
	if o == nil || o.InventoryId == nil {
		return nil, false
	}
	return o.InventoryId, true
}

// HasInventoryId returns a boolean if a field has been set.
func (o *ReceivingBoxItemViewModel) HasInventoryId() bool {
	if o != nil && o.InventoryId != nil {
		return true
	}

	return false
}

// SetInventoryId gets a reference to the given int32 and assigns it to the InventoryId field.
func (o *ReceivingBoxItemViewModel) SetInventoryId(v int32) {
	o.InventoryId = &v
}

// GetLotDate returns the LotDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingBoxItemViewModel) GetLotDate() time.Time {
	if o == nil || o.LotDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LotDate.Get()
}

// GetLotDateOk returns a tuple with the LotDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingBoxItemViewModel) GetLotDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LotDate.Get(), o.LotDate.IsSet()
}

// HasLotDate returns a boolean if a field has been set.
func (o *ReceivingBoxItemViewModel) HasLotDate() bool {
	if o != nil && o.LotDate.IsSet() {
		return true
	}

	return false
}

// SetLotDate gets a reference to the given NullableTime and assigns it to the LotDate field.
func (o *ReceivingBoxItemViewModel) SetLotDate(v time.Time) {
	o.LotDate.Set(&v)
}
// SetLotDateNil sets the value for LotDate to be an explicit nil
func (o *ReceivingBoxItemViewModel) SetLotDateNil() {
	o.LotDate.Set(nil)
}

// UnsetLotDate ensures that no value is present for LotDate, not even an explicit nil
func (o *ReceivingBoxItemViewModel) UnsetLotDate() {
	o.LotDate.Unset()
}

// GetLotNumber returns the LotNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingBoxItemViewModel) GetLotNumber() string {
	if o == nil || o.LotNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.LotNumber.Get()
}

// GetLotNumberOk returns a tuple with the LotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingBoxItemViewModel) GetLotNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LotNumber.Get(), o.LotNumber.IsSet()
}

// HasLotNumber returns a boolean if a field has been set.
func (o *ReceivingBoxItemViewModel) HasLotNumber() bool {
	if o != nil && o.LotNumber.IsSet() {
		return true
	}

	return false
}

// SetLotNumber gets a reference to the given NullableString and assigns it to the LotNumber field.
func (o *ReceivingBoxItemViewModel) SetLotNumber(v string) {
	o.LotNumber.Set(&v)
}
// SetLotNumberNil sets the value for LotNumber to be an explicit nil
func (o *ReceivingBoxItemViewModel) SetLotNumberNil() {
	o.LotNumber.Set(nil)
}

// UnsetLotNumber ensures that no value is present for LotNumber, not even an explicit nil
func (o *ReceivingBoxItemViewModel) UnsetLotNumber() {
	o.LotNumber.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ReceivingBoxItemViewModel) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingBoxItemViewModel) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ReceivingBoxItemViewModel) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ReceivingBoxItemViewModel) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetReceivedQuantity returns the ReceivedQuantity field value if set, zero value otherwise.
func (o *ReceivingBoxItemViewModel) GetReceivedQuantity() int32 {
	if o == nil || o.ReceivedQuantity == nil {
		var ret int32
		return ret
	}
	return *o.ReceivedQuantity
}

// GetReceivedQuantityOk returns a tuple with the ReceivedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingBoxItemViewModel) GetReceivedQuantityOk() (*int32, bool) {
	if o == nil || o.ReceivedQuantity == nil {
		return nil, false
	}
	return o.ReceivedQuantity, true
}

// HasReceivedQuantity returns a boolean if a field has been set.
func (o *ReceivingBoxItemViewModel) HasReceivedQuantity() bool {
	if o != nil && o.ReceivedQuantity != nil {
		return true
	}

	return false
}

// SetReceivedQuantity gets a reference to the given int32 and assigns it to the ReceivedQuantity field.
func (o *ReceivingBoxItemViewModel) SetReceivedQuantity(v int32) {
	o.ReceivedQuantity = &v
}

func (o ReceivingBoxItemViewModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InventoryId != nil {
		toSerialize["inventory_id"] = o.InventoryId
	}
	if o.LotDate.IsSet() {
		toSerialize["lot_date"] = o.LotDate.Get()
	}
	if o.LotNumber.IsSet() {
		toSerialize["lot_number"] = o.LotNumber.Get()
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.ReceivedQuantity != nil {
		toSerialize["received_quantity"] = o.ReceivedQuantity
	}
	return json.Marshal(toSerialize)
}

type NullableReceivingBoxItemViewModel struct {
	value *ReceivingBoxItemViewModel
	isSet bool
}

func (v NullableReceivingBoxItemViewModel) Get() *ReceivingBoxItemViewModel {
	return v.value
}

func (v *NullableReceivingBoxItemViewModel) Set(val *ReceivingBoxItemViewModel) {
	v.value = val
	v.isSet = true
}

func (v NullableReceivingBoxItemViewModel) IsSet() bool {
	return v.isSet
}

func (v *NullableReceivingBoxItemViewModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceivingBoxItemViewModel(val *ReceivingBoxItemViewModel) *NullableReceivingBoxItemViewModel {
	return &NullableReceivingBoxItemViewModel{value: val, isSet: true}
}

func (v NullableReceivingBoxItemViewModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceivingBoxItemViewModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


