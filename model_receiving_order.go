/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"time"
)

// checks if the ReceivingOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReceivingOrder{}

// ReceivingOrder Information about a receiving order
type ReceivingOrder struct {
	// URL to the packing slip to be included in each box shipment for this receiving order
	BoxLabelsUri     NullableString `json:"box_labels_uri,omitempty"`
	BoxPackagingType *PackingType   `json:"box_packaging_type,omitempty"`
	// Information about the boxes being shipped in this receiving order
	Boxes []Box `json:"boxes,omitempty"`
	// Expected date that all packages will have arrived
	ExpectedArrivalDate NullableTime                `json:"expected_arrival_date,omitempty"`
	FulfillmentCenter   *ReceivingFulfillmentCenter `json:"fulfillment_center,omitempty"`
	// Unique id of the warehouse receiving order
	Id *int32 `json:"id,omitempty"`
	// Insert date of the receiving order
	InsertDate NullableTime `json:"insert_date,omitempty"`
	// Last date the receiving order was updated
	LastUpdatedDate NullableTime `json:"last_updated_date,omitempty"`
	PackageType     *PackageType `json:"package_type,omitempty"`
	// Purchase order number for a receiving order
	PurchaseOrderNumber NullableString   `json:"purchase_order_number,omitempty"`
	Status              *ReceivingStatus `json:"status,omitempty"`
}

// NewReceivingOrder instantiates a new ReceivingOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceivingOrder() *ReceivingOrder {
	this := ReceivingOrder{}
	return &this
}

// NewReceivingOrderWithDefaults instantiates a new ReceivingOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceivingOrderWithDefaults() *ReceivingOrder {
	this := ReceivingOrder{}
	return &this
}

// GetBoxLabelsUri returns the BoxLabelsUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingOrder) GetBoxLabelsUri() string {
	if o == nil || IsNil(o.BoxLabelsUri.Get()) {
		var ret string
		return ret
	}
	return *o.BoxLabelsUri.Get()
}

// GetBoxLabelsUriOk returns a tuple with the BoxLabelsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingOrder) GetBoxLabelsUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoxLabelsUri.Get(), o.BoxLabelsUri.IsSet()
}

// HasBoxLabelsUri returns a boolean if a field has been set.
func (o *ReceivingOrder) HasBoxLabelsUri() bool {
	if o != nil && o.BoxLabelsUri.IsSet() {
		return true
	}

	return false
}

// SetBoxLabelsUri gets a reference to the given NullableString and assigns it to the BoxLabelsUri field.
func (o *ReceivingOrder) SetBoxLabelsUri(v string) {
	o.BoxLabelsUri.Set(&v)
}

// SetBoxLabelsUriNil sets the value for BoxLabelsUri to be an explicit nil
func (o *ReceivingOrder) SetBoxLabelsUriNil() {
	o.BoxLabelsUri.Set(nil)
}

// UnsetBoxLabelsUri ensures that no value is present for BoxLabelsUri, not even an explicit nil
func (o *ReceivingOrder) UnsetBoxLabelsUri() {
	o.BoxLabelsUri.Unset()
}

// GetBoxPackagingType returns the BoxPackagingType field value if set, zero value otherwise.
func (o *ReceivingOrder) GetBoxPackagingType() PackingType {
	if o == nil || IsNil(o.BoxPackagingType) {
		var ret PackingType
		return ret
	}
	return *o.BoxPackagingType
}

// GetBoxPackagingTypeOk returns a tuple with the BoxPackagingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingOrder) GetBoxPackagingTypeOk() (*PackingType, bool) {
	if o == nil || IsNil(o.BoxPackagingType) {
		return nil, false
	}
	return o.BoxPackagingType, true
}

// HasBoxPackagingType returns a boolean if a field has been set.
func (o *ReceivingOrder) HasBoxPackagingType() bool {
	if o != nil && !IsNil(o.BoxPackagingType) {
		return true
	}

	return false
}

// SetBoxPackagingType gets a reference to the given PackingType and assigns it to the BoxPackagingType field.
func (o *ReceivingOrder) SetBoxPackagingType(v PackingType) {
	o.BoxPackagingType = &v
}

// GetBoxes returns the Boxes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingOrder) GetBoxes() []Box {
	if o == nil {
		var ret []Box
		return ret
	}
	return o.Boxes
}

// GetBoxesOk returns a tuple with the Boxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingOrder) GetBoxesOk() ([]Box, bool) {
	if o == nil || IsNil(o.Boxes) {
		return nil, false
	}
	return o.Boxes, true
}

// HasBoxes returns a boolean if a field has been set.
func (o *ReceivingOrder) HasBoxes() bool {
	if o != nil && IsNil(o.Boxes) {
		return true
	}

	return false
}

// SetBoxes gets a reference to the given []Box and assigns it to the Boxes field.
func (o *ReceivingOrder) SetBoxes(v []Box) {
	o.Boxes = v
}

// GetExpectedArrivalDate returns the ExpectedArrivalDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingOrder) GetExpectedArrivalDate() time.Time {
	if o == nil || IsNil(o.ExpectedArrivalDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpectedArrivalDate.Get()
}

// GetExpectedArrivalDateOk returns a tuple with the ExpectedArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingOrder) GetExpectedArrivalDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpectedArrivalDate.Get(), o.ExpectedArrivalDate.IsSet()
}

// HasExpectedArrivalDate returns a boolean if a field has been set.
func (o *ReceivingOrder) HasExpectedArrivalDate() bool {
	if o != nil && o.ExpectedArrivalDate.IsSet() {
		return true
	}

	return false
}

// SetExpectedArrivalDate gets a reference to the given NullableTime and assigns it to the ExpectedArrivalDate field.
func (o *ReceivingOrder) SetExpectedArrivalDate(v time.Time) {
	o.ExpectedArrivalDate.Set(&v)
}

// SetExpectedArrivalDateNil sets the value for ExpectedArrivalDate to be an explicit nil
func (o *ReceivingOrder) SetExpectedArrivalDateNil() {
	o.ExpectedArrivalDate.Set(nil)
}

// UnsetExpectedArrivalDate ensures that no value is present for ExpectedArrivalDate, not even an explicit nil
func (o *ReceivingOrder) UnsetExpectedArrivalDate() {
	o.ExpectedArrivalDate.Unset()
}

// GetFulfillmentCenter returns the FulfillmentCenter field value if set, zero value otherwise.
func (o *ReceivingOrder) GetFulfillmentCenter() ReceivingFulfillmentCenter {
	if o == nil || IsNil(o.FulfillmentCenter) {
		var ret ReceivingFulfillmentCenter
		return ret
	}
	return *o.FulfillmentCenter
}

// GetFulfillmentCenterOk returns a tuple with the FulfillmentCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingOrder) GetFulfillmentCenterOk() (*ReceivingFulfillmentCenter, bool) {
	if o == nil || IsNil(o.FulfillmentCenter) {
		return nil, false
	}
	return o.FulfillmentCenter, true
}

// HasFulfillmentCenter returns a boolean if a field has been set.
func (o *ReceivingOrder) HasFulfillmentCenter() bool {
	if o != nil && !IsNil(o.FulfillmentCenter) {
		return true
	}

	return false
}

// SetFulfillmentCenter gets a reference to the given ReceivingFulfillmentCenter and assigns it to the FulfillmentCenter field.
func (o *ReceivingOrder) SetFulfillmentCenter(v ReceivingFulfillmentCenter) {
	o.FulfillmentCenter = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReceivingOrder) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingOrder) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReceivingOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReceivingOrder) SetId(v int32) {
	o.Id = &v
}

// GetInsertDate returns the InsertDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingOrder) GetInsertDate() time.Time {
	if o == nil || IsNil(o.InsertDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.InsertDate.Get()
}

// GetInsertDateOk returns a tuple with the InsertDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingOrder) GetInsertDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.InsertDate.Get(), o.InsertDate.IsSet()
}

// HasInsertDate returns a boolean if a field has been set.
func (o *ReceivingOrder) HasInsertDate() bool {
	if o != nil && o.InsertDate.IsSet() {
		return true
	}

	return false
}

// SetInsertDate gets a reference to the given NullableTime and assigns it to the InsertDate field.
func (o *ReceivingOrder) SetInsertDate(v time.Time) {
	o.InsertDate.Set(&v)
}

// SetInsertDateNil sets the value for InsertDate to be an explicit nil
func (o *ReceivingOrder) SetInsertDateNil() {
	o.InsertDate.Set(nil)
}

// UnsetInsertDate ensures that no value is present for InsertDate, not even an explicit nil
func (o *ReceivingOrder) UnsetInsertDate() {
	o.InsertDate.Unset()
}

// GetLastUpdatedDate returns the LastUpdatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingOrder) GetLastUpdatedDate() time.Time {
	if o == nil || IsNil(o.LastUpdatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedDate.Get()
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingOrder) GetLastUpdatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdatedDate.Get(), o.LastUpdatedDate.IsSet()
}

// HasLastUpdatedDate returns a boolean if a field has been set.
func (o *ReceivingOrder) HasLastUpdatedDate() bool {
	if o != nil && o.LastUpdatedDate.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedDate gets a reference to the given NullableTime and assigns it to the LastUpdatedDate field.
func (o *ReceivingOrder) SetLastUpdatedDate(v time.Time) {
	o.LastUpdatedDate.Set(&v)
}

// SetLastUpdatedDateNil sets the value for LastUpdatedDate to be an explicit nil
func (o *ReceivingOrder) SetLastUpdatedDateNil() {
	o.LastUpdatedDate.Set(nil)
}

// UnsetLastUpdatedDate ensures that no value is present for LastUpdatedDate, not even an explicit nil
func (o *ReceivingOrder) UnsetLastUpdatedDate() {
	o.LastUpdatedDate.Unset()
}

// GetPackageType returns the PackageType field value if set, zero value otherwise.
func (o *ReceivingOrder) GetPackageType() PackageType {
	if o == nil || IsNil(o.PackageType) {
		var ret PackageType
		return ret
	}
	return *o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingOrder) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil || IsNil(o.PackageType) {
		return nil, false
	}
	return o.PackageType, true
}

// HasPackageType returns a boolean if a field has been set.
func (o *ReceivingOrder) HasPackageType() bool {
	if o != nil && !IsNil(o.PackageType) {
		return true
	}

	return false
}

// SetPackageType gets a reference to the given PackageType and assigns it to the PackageType field.
func (o *ReceivingOrder) SetPackageType(v PackageType) {
	o.PackageType = &v
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReceivingOrder) GetPurchaseOrderNumber() string {
	if o == nil || IsNil(o.PurchaseOrderNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber.Get()
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReceivingOrder) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseOrderNumber.Get(), o.PurchaseOrderNumber.IsSet()
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *ReceivingOrder) HasPurchaseOrderNumber() bool {
	if o != nil && o.PurchaseOrderNumber.IsSet() {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given NullableString and assigns it to the PurchaseOrderNumber field.
func (o *ReceivingOrder) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber.Set(&v)
}

// SetPurchaseOrderNumberNil sets the value for PurchaseOrderNumber to be an explicit nil
func (o *ReceivingOrder) SetPurchaseOrderNumberNil() {
	o.PurchaseOrderNumber.Set(nil)
}

// UnsetPurchaseOrderNumber ensures that no value is present for PurchaseOrderNumber, not even an explicit nil
func (o *ReceivingOrder) UnsetPurchaseOrderNumber() {
	o.PurchaseOrderNumber.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReceivingOrder) GetStatus() ReceivingStatus {
	if o == nil || IsNil(o.Status) {
		var ret ReceivingStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceivingOrder) GetStatusOk() (*ReceivingStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReceivingOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ReceivingStatus and assigns it to the Status field.
func (o *ReceivingOrder) SetStatus(v ReceivingStatus) {
	o.Status = &v
}

func (o ReceivingOrder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReceivingOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BoxLabelsUri.IsSet() {
		toSerialize["box_labels_uri"] = o.BoxLabelsUri.Get()
	}
	if !IsNil(o.BoxPackagingType) {
		toSerialize["box_packaging_type"] = o.BoxPackagingType
	}
	if o.Boxes != nil {
		toSerialize["boxes"] = o.Boxes
	}
	if o.ExpectedArrivalDate.IsSet() {
		toSerialize["expected_arrival_date"] = o.ExpectedArrivalDate.Get()
	}
	if !IsNil(o.FulfillmentCenter) {
		toSerialize["fulfillment_center"] = o.FulfillmentCenter
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.InsertDate.IsSet() {
		toSerialize["insert_date"] = o.InsertDate.Get()
	}
	if o.LastUpdatedDate.IsSet() {
		toSerialize["last_updated_date"] = o.LastUpdatedDate.Get()
	}
	if !IsNil(o.PackageType) {
		toSerialize["package_type"] = o.PackageType
	}
	if o.PurchaseOrderNumber.IsSet() {
		toSerialize["purchase_order_number"] = o.PurchaseOrderNumber.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableReceivingOrder struct {
	value *ReceivingOrder
	isSet bool
}

func (v NullableReceivingOrder) Get() *ReceivingOrder {
	return v.value
}

func (v *NullableReceivingOrder) Set(val *ReceivingOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableReceivingOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableReceivingOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceivingOrder(val *ReceivingOrder) *NullableReceivingOrder {
	return &NullableReceivingOrder{value: val, isSet: true}
}

func (v NullableReceivingOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceivingOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
