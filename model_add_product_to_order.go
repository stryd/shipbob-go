/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// AddProductToOrder - struct for AddProductToOrder
type AddProductToOrder struct {
	AddProductToOrderByProductId *AddProductToOrderByProductId
	AddProductToOrderByReferenceId *AddProductToOrderByReferenceId
}

// AddProductToOrderByProductIdAsAddProductToOrder is a convenience function that returns AddProductToOrderByProductId wrapped in AddProductToOrder
func AddProductToOrderByProductIdAsAddProductToOrder(v *AddProductToOrderByProductId) AddProductToOrder {
	return AddProductToOrder{
		AddProductToOrderByProductId: v,
	}
}

// AddProductToOrderByReferenceIdAsAddProductToOrder is a convenience function that returns AddProductToOrderByReferenceId wrapped in AddProductToOrder
func AddProductToOrderByReferenceIdAsAddProductToOrder(v *AddProductToOrderByReferenceId) AddProductToOrder {
	return AddProductToOrder{
		AddProductToOrderByReferenceId: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddProductToOrder) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddProductToOrderByProductId
	err = newStrictDecoder(data).Decode(&dst.AddProductToOrderByProductId)
	if err == nil {
		jsonAddProductToOrderByProductId, _ := json.Marshal(dst.AddProductToOrderByProductId)
		if string(jsonAddProductToOrderByProductId) == "{}" { // empty struct
			dst.AddProductToOrderByProductId = nil
		} else {
			match++
		}
	} else {
		dst.AddProductToOrderByProductId = nil
	}

	// try to unmarshal data into AddProductToOrderByReferenceId
	err = newStrictDecoder(data).Decode(&dst.AddProductToOrderByReferenceId)
	if err == nil {
		jsonAddProductToOrderByReferenceId, _ := json.Marshal(dst.AddProductToOrderByReferenceId)
		if string(jsonAddProductToOrderByReferenceId) == "{}" { // empty struct
			dst.AddProductToOrderByReferenceId = nil
		} else {
			match++
		}
	} else {
		dst.AddProductToOrderByReferenceId = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddProductToOrderByProductId = nil
		dst.AddProductToOrderByReferenceId = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddProductToOrder)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddProductToOrder)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddProductToOrder) MarshalJSON() ([]byte, error) {
	if src.AddProductToOrderByProductId != nil {
		return json.Marshal(&src.AddProductToOrderByProductId)
	}

	if src.AddProductToOrderByReferenceId != nil {
		return json.Marshal(&src.AddProductToOrderByReferenceId)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddProductToOrder) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddProductToOrderByProductId != nil {
		return obj.AddProductToOrderByProductId
	}

	if obj.AddProductToOrderByReferenceId != nil {
		return obj.AddProductToOrderByReferenceId
	}

	// all schemas are nil
	return nil
}

type NullableAddProductToOrder struct {
	value *AddProductToOrder
	isSet bool
}

func (v NullableAddProductToOrder) Get() *AddProductToOrder {
	return v.value
}

func (v *NullableAddProductToOrder) Set(val *AddProductToOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableAddProductToOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableAddProductToOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddProductToOrder(val *AddProductToOrder) *NullableAddProductToOrder {
	return &NullableAddProductToOrder{value: val, isSet: true}
}

func (v NullableAddProductToOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddProductToOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


