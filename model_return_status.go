/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ReturnStatus the model 'ReturnStatus'
type ReturnStatus string

// List of ReturnStatus
const (
	AWAITING_ARRIVAL ReturnStatus = "AwaitingArrival"
	ARRIVED          ReturnStatus = "Arrived"
	PROCESSING       ReturnStatus = "Processing"
	COMPLETED        ReturnStatus = "Completed"
	CANCELLED        ReturnStatus = "Cancelled"
)

// All allowed values of ReturnStatus enum
var AllowedReturnStatusEnumValues = []ReturnStatus{
	"AwaitingArrival",
	"Arrived",
	"Processing",
	"Completed",
	"Cancelled",
}

func (v *ReturnStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnStatus(value)
	for _, existing := range AllowedReturnStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnStatus", value)
}

// NewReturnStatusFromValue returns a pointer to a valid ReturnStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnStatusFromValue(v string) (*ReturnStatus, error) {
	ev := ReturnStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnStatus: valid values are %v", v, AllowedReturnStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnStatus) IsValid() bool {
	for _, existing := range AllowedReturnStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnStatus value
func (v ReturnStatus) Ptr() *ReturnStatus {
	return &v
}

type NullableReturnStatus struct {
	value *ReturnStatus
	isSet bool
}

func (v NullableReturnStatus) Get() *ReturnStatus {
	return v.value
}

func (v *NullableReturnStatus) Set(val *ReturnStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnStatus(val *ReturnStatus) *NullableReturnStatus {
	return &NullableReturnStatus{value: val, isSet: true}
}

func (v NullableReturnStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
