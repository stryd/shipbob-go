/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// PackagingAttribute None(0). Fragile(1). Foldable(2). Stackable(3). Book(4). CustomPackaging(5). CustomDunnage(6). MarketingInsert(7). Poster(8).
type PackagingAttribute int32

// List of PackagingAttribute
const (
	PACKAGINGATTRIBUTE__0 PackagingAttribute = 0
	PACKAGINGATTRIBUTE__1 PackagingAttribute = 1
	PACKAGINGATTRIBUTE__2 PackagingAttribute = 2
	PACKAGINGATTRIBUTE__3 PackagingAttribute = 3
	PACKAGINGATTRIBUTE__4 PackagingAttribute = 4
	PACKAGINGATTRIBUTE__5 PackagingAttribute = 5
	PACKAGINGATTRIBUTE__6 PackagingAttribute = 6
	PACKAGINGATTRIBUTE__7 PackagingAttribute = 7
	PACKAGINGATTRIBUTE__8 PackagingAttribute = 8
)

// All allowed values of PackagingAttribute enum
var AllowedPackagingAttributeEnumValues = []PackagingAttribute{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
}

func (v *PackagingAttribute) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PackagingAttribute(value)
	for _, existing := range AllowedPackagingAttributeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PackagingAttribute", value)
}

// NewPackagingAttributeFromValue returns a pointer to a valid PackagingAttribute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPackagingAttributeFromValue(v int32) (*PackagingAttribute, error) {
	ev := PackagingAttribute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PackagingAttribute: valid values are %v", v, AllowedPackagingAttributeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PackagingAttribute) IsValid() bool {
	for _, existing := range AllowedPackagingAttributeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackagingAttribute value
func (v PackagingAttribute) Ptr() *PackagingAttribute {
	return &v
}

type NullablePackagingAttribute struct {
	value *PackagingAttribute
	isSet bool
}

func (v NullablePackagingAttribute) Get() *PackagingAttribute {
	return v.value
}

func (v *NullablePackagingAttribute) Set(val *PackagingAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullablePackagingAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullablePackagingAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackagingAttribute(val *PackagingAttribute) *NullablePackagingAttribute {
	return &NullablePackagingAttribute{value: val, isSet: true}
}

func (v NullablePackagingAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackagingAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
