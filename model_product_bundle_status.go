/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ProductBundleStatus the model 'ProductBundleStatus'
type ProductBundleStatus string

// List of ProductBundleStatus
const (
	PRODUCTBUNDLESTATUS_ANY        ProductBundleStatus = "Any"
	PRODUCTBUNDLESTATUS_BUNDLE     ProductBundleStatus = "Bundle"
	PRODUCTBUNDLESTATUS_NOT_BUNDLE ProductBundleStatus = "NotBundle"
)

// All allowed values of ProductBundleStatus enum
var AllowedProductBundleStatusEnumValues = []ProductBundleStatus{
	"Any",
	"Bundle",
	"NotBundle",
}

func (v *ProductBundleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductBundleStatus(value)
	for _, existing := range AllowedProductBundleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductBundleStatus", value)
}

// NewProductBundleStatusFromValue returns a pointer to a valid ProductBundleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductBundleStatusFromValue(v string) (*ProductBundleStatus, error) {
	ev := ProductBundleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductBundleStatus: valid values are %v", v, AllowedProductBundleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductBundleStatus) IsValid() bool {
	for _, existing := range AllowedProductBundleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductBundleStatus value
func (v ProductBundleStatus) Ptr() *ProductBundleStatus {
	return &v
}

type NullableProductBundleStatus struct {
	value *ProductBundleStatus
	isSet bool
}

func (v NullableProductBundleStatus) Get() *ProductBundleStatus {
	return v.value
}

func (v *NullableProductBundleStatus) Set(val *ProductBundleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProductBundleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProductBundleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductBundleStatus(val *ProductBundleStatus) *NullableProductBundleStatus {
	return &NullableProductBundleStatus{value: val, isSet: true}
}

func (v NullableProductBundleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductBundleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
