/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ReturnActionSource the model 'ReturnActionSource'
type ReturnActionSource string

// List of ReturnActionSource
const (
	RETURNACTIONSOURCE_INVENTORY_DEFAULT ReturnActionSource = "InventoryDefault"
	RETURNACTIONSOURCE_OVERRIDE          ReturnActionSource = "Override"
)

// All allowed values of ReturnActionSource enum
var AllowedReturnActionSourceEnumValues = []ReturnActionSource{
	"InventoryDefault",
	"Override",
}

func (v *ReturnActionSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnActionSource(value)
	for _, existing := range AllowedReturnActionSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnActionSource", value)
}

// NewReturnActionSourceFromValue returns a pointer to a valid ReturnActionSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnActionSourceFromValue(v string) (*ReturnActionSource, error) {
	ev := ReturnActionSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnActionSource: valid values are %v", v, AllowedReturnActionSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnActionSource) IsValid() bool {
	for _, existing := range AllowedReturnActionSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnActionSource value
func (v ReturnActionSource) Ptr() *ReturnActionSource {
	return &v
}

type NullableReturnActionSource struct {
	value *ReturnActionSource
	isSet bool
}

func (v NullableReturnActionSource) Get() *ReturnActionSource {
	return v.value
}

func (v *NullableReturnActionSource) Set(val *ReturnActionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnActionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnActionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnActionSource(val *ReturnActionSource) *NullableReturnActionSource {
	return &NullableReturnActionSource{value: val, isSet: true}
}

func (v NullableReturnActionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnActionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
