/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ProductBundle the model 'ProductBundle'
type ProductBundle string

// List of ProductBundle
const (
	ANY        ProductBundle = "Any"
	BUNDLE     ProductBundle = "Bundle"
	NOT_BUNDLE ProductBundle = "NotBundle"
)

// All allowed values of ProductBundle enum
var AllowedProductBundleEnumValues = []ProductBundle{
	"Any",
	"Bundle",
	"NotBundle",
}

func (v *ProductBundle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductBundle(value)
	for _, existing := range AllowedProductBundleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductBundle", value)
}

// NewProductBundleFromValue returns a pointer to a valid ProductBundle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductBundleFromValue(v string) (*ProductBundle, error) {
	ev := ProductBundle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductBundle: valid values are %v", v, AllowedProductBundleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductBundle) IsValid() bool {
	for _, existing := range AllowedProductBundleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductBundle value
func (v ProductBundle) Ptr() *ProductBundle {
	return &v
}

type NullableProductBundle struct {
	value *ProductBundle
	isSet bool
}

func (v NullableProductBundle) Get() *ProductBundle {
	return v.value
}

func (v *NullableProductBundle) Set(val *ProductBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableProductBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableProductBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductBundle(val *ProductBundle) *NullableProductBundle {
	return &NullableProductBundle{value: val, isSet: true}
}

func (v NullableProductBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
