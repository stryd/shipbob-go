/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the Financials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Financials{}

// Financials struct for Financials
type Financials struct {
	// Sum of all line item prices, discounts, and taxes in USD
	TotalPrice NullableFloat64 `json:"total_price,omitempty"`
}

// NewFinancials instantiates a new Financials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancials() *Financials {
	this := Financials{}
	return &this
}

// NewFinancialsWithDefaults instantiates a new Financials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialsWithDefaults() *Financials {
	this := Financials{}
	return &this
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Financials) GetTotalPrice() float64 {
	if o == nil || IsNil(o.TotalPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.TotalPrice.Get()
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Financials) GetTotalPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalPrice.Get(), o.TotalPrice.IsSet()
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *Financials) HasTotalPrice() bool {
	if o != nil && o.TotalPrice.IsSet() {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given NullableFloat64 and assigns it to the TotalPrice field.
func (o *Financials) SetTotalPrice(v float64) {
	o.TotalPrice.Set(&v)
}
// SetTotalPriceNil sets the value for TotalPrice to be an explicit nil
func (o *Financials) SetTotalPriceNil() {
	o.TotalPrice.Set(nil)
}

// UnsetTotalPrice ensures that no value is present for TotalPrice, not even an explicit nil
func (o *Financials) UnsetTotalPrice() {
	o.TotalPrice.Unset()
}

func (o Financials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Financials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalPrice.IsSet() {
		toSerialize["total_price"] = o.TotalPrice.Get()
	}
	return toSerialize, nil
}

type NullableFinancials struct {
	value *Financials
	isSet bool
}

func (v NullableFinancials) Get() *Financials {
	return v.value
}

func (v *NullableFinancials) Set(val *Financials) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancials) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancials(val *Financials) *NullableFinancials {
	return &NullableFinancials{value: val, isSet: true}
}

func (v NullableFinancials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


