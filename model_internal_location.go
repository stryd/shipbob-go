/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the InternalLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternalLocation{}

// InternalLocation struct for InternalLocation
type InternalLocation struct {
	Location
	FulfillmentCenterAttributes []FcAttribute `json:"fulfillment_center_attributes,omitempty"`
	FulfillmentCenterType NullableInternalLocationAllOfFulfillmentCenterType `json:"fulfillment_center_type,omitempty"`
	IsEnabledForNewUser *bool `json:"is_enabled_for_new_user,omitempty"`
	IsExternal *bool `json:"is_external,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InternalLocation InternalLocation

// NewInternalLocation instantiates a new InternalLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternalLocation(ttype string) *InternalLocation {
	this := InternalLocation{}
	this.Ttype = ttype
	return &this
}

// NewInternalLocationWithDefaults instantiates a new InternalLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternalLocationWithDefaults() *InternalLocation {
	this := InternalLocation{}
	return &this
}

// GetFulfillmentCenterAttributes returns the FulfillmentCenterAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InternalLocation) GetFulfillmentCenterAttributes() []FcAttribute {
	if o == nil {
		var ret []FcAttribute
		return ret
	}
	return o.FulfillmentCenterAttributes
}

// GetFulfillmentCenterAttributesOk returns a tuple with the FulfillmentCenterAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InternalLocation) GetFulfillmentCenterAttributesOk() ([]FcAttribute, bool) {
	if o == nil || IsNil(o.FulfillmentCenterAttributes) {
		return nil, false
	}
	return o.FulfillmentCenterAttributes, true
}

// HasFulfillmentCenterAttributes returns a boolean if a field has been set.
func (o *InternalLocation) HasFulfillmentCenterAttributes() bool {
	if o != nil && IsNil(o.FulfillmentCenterAttributes) {
		return true
	}

	return false
}

// SetFulfillmentCenterAttributes gets a reference to the given []FcAttribute and assigns it to the FulfillmentCenterAttributes field.
func (o *InternalLocation) SetFulfillmentCenterAttributes(v []FcAttribute) {
	o.FulfillmentCenterAttributes = v
}

// GetFulfillmentCenterType returns the FulfillmentCenterType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InternalLocation) GetFulfillmentCenterType() InternalLocationAllOfFulfillmentCenterType {
	if o == nil || IsNil(o.FulfillmentCenterType.Get()) {
		var ret InternalLocationAllOfFulfillmentCenterType
		return ret
	}
	return *o.FulfillmentCenterType.Get()
}

// GetFulfillmentCenterTypeOk returns a tuple with the FulfillmentCenterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InternalLocation) GetFulfillmentCenterTypeOk() (*InternalLocationAllOfFulfillmentCenterType, bool) {
	if o == nil {
		return nil, false
	}
	return o.FulfillmentCenterType.Get(), o.FulfillmentCenterType.IsSet()
}

// HasFulfillmentCenterType returns a boolean if a field has been set.
func (o *InternalLocation) HasFulfillmentCenterType() bool {
	if o != nil && o.FulfillmentCenterType.IsSet() {
		return true
	}

	return false
}

// SetFulfillmentCenterType gets a reference to the given NullableInternalLocationAllOfFulfillmentCenterType and assigns it to the FulfillmentCenterType field.
func (o *InternalLocation) SetFulfillmentCenterType(v InternalLocationAllOfFulfillmentCenterType) {
	o.FulfillmentCenterType.Set(&v)
}
// SetFulfillmentCenterTypeNil sets the value for FulfillmentCenterType to be an explicit nil
func (o *InternalLocation) SetFulfillmentCenterTypeNil() {
	o.FulfillmentCenterType.Set(nil)
}

// UnsetFulfillmentCenterType ensures that no value is present for FulfillmentCenterType, not even an explicit nil
func (o *InternalLocation) UnsetFulfillmentCenterType() {
	o.FulfillmentCenterType.Unset()
}

// GetIsEnabledForNewUser returns the IsEnabledForNewUser field value if set, zero value otherwise.
func (o *InternalLocation) GetIsEnabledForNewUser() bool {
	if o == nil || IsNil(o.IsEnabledForNewUser) {
		var ret bool
		return ret
	}
	return *o.IsEnabledForNewUser
}

// GetIsEnabledForNewUserOk returns a tuple with the IsEnabledForNewUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalLocation) GetIsEnabledForNewUserOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabledForNewUser) {
		return nil, false
	}
	return o.IsEnabledForNewUser, true
}

// HasIsEnabledForNewUser returns a boolean if a field has been set.
func (o *InternalLocation) HasIsEnabledForNewUser() bool {
	if o != nil && !IsNil(o.IsEnabledForNewUser) {
		return true
	}

	return false
}

// SetIsEnabledForNewUser gets a reference to the given bool and assigns it to the IsEnabledForNewUser field.
func (o *InternalLocation) SetIsEnabledForNewUser(v bool) {
	o.IsEnabledForNewUser = &v
}

// GetIsExternal returns the IsExternal field value if set, zero value otherwise.
func (o *InternalLocation) GetIsExternal() bool {
	if o == nil || IsNil(o.IsExternal) {
		var ret bool
		return ret
	}
	return *o.IsExternal
}

// GetIsExternalOk returns a tuple with the IsExternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalLocation) GetIsExternalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExternal) {
		return nil, false
	}
	return o.IsExternal, true
}

// HasIsExternal returns a boolean if a field has been set.
func (o *InternalLocation) HasIsExternal() bool {
	if o != nil && !IsNil(o.IsExternal) {
		return true
	}

	return false
}

// SetIsExternal gets a reference to the given bool and assigns it to the IsExternal field.
func (o *InternalLocation) SetIsExternal(v bool) {
	o.IsExternal = &v
}

func (o InternalLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternalLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedLocation, errLocation := json.Marshal(o.Location)
	if errLocation != nil {
		return map[string]interface{}{}, errLocation
	}
	errLocation = json.Unmarshal([]byte(serializedLocation), &toSerialize)
	if errLocation != nil {
		return map[string]interface{}{}, errLocation
	}
	if o.FulfillmentCenterAttributes != nil {
		toSerialize["fulfillment_center_attributes"] = o.FulfillmentCenterAttributes
	}
	if o.FulfillmentCenterType.IsSet() {
		toSerialize["fulfillment_center_type"] = o.FulfillmentCenterType.Get()
	}
	if !IsNil(o.IsEnabledForNewUser) {
		toSerialize["is_enabled_for_new_user"] = o.IsEnabledForNewUser
	}
	if !IsNil(o.IsExternal) {
		toSerialize["is_external"] = o.IsExternal
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InternalLocation) UnmarshalJSON(bytes []byte) (err error) {
	type InternalLocationWithoutEmbeddedStruct struct {
		FulfillmentCenterAttributes []FcAttribute `json:"fulfillment_center_attributes,omitempty"`
		FulfillmentCenterType NullableInternalLocationAllOfFulfillmentCenterType `json:"fulfillment_center_type,omitempty"`
		IsEnabledForNewUser *bool `json:"is_enabled_for_new_user,omitempty"`
		IsExternal *bool `json:"is_external,omitempty"`
	}

	varInternalLocationWithoutEmbeddedStruct := InternalLocationWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varInternalLocationWithoutEmbeddedStruct)
	if err == nil {
		varInternalLocation := _InternalLocation{}
		varInternalLocation.FulfillmentCenterAttributes = varInternalLocationWithoutEmbeddedStruct.FulfillmentCenterAttributes
		varInternalLocation.FulfillmentCenterType = varInternalLocationWithoutEmbeddedStruct.FulfillmentCenterType
		varInternalLocation.IsEnabledForNewUser = varInternalLocationWithoutEmbeddedStruct.IsEnabledForNewUser
		varInternalLocation.IsExternal = varInternalLocationWithoutEmbeddedStruct.IsExternal
		*o = InternalLocation(varInternalLocation)
	} else {
		return err
	}

	varInternalLocation := _InternalLocation{}

	err = json.Unmarshal(bytes, &varInternalLocation)
	if err == nil {
		o.Location = varInternalLocation.Location
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "fulfillment_center_attributes")
		delete(additionalProperties, "fulfillment_center_type")
		delete(additionalProperties, "is_enabled_for_new_user")
		delete(additionalProperties, "is_external")

		// remove fields from embedded structs
		reflectLocation := reflect.ValueOf(o.Location)
		for i := 0; i < reflectLocation.Type().NumField(); i++ {
			t := reflectLocation.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInternalLocation struct {
	value *InternalLocation
	isSet bool
}

func (v NullableInternalLocation) Get() *InternalLocation {
	return v.value
}

func (v *NullableInternalLocation) Set(val *InternalLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalLocation(val *InternalLocation) *NullableInternalLocation {
	return &NullableInternalLocation{value: val, isSet: true}
}

func (v NullableInternalLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


