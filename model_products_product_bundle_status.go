/*
 * ShipBob Developer API
 *
 * ShipBob Developer API Documentation
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// ProductsProductBundleStatus the model 'ProductsProductBundleStatus'
type ProductsProductBundleStatus string

// List of Products.ProductBundleStatus
const (
	ANY ProductsProductBundleStatus = "Any"
	BUNDLE ProductsProductBundleStatus = "Bundle"
	NOT_BUNDLE ProductsProductBundleStatus = "NotBundle"
)

func (v *ProductsProductBundleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductsProductBundleStatus(value)
	for _, existing := range []ProductsProductBundleStatus{ "Any", "Bundle", "NotBundle",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductsProductBundleStatus", value)
}

// Ptr returns reference to Products.ProductBundleStatus value
func (v ProductsProductBundleStatus) Ptr() *ProductsProductBundleStatus {
	return &v
}

type NullableProductsProductBundleStatus struct {
	value *ProductsProductBundleStatus
	isSet bool
}

func (v NullableProductsProductBundleStatus) Get() *ProductsProductBundleStatus {
	return v.value
}

func (v *NullableProductsProductBundleStatus) Set(val *ProductsProductBundleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProductsProductBundleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProductsProductBundleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductsProductBundleStatus(val *ProductsProductBundleStatus) *NullableProductsProductBundleStatus {
	return &NullableProductsProductBundleStatus{value: val, isSet: true}
}

func (v NullableProductsProductBundleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductsProductBundleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

