{
  "components": {
    "schemas": {
      "AddBoxItemToBox": {
        "additionalProperties": false,
        "description": "Information about an inventory item contained inside a receiving order box",
        "properties": {
          "inventory_id": {
            "description": "Unique inventory id of the items in the box",
            "format": "int32",
            "type": "integer"
          },
          "lot_date": {
            "description": "Lot expiration date for the items in the box",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "lot_number": {
            "description": "Lot number of the items in the box",
            "example": "2222",
            "nullable": true,
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of the items in the box",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "inventory_id",
          "quantity"
        ],
        "type": "object"
      },
      "AddBoxToOrder": {
        "additionalProperties": false,
        "description": "Information about a box shipment to be added to a receiving order",
        "properties": {
          "box_items": {
            "description": "Items contained in this box",
            "items": {
              "$ref": "#/components/schemas/AddBoxItemToBox"
            },
            "nullable": true,
            "type": "array"
          },
          "tracking_number": {
            "description": "Tracking number for the box shipment",
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "box_items",
          "tracking_number"
        ],
        "type": "object"
      },
      "AddProductToOrder": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AddProductToOrderByProductId"
          },
          {
            "$ref": "#/components/schemas/AddProductToOrderByReferenceId"
          }
        ]
      },
      "AddProductToOrderByProductId": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Unique id of the product",
            "format": "int32",
            "type": "integer"
          },
          "quantity": {
            "description": "The quantity of this product ordered",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "quantity"
        ],
        "type": "object"
      },
      "AddProductToOrderByReferenceId": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "Name of the product",
            "example": "TShirtBlueM",
            "type": "string"
          },
          "quantity": {
            "description": "The quantity of this product ordered",
            "format": "int32",
            "type": "integer"
          },
          "reference_id": {
            "description": "Unique reference id of the product",
            "example": "TShirtBlueM",
            "type": "string"
          }
        },
        "required": [
          "quantity",
          "reference_id"
        ],
        "type": "object"
      },
      "AssignOrderToFulfillmentCenter": {
        "additionalProperties": false,
        "description": "Model containing information that assigns a receiving order to a fulfillment center",
        "properties": {
          "id": {
            "description": "ID of the fulfillment center to assign this receiving order to",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Box": {
        "additionalProperties": false,
        "description": "Information about a box shipment included in a receiving order",
        "properties": {
          "arrived_date": {
            "description": "Date the box arrived",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "box_items": {
            "description": "Information about the items included in the box",
            "items": {
              "$ref": "#/components/schemas/BoxItem"
            },
            "nullable": true,
            "type": "array"
          },
          "box_number": {
            "description": "The number of the box in the receiving order",
            "format": "int32",
            "type": "integer"
          },
          "box_status": {
            "$ref": "#/components/schemas/BoxStatus"
          },
          "counting_started_date": {
            "description": "Date counting of the box's inventory items started",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "received_date": {
            "description": "Date the box was received",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "Tracking number of the box shipment",
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BoxItem": {
        "additionalProperties": false,
        "description": "Information about an item contained inside a box as part of a receiving order",
        "properties": {
          "inventory_id": {
            "description": "Unique identifier of the inventory item",
            "format": "int32",
            "type": "integer"
          },
          "lot_date": {
            "description": "Expiration date of the item's lot",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "lot_number": {
            "description": "Lot number the item belongs to",
            "nullable": true,
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of the item included",
            "format": "int32",
            "type": "integer"
          },
          "received_quantity": {
            "description": "Quantity of the item that was received after processing the receiving order",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BoxStatus": {
        "enum": [
          "Awaiting",
          "Arrived",
          "Completed",
          "Counting",
          "Stowing",
          "Cancelled"
        ],
        "type": "string"
      },
      "BundleRootInformation": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Id of the bundle root product",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the bundle root product",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CancelShipments": {
        "additionalProperties": false,
        "description": "Model for cancel multiple shipments at once",
        "properties": {
          "shipment_ids": {
            "description": "Shipment IDs to cancel",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CanceledOrder": {
        "additionalProperties": false,
        "description": "",
        "properties": {
          "canceled_shipment_results": {
            "description": "Results of camceling the shipments associated with the order",
            "items": {
              "$ref": "#/components/schemas/CanceledShipment"
            },
            "type": "array"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "order_id": {
            "description": "The ID of the canceled order",
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "description": "The overall result of canceling the shipments associated with the order",
            "enum": [
              "Success",
              "Failure",
              "PartialSuccess"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CanceledShipment": {
        "additionalProperties": false,
        "description": "",
        "properties": {
          "action": {
            "description": "",
            "enum": [
              "Cancel"
            ],
            "type": "string"
          },
          "is_success": {
            "description": "If the cancel action was successfull",
            "type": "boolean"
          },
          "reason": {
            "description": "The reason the cancellation result",
            "type": "string"
          },
          "shipment_id": {
            "description": "The ID of the shipment",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CanceledShipments": {
        "additionalProperties": false,
        "description": "",
        "properties": {
          "results": {
            "description": "The results of all cancellation actions",
            "items": {
              "$ref": "#/components/schemas/CanceledShipment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Channel": {
        "additionalProperties": false,
        "properties": {
          "application_name": {
            "description": "Name of the application that owns the channel",
            "example": "Api",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique id of the channel",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the channel",
            "nullable": true,
            "type": "string"
          },
          "scopes": {
            "description": "Array of permissions granted for the channel",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChannelInfo": {
        "additionalProperties": false,
        "description": "Created by channel metadata",
        "properties": {
          "id": {
            "description": "Unique id of the channel",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the channel",
            "example": "ShipBobs-Shopify-Store",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateOrder": {
        "additionalProperties": false,
        "properties": {
          "order_number": {
            "description": "User friendly orderId or store order number that will be shown on the Orders Page. If not provided, referenceId will be used",
            "maxLength": 400,
            "type": "string"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/AddProductToOrder"
            },
            "minLength": 1,
            "type": "array"
          },
          "purchase_date": {
            "description": "Date this order was purchase by the end user",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "recipient": {
            "$ref": "#/components/schemas/RecipientInfo"
          },
          "reference_id": {
            "maxLength": 300,
            "type": "string"
          },
          "shipping_method": {
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "type": {
            "description": "Defaults to Direct to Consumer (DTC) if not provided. Note: B2B is not supported at this time",
            "enum": [
              "DTC",
              "DropShip",
              "B2B"
            ],
            "type": "string"
          }
        },
        "required": [
          "products",
          "recipient",
          "reference_id",
          "shipping_method"
        ],
        "type": "object"
      },
      "CreateProduct": {
        "additionalProperties": false,
        "description": "The product to create",
        "properties": {
          "barcode": {
            "description": "Barcode for the product",
            "example": "123456789012",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the product",
            "example": "Medium Blue T-Shirt",
            "nullable": true,
            "type": "string"
          },
          "reference_id": {
            "description": "Unique reference identifier for the product. Any linked or generated inventory will also be uniquely identified by this value",
            "example": "TShirtBlueM",
            "nullable": true,
            "type": "string"
          },
          "sku": {
            "description": "Stock keeping unit for the product",
            "example": "TShirtBlueM",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "reference_id"
        ],
        "type": "object"
      },
      "CreateReceivingOrder": {
        "additionalProperties": false,
        "description": "Information to create a new receiving order",
        "properties": {
          "box_packaging_type": {
            "$ref": "#/components/schemas/PackingType"
          },
          "boxes": {
            "description": "Box shipments to be added to this receiving order",
            "items": {
              "$ref": "#/components/schemas/AddBoxToOrder"
            },
            "nullable": true,
            "type": "array"
          },
          "expected_arrival_date": {
            "description": "Expected arrival date of all the box shipments in this receiving order",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/AssignOrderToFulfillmentCenter"
          },
          "package_type": {
            "$ref": "#/components/schemas/PackageType"
          }
        },
        "required": [
          "box_packaging_type",
          "boxes",
          "expected_arrival_date",
          "fulfillment_center",
          "package_type"
        ],
        "type": "object"
      },
      "CreateReturn": {
        "additionalProperties": false,
        "properties": {
          "fulfillment_center": {
            "$ref": "#/components/schemas/ReturnFulfillmentCenter"
          },
          "inventory": {
            "description": "Array of inventory items being returned",
            "items": {
              "$ref": "#/components/schemas/ReturnInventory"
            },
            "minLength": 1,
            "nullable": true,
            "type": "array"
          },
          "original_shipment_id": {
            "description": "Shipment from which the items in the return originated",
            "example": 123456,
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "reference_id": {
            "description": "Client-defined external unique identifier for the return order",
            "example": "ShipBob_Return_123",
            "maxLength": 50,
            "nullable": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "Tracking number for the return shipment",
            "example": "1Z9999999999999999",
            "maxLength": 500,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "fulfillment_center",
          "inventory",
          "reference_id"
        ],
        "type": "object"
      },
      "Dimension": {
        "additionalProperties": false,
        "description": "Information about an inventory item's dimensions",
        "properties": {
          "depth": {
            "description": "Depth in inches of this inventory item",
            "format": "double",
            "type": "number"
          },
          "length": {
            "description": "Length in inches of this inventory item",
            "format": "double",
            "type": "number"
          },
          "weight": {
            "description": "Weight in ounces of this inventory item",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "Width in inches of this inventory item",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "EstimationAddress": {
        "additionalProperties": false,
        "properties": {
          "address1": {
            "description": "First line of the address",
            "example": "100 Nowhere Blvd",
            "type": "string"
          },
          "address2": {
            "description": "Second line of the address",
            "example": "Suite 100",
            "type": "string"
          },
          "city": {
            "description": "The city",
            "example": "Gotham City",
            "type": "string"
          },
          "company_name": {
            "description": "Name of the company receiving the shipment",
            "example": "Wayne Enterprises",
            "type": "string"
          },
          "country": {
            "description": "The country (Must be ISO Alpha-2 for estimates)",
            "example": "US",
            "type": "string"
          },
          "state": {
            "description": "The state or province",
            "example": "NJ",
            "type": "string"
          },
          "zip_code": {
            "description": "The zip code or postal code",
            "example": "07093",
            "type": "string"
          }
        },
        "required": [
          "country"
        ],
        "type": "object"
      },
      "FulfillmentCenter": {
        "additionalProperties": false,
        "description": "Information about a fulfillment center that a shipment can belong to",
        "properties": {
          "id": {
            "description": "Id of the fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the fulfillment center",
            "example": "Cicero (IL)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Inventory": {
        "additionalProperties": false,
        "description": "Information about an inventory item",
        "properties": {
          "dimensions": {
            "$ref": "#/components/schemas/Dimension"
          },
          "fulfillable_quantity_by_fulfillment_center": {
            "description": "Fulfillable quantity of this inventory item broken down by fulfillment center location",
            "items": {
              "$ref": "#/components/schemas/InventoryFulfillmentCenterQuantity"
            },
            "type": "array"
          },
          "fulfillable_quantity_by_lot": {
            "description": "Fulfillable quantity of this inventory item broken down by lot",
            "items": {
              "$ref": "#/components/schemas/InventoryLotQuantity"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique id of the inventory item",
            "format": "int32",
            "type": "integer"
          },
          "is_active": {
            "description": "Whether the inventory is active or not",
            "type": "boolean"
          },
          "is_case_pick": {
            "description": "True if the inventory item is marked as case pick",
            "type": "boolean"
          },
          "is_digital": {
            "description": "True if the inventory item is marked as a digital item",
            "type": "boolean"
          },
          "is_lot": {
            "description": "True if this inventory item is organized into lots",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the inventory item",
            "example": "Medium Blue T-Shirt",
            "type": "string"
          },
          "packaging_attribute": {
            "description": "Attribute influencing the packaging requirements of this inventory item",
            "enum": [
              "None",
              "Fragile",
              "Foldable",
              "Stackable",
              "Book",
              "CustomPackaging",
              "CustomDunnage",
              "MarketingInsert",
              "Poster"
            ],
            "type": "string"
          },
          "total_awaiting_quantity": {
            "description": "Total quantity in unreceived receiving orders for this inventory item",
            "format": "int32",
            "type": "integer"
          },
          "total_backordered_quantity": {
            "description": "The amount of the item you need to send to ShipBob to fulfill all exception orders containing  the item. This is the exception_quantity less the fulfillable_quantity of the item.",
            "format": "int32",
            "type": "integer"
          },
          "total_committed_quantity": {
            "description": "Total committed quantity of this inventory item",
            "format": "int32",
            "type": "integer"
          },
          "total_exception_quantity": {
            "description": "The total quantity of all items that are contained within orders that are in exception/out of stock status. Out of stock orders have not been processed and therefore do not have lot or fulfillment centers assigned.",
            "format": "int32",
            "type": "integer"
          },
          "total_fulfillable_quantity": {
            "description": "Total fulfillable quantity of this inventory item",
            "format": "int32",
            "type": "integer"
          },
          "total_internal_transfer_quantity": {
            "description": "The total quantity of all items that are in the process of internal transit  between ShipBob fulfillment centers. These items are not pickable or fulfillable until they have been received and moved to the \"On Hand\" quantity of the destination FC. Internal transit quantities for each FC represent the incoming transfer stock for that specific location.",
            "format": "int32",
            "type": "integer"
          },
          "total_onhand_quantity": {
            "description": "Total onhand quantity of this inventory item",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InventoryFulfillmentCenterQuantity": {
        "additionalProperties": false,
        "description": "Break down of fulfillable quantity by fulfillment center",
        "properties": {
          "awaiting_quantity": {
            "description": "Amount of quantity awaiting arrival of a receiving order at this fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "committed_quantity": {
            "description": "Amount of committed quantity at this fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "fulfillable_quantity": {
            "description": "Amount of fulfillable quantity at this fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "Unique id of the fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "internal_transfer_quantity": {
            "description": "The quantity of items that are in the process of internal transit  between ShipBob fulfillment centers, with a destination of this fulfillment center. These items are not pickable or fulfillable until they have been received and moved  to the \"On Hand\" quantity of the destination FC.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the fulfillment center",
            "example": "Cicero",
            "type": "string"
          },
          "onhand_quantity": {
            "description": "Amount of onhand quantity at this fulfillment center",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InventoryLotQuantity": {
        "additionalProperties": false,
        "description": "Break down of fulfillable quantity by lot",
        "properties": {
          "awaiting_quantity": {
            "description": "Quantity of inventory items belonging to this lot awaiting arrival of a receiving order",
            "format": "int32",
            "type": "integer"
          },
          "committed_quantity": {
            "description": "Committed quantity of inventory items belonging to this lot",
            "format": "int32",
            "type": "integer"
          },
          "expiration_date": {
            "description": "Expiration date for this lot",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "fulfillable_quantity": {
            "description": "Fulfillable quantity of inventory items belonging to this lot",
            "format": "int32",
            "type": "integer"
          },
          "fulfillable_quantity_by_fulfillment_center": {
            "description": "Fulfillable quantity of inventory items belonging to this lot broken down by fulfillment center location",
            "items": {
              "$ref": "#/components/schemas/InventoryFulfillmentCenterQuantity"
            },
            "type": "array"
          },
          "internal_transfer_quantity": {
            "description": "The quantity of all items belonging to this lot that are in the process of internal transit  between ShipBob fulfillment centers. These items are not pickable or fulfillable until they have been received and moved to the \"On Hand\" quantity of the destination FC. Internal transit quantities for each FC represent the incoming transfer stock for that specific location.",
            "format": "int32",
            "type": "integer"
          },
          "lot_number": {
            "description": "Identification number of this lot",
            "example": "1234",
            "type": "string"
          },
          "onhand_quantity": {
            "description": "OnHand quantity of inventory items belonging to this lot",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Location": {
        "additionalProperties": false,
        "properties": {
          "abbreviation": {
            "description": "Abbreviation of the location. Combination of nearest Airport Code and the sequence number.",
            "nullable": true,
            "type": "string"
          },
          "access_granted": {
            "description": "Indicates whether or not the user is authorized to interact at all with the location",
            "type": "boolean"
          },
          "attributes": {
            "description": "Available attributes for the location",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "Id of the location in ShipBob's database",
            "format": "int32",
            "type": "integer"
          },
          "is_active": {
            "description": "Indicates if the location is operationally active or inactive",
            "type": "boolean"
          },
          "is_receiving_enabled": {
            "description": "Indicates if the receiving is enabled for FC",
            "type": "boolean"
          },
          "is_shipping_enabled": {
            "description": "Indicates if the shipping is enabled for FC",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the location. Follows the naming convention City (State Code) for domestic FCs and City (Country Code) for international FCs",
            "nullable": true,
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/LocationRegion"
          },
          "services": {
            "description": "Services provided by the location",
            "items": {
              "$ref": "#/components/schemas/LocationService"
            },
            "nullable": true,
            "type": "array"
          },
          "timezone": {
            "description": "Time zone of the location",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationAddress": {
        "additionalProperties": false,
        "description": "The service-specific address of the location. Each object contains address type, address1, address2, city, state, country, zip code, phone number, and email",
        "properties": {
          "address1": {
            "description": "First part of the address of the location for this service",
            "nullable": true,
            "type": "string"
          },
          "address2": {
            "description": "Second part of the address of the location for this service",
            "nullable": true,
            "type": "string"
          },
          "city": {
            "description": "City of the location",
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Country of the location",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "description": "Email of the location for this service",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name to use in the address of the location for this service",
            "nullable": true,
            "type": "string"
          },
          "phone_number": {
            "description": "Phone Number of the location for this service",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "State of the location",
            "nullable": true,
            "type": "string"
          },
          "zip_code": {
            "description": "Zip code of the location",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationRegion": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Unique Id for the location region",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the region the location is in.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationService": {
        "additionalProperties": false,
        "properties": {
          "address": {
            "$ref": "#/components/schemas/LocationAddress"
          },
          "enabled": {
            "description": "Indicates if the user is authorized to access this service at the location",
            "type": "boolean"
          },
          "service_type": {
            "$ref": "#/components/schemas/LocationServiceTypeEnum"
          }
        },
        "type": "object"
      },
      "LocationServiceTypeEnum": {
        "enum": [
          "Receiving",
          "Returns"
        ],
        "type": "string"
      },
      "Order": {
        "additionalProperties": false,
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ChannelInfo"
          },
          "created_date": {
            "description": "Date this order was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique id of the order",
            "format": "int32",
            "type": "integer"
          },
          "order_number": {
            "description": "User friendly orderId or store order number that will be shown on the Orders Page. If not provided, referenceId will be used",
            "type": "string"
          },
          "products": {
            "description": "List of products included in the order",
            "items": {
              "$ref": "#/components/schemas/ProductInfo"
            },
            "type": "array"
          },
          "purchase_date": {
            "description": "Date this order was purchase by the end user",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "recipient": {
            "$ref": "#/components/schemas/RecipientInfo"
          },
          "reference_id": {
            "description": "Client-defined external unique id of the order",
            "type": "string"
          },
          "shipments": {
            "description": "Shipments affiliated with the order",
            "items": {
              "$ref": "#/components/schemas/Shipment"
            },
            "type": "array"
          },
          "shipping_method": {
            "description": "Client-defined shipping method",
            "example": "Free 2-day Shipping",
            "type": "string"
          },
          "status": {
            "description": "The order status",
            "enum": [
              "Processing",
              "Exception",
              "PartiallyFulfilled",
              "Fulfilled",
              "Cancelled",
              "ImportReview"
            ],
            "type": "string"
          },
          "tags": {
            "description": "Client-defined order tags",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "type": {
            "description": "Shipment type of the order",
            "enum": [
              "DTC",
              "DropShip",
              "B2B"
            ],
            "example": "DTC",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderAddress": {
        "additionalProperties": false,
        "properties": {
          "address1": {
            "description": "First line of the address",
            "example": "100 Nowhere Blvd",
            "type": "string"
          },
          "address2": {
            "description": "Second line of the address",
            "example": "Suite 100",
            "type": "string"
          },
          "city": {
            "description": "The city",
            "example": "Gotham City",
            "type": "string"
          },
          "company_name": {
            "description": "Name of the company receiving the shipment",
            "example": "Wayne Enterprises",
            "type": "string"
          },
          "country": {
            "description": "The country (Must be ISO Alpha-2 for estimates)",
            "example": "US",
            "type": "string"
          },
          "state": {
            "description": "The state or province",
            "example": "NJ",
            "type": "string"
          },
          "zip_code": {
            "description": "The zip code or postal code",
            "example": "07093",
            "type": "string"
          }
        },
        "required": [
          "address1",
          "city",
          "country"
        ],
        "type": "object"
      },
      "OrderEstimate": {
        "additionalProperties": false,
        "properties": {
          "estimates": {
            "description": "Array of estimates for each shipping method",
            "items": {
              "$ref": "#/components/schemas/OrderEstimateDetail"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OrderEstimateDetail": {
        "additionalProperties": false,
        "properties": {
          "estimated_price": {
            "description": "Estimated price in dollars for the provided shipping method",
            "format": "double",
            "type": "number"
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/FulfillmentCenter"
          },
          "shipping_method": {
            "description": "Provided shipping method. Maps to ship option in ShipBob.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderEstimateFulfillmentRequest": {
        "additionalProperties": false,
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EstimationAddress"
          },
          "products": {
            "description": "Products to be included in the order. Each product must include one of reference_id or id",
            "items": {
              "$ref": "#/components/schemas/OrderEstimateProductInfo"
            },
            "type": "array"
          },
          "shipping_methods": {
            "description": "Array of strings specifying shipping methods for which to fetch estimates.  If this field is omitted we will return estimates for all shipping methods defined in ShipBob",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "address",
          "products"
        ],
        "type": "object"
      },
      "OrderEstimateProductInfo": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Unique id of the product (Must be provided if reference_id is unknown)",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "quantity": {
            "description": "The quantity of this product ordered",
            "format": "int32",
            "maximum": 199,
            "minimum": 1,
            "type": "integer"
          },
          "reference_id": {
            "description": "Unique reference id of the product (Must be provided if ID is unknown)",
            "example": "TShirtBlueM",
            "type": "string"
          }
        },
        "required": [
          "quantity"
        ],
        "type": "object"
      },
      "OrderInventory": {
        "additionalProperties": false,
        "description": "Information about inventory belonging to a store product",
        "properties": {
          "expiration_date": {
            "description": "Expiration date of the inventory",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique id of the inventory",
            "format": "int32",
            "type": "integer"
          },
          "is_dangerous_goods": {
            "description": "Is inventory Dangerous Good",
            "example": true,
            "type": "boolean"
          },
          "lot": {
            "description": "Lot number of the inventory",
            "example": "22222",
            "type": "string"
          },
          "name": {
            "description": "Name of the inventory item",
            "example": "Medium Blue T-Shirt",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of the inventory item to be included in the fulfillment",
            "format": "int32",
            "type": "integer"
          },
          "quantity_committed": {
            "description": "The quantity of the inventory item allocated from the assigned fulfillment center and committed to the order. If quantity committed is less than order quantity, then the inventory item is out of stock at the assigned fulfillment center.",
            "format": "int32",
            "type": "integer"
          },
          "serial_numbers": {
            "description": "Serial number of the inventory",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OrderMeasurements": {
        "additionalProperties": false,
        "description": "Measurements of a shipment",
        "properties": {
          "depth_in": {
            "description": "Total depth in inches",
            "format": "int32",
            "type": "integer"
          },
          "length_in": {
            "description": "Total length in inches",
            "format": "int32",
            "type": "integer"
          },
          "total_weight_oz": {
            "description": "Total weight in ounces",
            "format": "int32",
            "type": "integer"
          },
          "width_in": {
            "description": "Total width in inches",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OrderStatusDetail": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "Describes what the status detail means",
            "type": "string"
          },
          "exception_fulfillment_center_id": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "description": "The id of the status detail",
            "format": "int32",
            "type": "integer"
          },
          "inventory_id": {
            "description": "Inventory Id the detail applies to (if applicable)",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "description": "Short name of the status detail",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageType": {
        "enum": [
          "Package",
          "Pallet",
          "FloorLoadedContainer"
        ],
        "type": "string"
      },
      "PackingType": {
        "enum": [
          "EverythingInOneBox",
          "OneSkuPerBox",
          "MultipleSkuPerBox"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "ttype"
        },
        "properties": {
          "detail": {
            "nullable": true,
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "additionalProperties": false,
              "type": "object"
            },
            "nullable": true,
            "readOnly": true,
            "type": "object"
          },
          "instance": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "ttype": {
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "ttype"
        ],
        "type": "object"
      },
      "Product": {
        "additionalProperties": false,
        "properties": {
          "barcode": {
            "description": "Barcode for the product",
            "example": "123456789012",
            "nullable": true,
            "type": "string"
          },
          "bundle_root_information": {
            "$ref": "#/components/schemas/BundleRootInformation"
          },
          "channel": {
            "$ref": "#/components/schemas/ProductChannel"
          },
          "created_date": {
            "description": "Date the product was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "fulfillable_inventory_items": {
            "description": "The inventory that this product will resolve to when packing a shipment",
            "items": {
              "$ref": "#/components/schemas/ProductInventoryItem"
            },
            "nullable": true,
            "type": "array"
          },
          "fulfillable_quantity_by_fulfillment_center": {
            "description": "Fulfillable quantity of this product broken down by fulfillment center location",
            "items": {
              "$ref": "#/components/schemas/ProductFulfillmentCenterQuantity"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "Unique identifier of the product",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of the product",
            "example": "Medium Blue T-Shirt",
            "nullable": true,
            "type": "string"
          },
          "reference_id": {
            "description": "Unique reference identifier of the product",
            "example": "TShirtBlueM",
            "nullable": true,
            "type": "string"
          },
          "sku": {
            "description": "Stock keeping unit for the product",
            "example": "TShirtBlueM",
            "nullable": true,
            "type": "string"
          },
          "total_committed_quantity": {
            "description": "Total committed quantity of this product",
            "format": "int32",
            "type": "integer"
          },
          "total_fulfillable_quantity": {
            "description": "Total fulfillable quantity of this product",
            "format": "int32",
            "type": "integer"
          },
          "total_onhand_quantity": {
            "description": "Total on hand quantity of this product",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProductActiveStatus": {
        "enum": [
          "Any",
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "ProductBundleStatus": {
        "enum": [
          "Any",
          "Bundle",
          "NotBundle"
        ],
        "type": "string"
      },
      "ProductChannel": {
        "additionalProperties": false,
        "description": "Information about a store channel",
        "properties": {
          "id": {
            "description": "Unique id of the store channel",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the store channel",
            "example": "House of Slippers",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductFulfillmentCenterQuantity": {
        "additionalProperties": false,
        "description": "Break down of quantities by fulfillment center",
        "properties": {
          "committed_quantity": {
            "description": "Amount of committed quantity at this fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "fulfillable_quantity": {
            "description": "Amount of fulfillable quantity at this fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "Unique id of the fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the fulfillment center",
            "example": "Cicero",
            "nullable": true,
            "type": "string"
          },
          "onhand_quantity": {
            "description": "Amount of onhand quantity at this fulfillment center",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProductInfo": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Unique id of the product",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "quantity": {
            "description": "The quantity of this product ordered",
            "format": "int32",
            "type": "integer"
          },
          "reference_id": {
            "description": "Unique reference id of the product",
            "example": "TShirtBlueM",
            "type": "string"
          },
          "sku": {
            "description": "Stock keeping unit for the product",
            "example": "TShirtBlueM",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductInventoryItem": {
        "additionalProperties": false,
        "description": "The inventory that store products can resolve to when packing a shipment",
        "properties": {
          "id": {
            "description": "Unique id of the inventory item",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the inventory item",
            "example": "Medium Blue T-Shirt",
            "nullable": true,
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of the inventory item included in a store product",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReceivingFulfillmentCenter": {
        "additionalProperties": false,
        "description": "Information about a fulfillment center",
        "properties": {
          "address1": {
            "description": "Address line one of the fulfillment center",
            "example": "5900 W Ogden Ave",
            "nullable": true,
            "type": "string"
          },
          "address2": {
            "description": "Address line two of the fulfillment center",
            "example": "Suite 100",
            "nullable": true,
            "type": "string"
          },
          "city": {
            "description": "City the fulfillment center is located in",
            "example": "Cicero",
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Country the fulfillment center is located in",
            "example": "USA",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "description": "Email contact for the fulfillment center",
            "example": "example@example.com",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the fulfillment center",
            "example": "Cicero (IL)",
            "nullable": true,
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number contact for the fulfillment center",
            "example": "555-555-5555",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "State the fulfillment center is located in",
            "example": "IL",
            "nullable": true,
            "type": "string"
          },
          "timezone": {
            "description": "Timezone the fulfillment center is located in",
            "example": "Central Standard Time",
            "nullable": true,
            "type": "string"
          },
          "zip_code": {
            "description": "Postal code of the fulfillment center",
            "example": "60804",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReceivingOrder": {
        "additionalProperties": false,
        "description": "Information about a receiving order",
        "properties": {
          "box_labels_uri": {
            "description": "URL to the packing slip to be included in each box shipment for this receiving order",
            "example": "https://api.shipbob.com/1.0/receiving/1/labels",
            "nullable": true,
            "type": "string"
          },
          "box_packaging_type": {
            "$ref": "#/components/schemas/PackingType"
          },
          "boxes": {
            "description": "Information about the boxes being shipped in this receiving order",
            "items": {
              "$ref": "#/components/schemas/Box"
            },
            "nullable": true,
            "type": "array"
          },
          "expected_arrival_date": {
            "description": "Expected date that all packages will have arrived",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/ReceivingFulfillmentCenter"
          },
          "id": {
            "description": "Unique id of the warehouse receiving order",
            "format": "int32",
            "type": "integer"
          },
          "insert_date": {
            "description": "Insert date of the receiving order",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "last_updated_date": {
            "description": "Last date the receiving order was updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "package_type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "status": {
            "$ref": "#/components/schemas/ReceivingStatus"
          }
        },
        "type": "object"
      },
      "ReceivingStatus": {
        "enum": [
          "Awaiting",
          "Processing",
          "Completed",
          "Cancelled",
          "Incomplete",
          "Arrived",
          "PartiallyArrived"
        ],
        "type": "string"
      },
      "Recipient": {
        "additionalProperties": false,
        "description": "Information about the recipient of a shipment",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/OrderAddress"
          },
          "email": {
            "description": "Email address of the recipient",
            "example": "john@example.com",
            "type": "string"
          },
          "name": {
            "description": "Name of the recipient",
            "example": "John Doe",
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number of the recipient",
            "example": "555-555-5555",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecipientInfo": {
        "additionalProperties": false,
        "description": "Information about the recipient of an order",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/OrderAddress"
          },
          "email": {
            "description": "Email address of the recipient",
            "example": "john@example.com",
            "type": "string"
          },
          "name": {
            "description": "Name of the recipient",
            "example": "John Doe",
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number of the recipient",
            "example": "555-555-5555",
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ],
        "type": "object"
      },
      "ReturnAction": {
        "enum": [
          "Default",
          "Restock",
          "Quarantine",
          "Dispose"
        ],
        "type": "string"
      },
      "ReturnActionRequested": {
        "additionalProperties": false,
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ReturnAction"
          },
          "action_type": {
            "$ref": "#/components/schemas/ReturnActionSource"
          },
          "instructions": {
            "description": "Specific instructions to be taken for the inventory when processing the return",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReturnActionSource": {
        "enum": [
          "InventoryDefault",
          "Override"
        ],
        "type": "string"
      },
      "ReturnActionTaken": {
        "additionalProperties": false,
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ReturnAction"
          },
          "action_reason": {
            "description": "Reason the given action was taken",
            "nullable": true,
            "type": "string"
          },
          "quantity_processed": {
            "description": "Quantity of inventory processed with the taken action",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReturnChannelInfo": {
        "additionalProperties": false,
        "description": "Created by channel metadata",
        "properties": {
          "id": {
            "description": "Unique id of the channel",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the channel",
            "example": "ShipBobs-Shopify-Store",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReturnFulfillmentCenter": {
        "additionalProperties": false,
        "description": "Information about a fulfillment center",
        "properties": {
          "id": {
            "description": "Unique identifier of the fulfillment center",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the fulfillment center",
            "example": "Cicero (IL)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ReturnInventory": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "ID of the inventory item to return",
            "example": 111222,
            "format": "int32",
            "type": "integer"
          },
          "quantity": {
            "description": "Quantity of the returned inventory item in the return",
            "example": 1,
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          },
          "requested_action": {
            "$ref": "#/components/schemas/ReturnAction"
          }
        },
        "required": [
          "id",
          "quantity"
        ],
        "type": "object"
      },
      "ReturnInventoryItem": {
        "additionalProperties": false,
        "properties": {
          "action_requested": {
            "$ref": "#/components/schemas/ReturnActionRequested"
          },
          "action_taken": {
            "description": "Action(s) taken when processing the return",
            "items": {
              "$ref": "#/components/schemas/ReturnActionTaken"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "Unique id of the inventory item",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the inventory item",
            "nullable": true,
            "type": "string"
          },
          "quantity": {
            "description": "Quantity expected to be processed with the return",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReturnOrder": {
        "additionalProperties": false,
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ReturnChannelInfo"
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/ReturnFulfillmentCenter"
          },
          "id": {
            "description": "Unique id of the Return Order",
            "format": "int32",
            "type": "integer"
          },
          "insert_date": {
            "description": "Date this return order was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "inventory": {
            "description": "List of inventory included in the return order",
            "items": {
              "$ref": "#/components/schemas/ReturnInventoryItem"
            },
            "nullable": true,
            "type": "array"
          },
          "invoice_amount": {
            "description": "Invoiced amount of return order (sum of transaction amounts)",
            "format": "double",
            "nullable": true,
            "type": "number"
          },
          "original_shipment_id": {
            "description": "Id of the corresponding shipment that is the souce of the return",
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "reference_id": {
            "description": "Client-defined external unique id of the return order",
            "nullable": true,
            "type": "string"
          },
          "return_type": {
            "$ref": "#/components/schemas/ReturnType"
          },
          "status": {
            "$ref": "#/components/schemas/ReturnStatus"
          },
          "tracking_number": {
            "description": "Tracking number of the return shipment",
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC",
            "nullable": true,
            "type": "string"
          },
          "transactions": {
            "description": "Array of transactions affiliated with the return order",
            "items": {
              "$ref": "#/components/schemas/ReturnTransaction"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReturnOrderStatusHistory": {
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ReturnStatus"
          },
          "time_stamp": {
            "description": "Date this corresponding return order status was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReturnStatus": {
        "enum": [
          "AwaitingArrival",
          "Arrived",
          "Processing",
          "Completed",
          "Cancelled"
        ],
        "type": "string"
      },
      "ReturnTransaction": {
        "additionalProperties": false,
        "properties": {
          "amount": {
            "description": "Transaction amount in dollars",
            "example": 2.5,
            "format": "double",
            "type": "number"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/ReturnTransactionLogSource"
          }
        },
        "type": "object"
      },
      "ReturnTransactionLogSource": {
        "enum": [
          "ReturnLabelInvoice",
          "ReturnProcessingFee",
          "ReturnToSenderFee"
        ],
        "type": "string"
      },
      "ReturnType": {
        "enum": [
          "Regular",
          "ReturnToSender"
        ],
        "type": "string"
      },
      "ServiceLevelDetail": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Unique id for the service level",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name or title of the service level",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShipMethodDetail": {
        "additionalProperties": false,
        "properties": {
          "active": {
            "description": "Indicates if the shipping method is active",
            "type": "boolean"
          },
          "default": {
            "description": "Indicates the shipping method is a ShipBob default shipping method.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique id for shipping method.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Name of the ship method as selected by the merchant and saved in ShipBob's database (i.e. \"ground\"). Corresponds to the shipping_method field in the Orders API.",
            "type": "string"
          },
          "service_level": {
            "$ref": "#/components/schemas/ServiceLevelDetail"
          }
        },
        "type": "object"
      },
      "Shipment": {
        "additionalProperties": false,
        "description": "Information about a shipment",
        "properties": {
          "actual_fulfillment_date": {
            "description": "The datetime of ShipBob's completion of the fulfillment operation as promised.  Currently, this means the shipment has been picked, packed, and label has been printed.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created_date": {
            "description": "Date this shipment was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "estimated_fulfillment_date": {
            "description": "The datetime of ShipBob's commitment for completing  the shipment and handing to the carrier for delivery.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "estimated_fulfillment_date_status": {
            "description": "Status of ShipBob's completion of the fulfillment operation.",
            "enum": [
              "AwaitingInventoryAllocation",
              "AwaitingReset",
              "Unavailable",
              "PendingOnTime",
              "FulfilledOnTime",
              "PendingLate",
              "FulfilledLate"
            ],
            "type": "string"
          },
          "id": {
            "description": "Unique id of the shipment",
            "format": "int32",
            "type": "integer"
          },
          "insurance_value": {
            "description": "Monetary amount that this shipment was insured for",
            "format": "double",
            "nullable": true,
            "type": "number"
          },
          "invoice_amount": {
            "description": "Monetary amount that was invoiced for this shipment",
            "format": "double",
            "nullable": true,
            "type": "number"
          },
          "last_update_at": {
            "description": "Date this shipment was last updated",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/FulfillmentCenter"
          },
          "measurements": {
            "$ref": "#/components/schemas/OrderMeasurements"
          },
          "order_id": {
            "description": "Id of the order this shipment belongs to",
            "format": "int32",
            "type": "integer"
          },
          "package_material_type": {
            "description": "Container type for the shipment",
            "enum": [
              "Unknown",
              "Box",
              "BubbleMailer",
              "PolyMailer",
              "FragileBox",
              "PosterTube",
              "Custom",
              "Bookfold",
              "OwnContainer",
              "Undefined"
            ],
            "example": "Box",
            "type": "string"
          },
          "products": {
            "description": "Information about the products contained in this shipment",
            "items": {
              "$ref": "#/components/schemas/ShipmentProduct"
            },
            "type": "array"
          },
          "recipient": {
            "$ref": "#/components/schemas/Recipient"
          },
          "reference_id": {
            "description": "Client-defined external unique id of the order this shipment belongs to",
            "type": "string"
          },
          "require_signature": {
            "description": "If a shipment requires signature",
            "type": "boolean"
          },
          "ship_option": {
            "description": "Name of the shipping option used for this shipment",
            "example": "Standard",
            "type": "string"
          },
          "status": {
            "description": "The shipment status",
            "enum": [
              "None",
              "Processing",
              "Pending",
              "Completed",
              "Exception",
              "OnHold",
              "Cancelled",
              "CleanSweeped",
              "LabeledCreated",
              "ImportReview"
            ],
            "type": "string"
          },
          "status_details": {
            "description": "Additional details about the shipment status",
            "items": {
              "$ref": "#/components/schemas/OrderStatusDetail"
            },
            "type": "array"
          },
          "tracking": {
            "$ref": "#/components/schemas/Tracking"
          }
        },
        "type": "object"
      },
      "ShipmentLog": {
        "additionalProperties": false,
        "properties": {
          "log_type_id": {
            "description": "Log type id of the shipment",
            "format": "int32",
            "type": "integer"
          },
          "log_type_name": {
            "description": "Name of the log type",
            "type": "string"
          },
          "log_type_text": {
            "description": "Summary of log type meaning",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Specifics data for the event",
            "type": "object"
          },
          "timestamp": {
            "description": "Timestamp of event",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShipmentProduct": {
        "additionalProperties": false,
        "description": "Information about a store product belonging to a shipment",
        "properties": {
          "id": {
            "description": "Unique id of the product",
            "format": "int32",
            "type": "integer"
          },
          "inventory_items": {
            "description": "Information about fulfillable inventory items belonging to this product",
            "items": {
              "$ref": "#/components/schemas/OrderInventory"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the product",
            "example": "Medium Blue T-Shirt",
            "type": "string"
          },
          "reference_id": {
            "description": "Unique reference id of the product",
            "example": "TShirtBlueM",
            "type": "string"
          },
          "sku": {
            "description": "Stock keeping unit for the product",
            "example": "TShirtBlueM",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SortOrder": {
        "enum": [
          "Newest",
          "Oldest"
        ],
        "type": "string"
      },
      "Tag": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The key of the tag",
            "example": "Handling instructions",
            "maxLength": 50,
            "type": "string"
          },
          "value": {
            "description": "The value of the tag",
            "example": "Fragile",
            "maxLength": 500,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "Topics": {
        "enum": [
          "order_shipped",
          "shipment_delivered",
          "shipment_exception",
          "shipment_onhold"
        ],
        "type": "string"
      },
      "Tracking": {
        "additionalProperties": false,
        "description": "Tracking information for a shipment",
        "properties": {
          "carrier": {
            "description": "Carrier of the shipment",
            "example": "USPS",
            "type": "string"
          },
          "carrier_service": {
            "description": "The carrier's service which was used for this shipment",
            "example": "Priority",
            "type": "string"
          },
          "tracking_number": {
            "description": "Tracking number of the shipment",
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC",
            "type": "string"
          },
          "tracking_url": {
            "description": "URL to the website where a shipment can be tracked",
            "example": "https://www.example.com/tracking?id=860C8CDC8F0B4FC7AB69AC86C20539EC",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateProduct": {
        "additionalProperties": false,
        "description": "Updates to an existing product product",
        "properties": {
          "barcode": {
            "description": "Barcode for the product",
            "example": "123456789012",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the product",
            "example": "Medium Blue T-Shirt",
            "nullable": true,
            "type": "string"
          },
          "sku": {
            "description": "The stock keeping unit of the product",
            "example": "TShirtBlueM",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ValidationProblemDetails": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "additionalProperties": false,
            "properties": {
              "errors": {
                "additionalProperties": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "nullable": true,
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "properties": {
          "detail": {
            "nullable": true,
            "type": "string"
          },
          "errors": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "nullable": true,
            "readOnly": true,
            "type": "object"
          },
          "extensions": {
            "additionalProperties": {
              "additionalProperties": false,
              "type": "object"
            },
            "nullable": true,
            "readOnly": true,
            "type": "object"
          },
          "instance": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "format": "int32",
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Webhook": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "description": "Timestamp the webhook subscription was created",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the webhook subscription",
            "example": 12345,
            "format": "int32",
            "type": "integer"
          },
          "subscription_url": {
            "description": "URL subscription events will be posted to",
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "topic": {
            "$ref": "#/components/schemas/Topics"
          }
        },
        "type": "object"
      },
      "WebhookSubscription": {
        "additionalProperties": false,
        "properties": {
          "subscription_url": {
            "description": "URL we will call when an event matching the subscription topic is raised. Must have ssl enabled (https) and accept POST requests with content type of application/json",
            "example": "https://mywebsite.com/shipbob/handler",
            "format": "uri",
            "type": "string"
          },
          "topic": {
            "$ref": "#/components/schemas/Topics"
          }
        },
        "required": [
          "subscription_url",
          "topic"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.shipbob.com/connect/integrate",
            "scopes": {
              "channels_read": "Read channel metadata",
              "inventory_read": "Access read operations",
              "inventory_write": "Access write operations",
              "locations_read": "Access locations read operations",
              "orders_read": "Access read operations",
              "orders_write": "Access write operations",
              "products_read": "Access read operations",
              "products_write": "Access write operations",
              "receiving_read": "Access receiving read operations",
              "receiving_write": "Access receiving write operations",
              "returns_read": "Access returns read operations",
              "returns_write": "Access returns write operations",
              "webhooks_read": "Access read operations",
              "webhooks_write": "Access write operations"
            },
            "tokenUrl": "https://auth.shipbob.com/connect/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "description": "ShipBob Developer API Documentation",
    "title": "ShipBob Developer API",
    "version": "1.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/channel": {
      "get": {
        "operationId": "getChannels",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Channel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "HasChannelIdPermissions"
            ]
          }
        ],
        "summary": "Get user-authorized channel info",
        "tags": [
          "Channels"
        ]
      }
    },
    "/fulfillmentCenter": {
      "get": {
        "operationId": "getFulfillmentCenters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReceivingFulfillmentCenter"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ],
        "summary": "Get Fulfillment Centers",
        "tags": [
          "Receiving"
        ]
      }
    },
    "/inventory": {
      "get": {
        "operationId": "getInventories",
        "parameters": [
          {
            "description": "Page of inventory items to get",
            "in": "query",
            "name": "Page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Amount of inventory items per page to request",
            "in": "query",
            "name": "Limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Whether the inventory should be active or not",
            "in": "query",
            "name": "IsActive",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Whether the inventory is digital or not",
            "in": "query",
            "name": "IsDigital",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Comma separated inventory ids to filter by",
            "in": "query",
            "name": "IDs",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Sort will default to ascending order for each field.  To sort in descending order please pass a \"-\" in front of the field name.  For example, Sort=-onHand,name will sort by onHand descending",
            "in": "query",
            "name": "Sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search is available for 2 fields, Inventory ID and Name - 1. Expected behavior for search by Inventory ID is exact match 2. Expected behavior for search by Inventory Name is partial match, i.e. does not have to be start of word,  but must be consecutive characters. This is not case sensitive.",
            "in": "query",
            "name": "Search",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Inventory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "inventory_read"
            ]
          }
        ],
        "summary": "List inventory items",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/inventory/{inventoryId}": {
      "get": {
        "operationId": "getInventory",
        "parameters": [
          {
            "description": "The inventory id to get",
            "in": "path",
            "name": "inventoryId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "inventory_read"
            ]
          }
        ],
        "summary": "Get an inventory item",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/location": {
      "get": {
        "operationId": "getLocations",
        "parameters": [
          {
            "description": "Whether the inactive locations should be included or not",
            "in": "query",
            "name": "IncludeInactive",
            "schema": {
              "description": "Whether the inactive locations should be included or not",
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Return all the receiving enabled locations",
            "in": "query",
            "name": "ReceivingEnabled",
            "schema": {
              "description": "Return all the receiving enabled locations",
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Return all the access granted locations",
            "in": "query",
            "name": "AccessGranted",
            "schema": {
              "description": "Return all the access granted locations",
              "nullable": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          }
        },
        "security": [
          {
            "oauth2": [
              "locations_read"
            ]
          }
        ],
        "summary": "Get locations",
        "tags": [
          "Locations"
        ]
      }
    },
    "/order": {
      "get": {
        "description": "All parameters are AND filters",
        "operationId": "getOrders",
        "parameters": [
          {
            "description": "Page of orders to get",
            "in": "query",
            "name": "Page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Amount of orders per page to request",
            "in": "query",
            "name": "Limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "order ids to filter by",
            "in": "query",
            "name": "IDs",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Reference ids to filter by",
            "in": "query",
            "name": "ReferenceIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Start date to filter orders inserted later than",
            "in": "query",
            "name": "StartDate",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "End date to filter orders inserted earlier than",
            "in": "query",
            "name": "EndDate",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Order to sort results in",
            "in": "query",
            "name": "SortOrder",
            "schema": {
              "enum": [
                "Newest",
                "Oldest"
              ],
              "type": "string"
            }
          },
          {
            "description": "Has any portion of this order been assigned a tracking number",
            "in": "query",
            "name": "HasTracking",
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Start date to filter orders updated later than",
            "in": "query",
            "name": "LastUpdateStartDate",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "End date to filter orders updated later than",
            "in": "query",
            "name": "LastUpdateEndDate",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ],
        "summary": "Get Orders",
        "tags": [
          "Orders"
        ]
      },
      "post": {
        "operationId": "createOrder",
        "parameters": [
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_write"
            ]
          }
        ],
        "summary": "Create Order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/estimate": {
      "post": {
        "description": "This endpoint will provide, where possible, an estimate of pricing and fulfillment center assignment of a potential standard (direct to consumer) order.  Keep in mind that there are ways for the merchant to change FC assignment or product configuration after order creation that could invalidate this estimate.  Estimates cannot be returned for items that are unknown, out of stock, or too large for fulfillment using standard box sizes.  Additional services such as high-pick fees, shipping insurance, auto-splitting or auto-adding items to orders, and signature required are not included in this estimate.",
        "operationId": "createOrderEstimate",
        "parameters": [
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEstimateFulfillmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderEstimate"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ],
        "summary": "Estimate Fulfillment Cost For Order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}": {
      "get": {
        "operationId": "getOrder",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ],
        "summary": "Get Order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}/cancel": {
      "post": {
        "operationId": "cancelOrder",
        "parameters": [
          {
            "description": "The order ID to cancel",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel ID for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CanceledOrder"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_write"
            ]
          }
        ],
        "summary": "Cancel single Order by Order ID",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}/shipment": {
      "get": {
        "operationId": "getOrderShipments",
        "parameters": [
          {
            "description": "The order id to get shipments for",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get all Shipments for Order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}/shipment/{shipmentId}": {
      "get": {
        "operationId": "getOrderShipment",
        "parameters": [
          {
            "description": "The order id to get the shipment for",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get one Shipment by Order Id and Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}/shipment/{shipmentId}/cancel": {
      "post": {
        "operationId": "cancelOrderShipment",
        "parameters": [
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_cancel"
            ]
          }
        ],
        "summary": "Cancel one Shipment by Order Id and Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}/shipment/{shipmentId}/logs": {
      "get": {
        "operationId": "getOrderShipmentLogs",
        "parameters": [
          {
            "description": "The order id to get the shipment for",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ShipmentLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get logs for one Shipment by Order Id and Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/order/{orderId}/shipment/{shipmentId}/timeline": {
      "get": {
        "operationId": "getOrderShipmentTimelines",
        "parameters": [
          {
            "description": "The order id to get the shipment for",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ShipmentLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get one Shipment's status timeline by Order Id and Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/product": {
      "get": {
        "operationId": "getProducts",
        "parameters": [
          {
            "description": "Page of products to get",
            "in": "query",
            "name": "Page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Amount of products per page to request",
            "in": "query",
            "name": "Limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Comma separated list of product ids to filter by",
            "in": "query",
            "name": "IDs",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of reference ids to filter by",
            "in": "query",
            "name": "ReferenceIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Search is available for 2 fields of the inventory record related to the product: Inventory ID and Name - 1. Expected behavior for search by Inventory ID is exact match 2. Expected behavior for search by Inventory Name is partial match, i.e. does not have to be start of word,  but must be consecutive characters. This is not case sensitive.",
            "in": "query",
            "name": "Search",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status filter for products: - Any: Include both active and inactive - Active: Filter products that are Active - Inactive: Filter products that are Inactive",
            "in": "query",
            "name": "ActiveStatus",
            "schema": {
              "$ref": "#/components/schemas/ProductActiveStatus"
            }
          },
          {
            "description": "Bundle filter for products: - Any: Don't filter and consider products that are bundles or not bundles - Bundle: Filter by products that are bundles - NotBundle: Filter by products that are not bundles",
            "in": "query",
            "name": "BundleStatus",
            "schema": {
              "$ref": "#/components/schemas/ProductBundleStatus"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success",
            "headers": {
              "Next-Page": {
                "description": "The href of the next page of results, if there is a next page",
                "schema": {
                  "description": "The href of the next page of results, if there is a next page",
                  "format": "",
                  "type": "string"
                }
              },
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "description": "Number of the current page",
                  "format": "",
                  "type": "integer"
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "description": "Number of results per page",
                  "format": "",
                  "type": "integer"
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "description": "Total number of results",
                  "format": "",
                  "type": "integer"
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "description": "Total number of pages of results",
                  "format": "",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsRead"
            ]
          }
        ],
        "summary": "Get multiple products",
        "tags": [
          "Products"
        ]
      },
      "post": {
        "operationId": "createProduct",
        "parameters": [
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProduct"
              }
            }
          },
          "description": "The product to add"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsWrite"
            ]
          }
        ],
        "summary": "Add a single product to the store",
        "tags": [
          "Products"
        ]
      }
    },
    "/product/batch": {
      "post": {
        "operationId": "createProductBatch",
        "parameters": [
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateProduct"
                },
                "type": "array"
              }
            }
          },
          "description": "List of products to add"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsWrite"
            ]
          }
        ],
        "summary": "Add multiple products to the store",
        "tags": [
          "Products"
        ]
      }
    },
    "/product/{productId}": {
      "get": {
        "operationId": "getProduct",
        "parameters": [
          {
            "description": "Unique identifier of the product",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsRead"
            ]
          }
        ],
        "summary": "Get a single product",
        "tags": [
          "Products"
        ]
      },
      "put": {
        "operationId": "updateProduct",
        "parameters": [
          {
            "description": "Unique identifier of the product to modify",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProduct"
              }
            }
          },
          "description": "Updated fields to the product"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsWrite"
            ]
          }
        ],
        "summary": "Modify a single product",
        "tags": [
          "Products"
        ]
      }
    },
    "/product/{productId}/inventory": {
      "get": {
        "operationId": "getProductInventories",
        "parameters": [
          {
            "description": "The product id to get inventory for",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Inventory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "inventory_read"
            ]
          }
        ],
        "summary": "Get a list of inventory items by product id",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/receiving": {
      "post": {
        "operationId": "createReceiving",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReceivingOrder"
              }
            }
          },
          "description": "The receiving order to create"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivingOrder"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_write"
            ]
          }
        ],
        "summary": "Create Warehouse Receiving Order",
        "tags": [
          "Receiving"
        ]
      }
    },
    "/receiving/{id}": {
      "get": {
        "operationId": "getReceiving",
        "parameters": [
          {
            "description": "Id of the receiving order",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivingOrder"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ],
        "summary": "Get Warehouse Receiving Order",
        "tags": [
          "Receiving"
        ]
      }
    },
    "/receiving/{id}/cancel": {
      "post": {
        "operationId": "cancelReceiving",
        "parameters": [
          {
            "description": "Id of the receiving order to cancel",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_write"
            ]
          }
        ],
        "summary": "Cancel Warehouse Receiving Order",
        "tags": [
          "Receiving"
        ]
      }
    },
    "/receiving/{id}/labels": {
      "get": {
        "operationId": "getReceivingLabels",
        "parameters": [
          {
            "description": "Id of the receiving order",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ],
        "summary": "Get Warehouse Receiving Order Box Labels",
        "tags": [
          "Receiving"
        ]
      }
    },
    "/return": {
      "get": {
        "operationId": "getReturns",
        "parameters": [
          {
            "description": "Page of return orders to get",
            "in": "query",
            "name": "Page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Amount of return orders per page to request",
            "in": "query",
            "name": "Limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Order to sort results by",
            "in": "query",
            "name": "SortOrder",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          },
          {
            "description": "Start date to filter orders inserted later than",
            "in": "query",
            "name": "StartDate",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "End date to filter orders inserted earlier than",
            "in": "query",
            "name": "EndDate",
            "schema": {
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of return orders ids to filter by",
            "in": "query",
            "name": "IDs",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of reference ids to filter by",
            "in": "query",
            "name": "ReferenceIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of statuses to filter by",
            "in": "query",
            "name": "Status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ReturnStatus"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of destination fulfillment center IDs to filter by",
            "in": "query",
            "name": "FulfillmentCenterIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of tracking numbers to filter by",
            "in": "query",
            "name": "TrackingNumbers",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of original shipment IDs to filter by",
            "in": "query",
            "name": "OriginalShipmentIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of inventory IDs contained in return to filter by",
            "in": "query",
            "name": "InventoryIds",
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReturnOrder"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success",
            "headers": {
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "description": "Number of the current page",
                  "format": "",
                  "type": "integer"
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "description": "Number of results per page",
                  "format": "",
                  "type": "integer"
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "description": "Total number of results",
                  "format": "",
                  "type": "integer"
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "description": "Total number of pages of results",
                  "format": "",
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_read"
            ]
          }
        ],
        "summary": "Get Return Orders",
        "tags": [
          "Returns"
        ]
      },
      "post": {
        "operationId": "createReturn",
        "parameters": [
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturn"
              }
            }
          },
          "description": "Model defining the return"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnOrder"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_write"
            ]
          }
        ],
        "summary": "Create Return Order",
        "tags": [
          "Returns"
        ]
      }
    },
    "/return/{id}": {
      "get": {
        "operationId": "getReturn",
        "parameters": [
          {
            "description": "Id of the return order",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnOrder"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_read"
            ]
          }
        ],
        "summary": "Get Return Order",
        "tags": [
          "Returns"
        ]
      },
      "put": {
        "operationId": "updateReturn",
        "parameters": [
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Id of the return order",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturn"
              }
            }
          },
          "description": "Model defining the return"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnOrder"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_write"
            ]
          }
        ],
        "summary": "Modify Return Order",
        "tags": [
          "Returns"
        ]
      }
    },
    "/return/{id}/cancel": {
      "post": {
        "operationId": "cancelReturn",
        "parameters": [
          {
            "description": "Id of the return order",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnOrder"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_write"
            ]
          }
        ],
        "summary": "Cancel Return Order",
        "tags": [
          "Returns"
        ]
      }
    },
    "/return/{id}/statushistory": {
      "get": {
        "operationId": "getReturnStatushistory",
        "parameters": [
          {
            "description": "Id of the return order",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnOrderStatusHistory"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_read"
            ]
          }
        ],
        "summary": "Get One Return's status history",
        "tags": [
          "Returns"
        ]
      }
    },
    "/shipment/cancelbulk": {
      "post": {
        "operationId": "createShipmentCancelbulk",
        "parameters": [
          {
            "description": "Channel ID for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "required": true,
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelShipments"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CanceledShipments"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_write"
            ]
          }
        ],
        "summary": "Cancel multiple Shipments by Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/shipment/{shipmentId}": {
      "get": {
        "operationId": "getShipment",
        "parameters": [
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get one Shipment by Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/shipment/{shipmentId}/cancel": {
      "post": {
        "operationId": "cancelShipment",
        "parameters": [
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_cancel"
            ]
          }
        ],
        "summary": "Cancel one Shipment by Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/shipment/{shipmentId}/logs": {
      "get": {
        "operationId": "getShipmentLogs",
        "parameters": [
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ShipmentLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get logs for one Shipment by Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/shipment/{shipmentId}/timeline": {
      "get": {
        "operationId": "getShipmentTimelines",
        "parameters": [
          {
            "description": "The shipment id to get",
            "in": "path",
            "name": "shipmentId",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Channel Id for Operation",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ShipmentLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ],
        "summary": "Get one Shipment's status timeline by Shipment Id",
        "tags": [
          "Orders"
        ]
      }
    },
    "/shippingmethod": {
      "get": {
        "description": "Get all merchants shipping methods",
        "operationId": "getShippingmethods",
        "parameters": [
          {
            "description": "Page of orders to get",
            "in": "query",
            "name": "Page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Amount of records per page to request",
            "in": "query",
            "name": "Limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ShipMethodDetail"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ],
        "summary": "Get shipping methods",
        "tags": [
          "Orders"
        ]
      }
    },
    "/webhook": {
      "get": {
        "description": "All parameters are AND filters",
        "operationId": "getWebhooks",
        "parameters": [
          {
            "description": "Topic of the webhooks requested",
            "in": "query",
            "name": "Topic",
            "schema": {
              "$ref": "#/components/schemas/Topics"
            }
          },
          {
            "description": "Page of Webhooks to get",
            "in": "query",
            "name": "Page",
            "schema": {
              "description": "Page of Webhooks to get",
              "format": "int32",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Amount of Webhooks per page to request",
            "in": "query",
            "name": "Limit",
            "schema": {
              "description": "Amount of Webhooks per page to request",
              "format": "int32",
              "maximum": 250,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success",
            "headers": {
              "Next-Page": {
                "description": "The href of the next page of results, if there is a next page",
                "schema": {
                  "description": "The href of the next page of results, if there is a next page",
                  "format": "",
                  "type": "string"
                }
              },
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "description": "Number of the current page",
                  "format": "",
                  "type": "integer"
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "description": "Number of results per page",
                  "format": "",
                  "type": "integer"
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "description": "Total number of results",
                  "format": "",
                  "type": "integer"
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "description": "Total number of pages of results",
                  "format": "",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Get Webhooks",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "operationId": "createWebhook",
        "parameters": [
          {
            "description": "",
            "in": "header",
            "name": "shipbob_channel_id",
            "schema": {
              "description": "",
              "format": "int32",
              "nullable": true,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscription"
              }
            }
          },
          "description": ""
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client Error"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Create a new webhook subscription",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhook/{id}": {
      "delete": {
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "",
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Delete an existing webhook subscription",
        "tags": [
          "Webhooks"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.shipbob.com/1.0/"
    }
  ],
  "tags": [
    {
      "description": " >  Note: The orderId in the API response will not match the Id displayed in the ShipBob Merchant Portal when you navigate to the Orders page. ShipBob is currently undergoing a schema migration and the Id displayed in the ShipBob Merchant Portal is the shipmentId not the orderId. In the future, the portal will display both orderId(s) and shipmentId(s). \\n\\n Use the Orders Resource to create and retrieve orders in ShipBob. \\n\\n An order a digital record of a complete purchase that comes from an upstream source (i.e. Shopify) and is intended for ShipBob to fulfill. The order object includes products purchased, shipping address details, shipping method selected etc. Orders are created in ShipBob via a channel. \\n\\n When ShipBob fulfills the order, one or more shipments are created for that order. A shipment is a record of the physical package(s) sent out via a carrier. If an order is shipped in multiple packages then 2 or more shipments can be created for that order. \\n\\n ### Tips for creating orders in ShipBob via the POST Order endpoint: \\n\\n * Populate the referenceId with a unique and immutable order identifier from your upstream system. This field was created to allow you to tieback records in ShipBob with your upstream system. \\n\\n * Ensure that the <em> shipping method </em> passed in the API request matches exactly what the user has listed as the <em> shipping method </em> on the <em>  Ship Option Mapping </em> setup page in the ShipBob Merchant Portal. If they don't match, ShipBob will assume that the user wants to leverage ShipBob's default shipping method. \\n\\n * You can leverage either productId (the ShipBob productId) or the product referenceId (your system's  unique Identifier for products) when creating an order. \\n\\n Use the Shipments endpoints to retrieve fulfillment information for shipments or orders. \\n\\n A shipment is an object that is the result of a fulfillment of an order. An order can have one or more shipments. Say Shopify order #122323 contains 3 different products, shipped in two separate packages, there would be 2 shipments for that order. \\n\\n  Serial numbers are unique identifiers for an individual item (e.g. your specific iPhone X that you bought at the Apple Store). No inventory item can possess duplicate serial numbers. Merchants can request \"serial scan\", which means ShipBob will capture the serial number(s) upon sending a shipment so the merchant knows which customer received which individual item(s).",
      "name": "Orders"
    },
    {
      "description": "Use the Products Resource to retrieve and create product records in ShipBob. \\n\\n A product is a virtual record created in ShipBob's system via a channel. Say a merchant has two Shopify stores (each store would have its own channel), Kevin's Shopify Store #133 and Kevin's Shopify store #134. If the same SKU was sold on both stores, two products would be created for that SKU, one product would be created to represent the SKU sold on Store #133 and one to represent it on Store on #134, with productIds 3884009 and 3884008 respectively. \\n\\n While a product is a virtual record, the inventory item is a representation of a physical good. So in the above example, as product 3884009 and product 3884008 represent the same SKU sold on different channels, the same inventory item will be mapped to both products. Every product will have one or more inventory items mapped to it. Bundle products, a set of products that are sold to consumers as one combined package, think gift or multi packs, may have 2 or more inventory items mapped to them. \\n\\n ### Tips for creating products in ShipBob via the POST Product endpoints: \\n\\n * ShipBob needs products to be created at the lowest level. So if a product has 3 variants, small, medium and large, a separate product needs to be created in ShipBob for all three.\\n\\n * Populate the referenceId with a unique and immutable product identifier from your upstream system. This field was created to allow you to tie back records in ShipBob with your upstream system. \\n\\n * Use specific and/or unique names to describe each product so they can be easily identified by users in the ShipBob Merchant Portal. In particular, when creating variants, please give them distinguishable names i.e. for a Blue shirt that comes in two sizes, small and medium, strong product names would be Blue shirt size:small and Blue shirt size:medium. \\n\\n > **NOTE:** The productId returned in the API response will not match the id displayed in the ShipBob Merchant Portal when you navigate to Inventory > Products. ShipBob is currently undergoing a schema migration and the Id displayed in the ShipBob Merchant Portal is the inventoryId not the productId. In the future, the portal will display both productId(s) and inventoryId(s)",
      "name": "Products"
    },
    {
      "description": " Use the Inventory Resource to retrieve ShipBob  inventory items and quantities. \\n\\n An inventory item is a representation of a physical good, that may or may not have physical stock in ShipBob's fulfillment centers. Every product will have one or more inventory items mapped to it. A bundle product (a set of products that are sold as one combined package - e.g.  gift or multi packs) is an example of a product that has  2 or more inventory items mapped to it. \\n\\n Lot items are physical items that have expiration dates or batch numbers that should be fulfilled in a FIFO (first in, first out) manner. Most food items are lot items. Quantities by lot # and/or expiration date are also listed in the Inventory object.",
      "name": "Inventory"
    },
    {
      "description": "Use the Channel Resource to list \"channels\" which you have access to. You will use this channelId for subsequent API calls made to ShipBob endpoints. \\n\\n A channel is a specific installation of an application built by a vendor on top of our API - e.g. Kevin's Shopify Store #133432.  All write and most read endpoints require a channel to be passed in the header to complete the request. The channel is used to Identify where the data originally came from.  \\n\\n Applications that are granted multi-channel permissions will be able to read data from all channels that belong to a user. However, multi-channel applications will only be able to write on behalf of their own channel.",
      "name": "Channels"
    },
    {
      "description": "**While the Returns API is live, ShipBob's end to end Returns process will not go live until the beginning of March. As a result, any returns arriving at ShipBob's fulfillment centers prior to March 12st, 2020 will NOT be processed**. \\n\\n Use the Returns resource to retrieve, create, edit and cancel return records in ShipBob. \\n\\n A return is a request for ShipBob to perform an action on inventory that is coming back into our fulfillment centers. Typically, the return is a result of an order being requested to be refunded or exchanged. ShipBob does not handle refunds or exchanges - we simply process the inventory according to the merchant specifications. \\n\\n Returns can only be **modified** or **cancelled** when they are in the Awaiting Arrival status. Returns that are being Processed or have been Completed cannot be modified or cancelled. \\n\\n ### Tips for creating return orders: \\n\\n * Populate the referenceId with a unique and immutable return identifier from your upstream system. This field was created to allow you to tie back records in ShipBob with your upstream system. \\n\\n *Include each inventoryId exactly once in the inventory object. If an inventoryId is included more than once, the call will return an error code \\n\\n * Provide a tracking # when submitting a return, while it is not a required field, it is the the most surefire way for ShipBob staff to properly and quickly identify the return package when it reaches our fulfillment center. \\n\\n * Only include inventory items to the return record that will be returned in the same box i.e. if InventoryId 12232 and InventoryId 12039 will be returned in two seperate boxes, two return orders should be created. \\n\\n * ShipBob does not process returns for digital items or bundle inventory items. Return calls that include digital inventory  items (e.g. ebooks) or bundle inventory items (i.e. multipacks, combination of multiple inventory items)  will return an error code. \\n\\n * If you choose to provide a requested action (it is an optional field), only provide one requested action per inventory item. So if  you have more than 1 quantity of a given item being returned within the same box, all quantities of the item have to have the same action associated with them. If you don't provide a requested action, it will default to the action the User set for that inventory item in the ShipBob Merchant portal.",
      "name": "Returns"
    },
    {
      "description": "Use the Receiving Resource to retrieve, create and cancel Warehouse Receiving Orders (WROs). \\n\\n A WRO is a request form that tells ShipBob's fulfillment centers what inventory should be received and stocked. Some other solutions call this an \"ASN\" or Advanced Ship Notice. WROs may include multiple inventory items with specific quantities. More details on creating a WRO can be found [here](https://support.shipbob.com/s/article/New-Send-Inventory-to-ShipBob-WRO). \\n\\n A WRO can only be **canceled** if it is in the Awaiting status. WROs in Awaiting status are considered to still be in transit to ShipBob FCs. WROs that have Partially Arrived, have been Processed or are Completed, cannot be canceled.",
      "name": "Receiving"
    },
    {
      "description": "Use the Webhooks Resource to create, view or delete subscriptions for a user.",
      "name": "Webhooks"
    },
    {
      "description": "Use this API to interact with the physical locations across ShipBob's fulfillment network. \\n\\n An active ShipBob location is operational for fulfillment processes, including receiving inventory and processing returns. It's important to note that some locations, access is granted to all merchants by default, while some locations require special request for merchants to be granted access. \\n\\n For each location, determine if it can be leveraged for the user by viewing the access_granted & receiving_enabled fields.",
      "name": "Locations"
    }
  ]
}