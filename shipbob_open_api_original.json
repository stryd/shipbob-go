{
  "openapi": "3.0.1",
  "info": {
    "title": "ShipBob Developer API",
    "description": "ShipBob Developer API Documentation",
    "version": "1.0"
  },
  "paths": {
    "/1.0/channel": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get user-authorized channel info",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Channels.Api.ViewModels.ChannelViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "HasChannelIdPermissions"
            ]
          }
        ]
      }
    },
    "/1.0/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get an inventory item",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "The inventory id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.InventoryViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "inventory_read"
            ]
          }
        ]
      }
    },
    "/1.0/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "List inventory items",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Page of inventory items to get",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Amount of inventory items per page to request",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "description": "Whether the inventory should be active or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDigital",
            "in": "query",
            "description": "Whether the inventory is digital or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IDs",
            "in": "query",
            "description": "Comma separated inventory ids to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "description": "Sort will default to ascending order for each field. \r\nTo sort in descending order please pass a \"-\" in front of the field name. \r\nFor example, Sort=-onHand,name will sort by onHand descending",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "description": "Search is available for 2 fields, Inventory ID and Name -\r\n1. Expected behavior for search by Inventory ID is exact match\r\n2. Expected behavior for search by Inventory Name is partial match, i.e. does not have to be start of word, \r\nbut must be consecutive characters. This is not case sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LocationType",
            "in": "query",
            "description": "LocationType is valid for hub, spoke, or lts.\r\nLocationType will default to all locations.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.InventoryViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "inventory_read"
            ]
          }
        ]
      }
    },
    "/1.0/product/{productId}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get a list of inventory items by product id",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The product id to get inventory for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.InventoryViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "inventory_read"
            ]
          }
        ]
      }
    },
    "/1.0/order/estimate": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Estimate Fulfillment Cost For Order",
        "description": "This endpoint will provide, where possible, an estimate of pricing and fulfillment center assignment of a potential standard (direct to consumer) order. \r\nKeep in mind that there are ways for the merchant to change FC assignment or product configuration after order creation that could invalidate this estimate. \r\nEstimates cannot be returned for items that are unknown, out of stock, or too large for fulfillment using standard box sizes. \r\nAdditional services such as high-pick fees, shipping insurance, auto-splitting or auto-adding items to orders, and signature required are not included in this estimate.",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.EstimateFulfillmentRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.EstimateFulfillmentRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.EstimateFulfillmentRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.EstimateFulfillmentRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.EstimateViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.OrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ]
      }
    },
    "/1.0/order": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Orders",
        "description": "All parameters are AND filters",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Page of orders to get",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Amount of orders per page to request",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IDs",
            "in": "query",
            "description": "order ids to filter by, comma separated",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ReferenceIds",
            "in": "query",
            "description": "Reference ids to filter by, comma separated",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date to filter orders inserted later than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date to filter orders inserted earlier than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "SortOrder",
            "in": "query",
            "description": "Order to sort results in",
            "schema": {
              "enum": [
                "Newest",
                "Oldest"
              ],
              "type": "string"
            }
          },
          {
            "name": "HasTracking",
            "in": "query",
            "description": "Has any portion of this order been assigned a tracking number",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "LastUpdateStartDate",
            "in": "query",
            "description": "Start date to filter orders updated later than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "LastUpdateEndDate",
            "in": "query",
            "description": "End date to filter orders updated later than",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "IsTrackingUploaded",
            "in": "query",
            "description": "Filter orders that their tracking information was fully uploaded",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "LastTrackingUpdateStartDate",
            "in": "query",
            "description": "Start date to filter orders with tracking updates later than the supplied date. Will only return orders that have tracking information",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "LastTrackingUpdateEndDate",
            "in": "query",
            "description": "End date to filter orders updated later than the supplied date. Will only return orders that have tracking information",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "DeliveryStartDate",
            "in": "query",
            "description": "Start date to filter orders with delivery date later than the supplied date. Will only return orders that have tracking information",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "DeliveryEndDate",
            "in": "query",
            "description": "End date to filter orders delivery date later than the supplied date. Will only return orders that have tracking information",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "FulfillmentStartDate",
            "in": "query",
            "description": "Start date to filter orders with fulfillment date later than the supplied date. Will only return orders that have tracking information",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "FulfillmentEndDate",
            "in": "query",
            "description": "End date to filter orders fulfillment date  later than the supplied date. Will only return orders that have tracking information",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.OrderViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Order",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CreateOrderModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CreateOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CreateOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CreateOrderModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.OrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_write"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/cancel": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel single Order by Order ID",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel ID for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CanceledOrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_write"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/storeOrderJson": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order Store Json",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to Get the JSON Stored",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Save the Store Order Json",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to Store",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddStoreOrderJsonModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddStoreOrderJsonModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddStoreOrderJsonModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddStoreOrderJsonModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_write"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/shipment/{shipmentId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get one Shipment by Order Id and Shipment Id",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id to get the shipment for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/shipment/{shipmentId}/cancel": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel one Shipment by Order Id and Shipment Id",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_cancel"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/shipment/{shipmentId}/timeline": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get one Shipment's status timeline by Order Id and Shipment Id",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id to get the shipment for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentLogViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/shipment": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all Shipments for Order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id to get shipments for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/order/{orderId}/shipment/{shipmentId}/logs": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get logs for one Shipment by Order Id and Shipment Id",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id to get the shipment for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentLogViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/shipment/{shipmentId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get one Shipment by Shipment Id",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/shipment/{shipmentId}/cancel": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel one Shipment by Shipment Id",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_cancel"
            ]
          }
        ]
      }
    },
    "/1.0/shipment/cancelbulk": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel multiple Shipments by Shipment Id",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel ID for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CancelShipmentsModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CancelShipmentsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CancelShipmentsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.CancelShipmentsModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CanceledShipmentsViewModel"
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_write"
            ]
          }
        ]
      }
    },
    "/1.0/shipment/{shipmentId}/timeline": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get one Shipment's status timeline by Shipment Id",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentLogViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/shipment/{shipmentId}/logs": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get logs for one Shipment by Shipment Id",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "description": "The shipment id to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentLogViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "fulfillments_read"
            ]
          }
        ]
      }
    },
    "/1.0/shippingmethod": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get shipping methods",
        "description": "Get all merchants shipping methods",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Page of orders to get",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Amount of records per page to request",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipMethodDetailViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "orders_read"
            ]
          }
        ]
      }
    },
    "/1.0/product": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get multiple products",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Page of products to get\r\n- Valid Range is 0 to integer max with a default of 1",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Amount of products per page to request\r\n- Valid Range is 1 to 250 with a default of 50",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IDs",
            "in": "query",
            "description": "Comma separated list of product ids to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ReferenceIds",
            "in": "query",
            "description": "Comma separated list of reference ids to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Search",
            "in": "query",
            "description": "Search is available for 2 fields of the inventory record related to the product: Inventory ID and Name -\r\n1. Expected behavior for search by Inventory ID is exact match\r\n2. Expected behavior for search by Inventory Name is partial match, i.e. does not have to be start of word, \r\nbut must be consecutive characters. This is not case sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ActiveStatus",
            "in": "query",
            "description": "Status filter for products:\r\n- Any: Include both active and inactive\r\n- Active: Filter products that are Active\r\n- Inactive: Filter products that are Inactive",
            "schema": {
              "$ref": "#/components/schemas/Shipbob.Products.Common.Models.ProductActiveStatus"
            }
          },
          {
            "name": "BundleStatus",
            "in": "query",
            "description": "Bundle filter for products:\r\n- Any: Don't filter and consider products that are bundles or not bundles\r\n- Bundle: Filter by products that are bundles\r\n- NotBundle: Filter by products that are not bundles",
            "schema": {
              "$ref": "#/components/schemas/Shipbob.Products.Common.Models.ProductBundleStatus"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "type": "int",
                  "description": "Number of the current page",
                  "format": ""
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "type": "int",
                  "description": "Total number of pages of results",
                  "format": ""
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "type": "int",
                  "description": "Total number of results",
                  "format": ""
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "type": "int",
                  "description": "Number of results per page",
                  "format": ""
                }
              },
              "Next-Page": {
                "description": "The href of the next page of results, if there is a next page",
                "schema": {
                  "type": "string",
                  "description": "The href of the next page of results, if there is a next page",
                  "format": ""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.ProductViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsRead"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add a single product to the store",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The product to add",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.ProductViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsWrite"
            ]
          }
        ]
      }
    },
    "/1.0/product/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a single product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique identifier of the product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.ProductViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsRead"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Modify a single product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique identifier of the product to modify",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Updated fields to the product",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.UpdateProductModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.UpdateProductModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.UpdateProductModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.UpdateProductModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.ProductViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsWrite"
            ]
          }
        ]
      }
    },
    "/1.0/product/batch": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add multiple products to the store",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of up to 50 products to add",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "maxItems": 50,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Shipbob.Products.Api.Models.Public.CreateProductModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.ProductViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ProductsWrite"
            ]
          }
        ]
      }
    },
    "/1.0/fulfillmentCenter": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get Fulfillment Centers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.FulfillmentCenterViewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      }
    },
    "/2.0/receiving/{id}": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get Warehouse Receiving Order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the receiving order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.V2.WarehouseReceivingOrderViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      }
    },
    "/2.0/receiving": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get Multiple Warehouse Receiving Orders",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Page of WROs to get",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Number of WROs per page to request",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IDs",
            "in": "query",
            "description": "Comma separated list of WRO IDs to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Statuses",
            "in": "query",
            "description": "Comma separated list of WRO statuses to filter by",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.ReceivingStatus"
              }
            }
          },
          {
            "name": "InsertStartDate",
            "in": "query",
            "description": "Earliest date that a WRO was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "InsertEndDate",
            "in": "query",
            "description": "Latest date that a WRO was created",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "FulfillmentCenterIds",
            "in": "query",
            "description": "Comma separated list of WRO fulfillment center IDs to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "PurchaseOrderNumbers",
            "in": "query",
            "description": "Comma separated list of WRO PO numbers to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "type": "int"
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "type": "int"
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "type": "int"
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "type": "int"
                }
              },
              "Next-Page": {
                "description": "The href of the next page of results, if there is a next page",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.V2.WarehouseReceivingOrderViewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Receiving"
        ],
        "summary": "Create Warehouse Receiving Order",
        "requestBody": {
          "description": "The receiving order to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.V2.WarehouseReceivingOrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_write"
            ]
          }
        ]
      }
    },
    "/2.0/receiving/{id}/labels": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get Warehouse Receiving Order Box Labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the receiving order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/pdf": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/pdf": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      }
    },
    "/2.0/receiving/{id}/cancel": {
      "post": {
        "tags": [
          "Receiving"
        ],
        "summary": "Cancel Warehouse Receiving Order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the receiving order to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.V2.WarehouseReceivingOrderViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_write"
            ]
          }
        ]
      }
    },
    "/1.0/receiving/{id}": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get Warehouse Receiving Order (DEPRECATED)",
        "description": "This endpoint is deprecated. Please use /2.0/receiving/{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the receiving order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.ReceivingOrderViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      }
    },
    "/1.0/receiving": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get a Warehouse Receiving Order by Purchase Order Number (DEPRECATED)",
        "description": "This endpoint is deprecated. Please use /2.0/receiving?purchaseorderNumber={value}",
        "parameters": [
          {
            "name": "purchaseOrderNumber",
            "in": "query",
            "description": "Purchase order number of the receiving order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.ReceivingOrderViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Receiving"
        ],
        "summary": "Create Warehouse Receiving Order (DEPRECATED)",
        "description": "This endpoint is deprecated. Please use /2.0/receiving",
        "requestBody": {
          "description": "The receiving order to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.ReceivingOrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_write"
            ]
          }
        ]
      }
    },
    "/1.0/receiving/{id}/labels": {
      "get": {
        "tags": [
          "Receiving"
        ],
        "summary": "Get Warehouse Receiving Order Box Labels (DEPRECATED)",
        "description": "This endpoint is deprecated. Please use /2.0/receiving/{id}/labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the receiving order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/pdf": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/pdf": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_read"
            ]
          }
        ]
      }
    },
    "/1.0/receiving/{id}/cancel": {
      "post": {
        "tags": [
          "Receiving"
        ],
        "summary": "Cancel Warehouse Receiving Order (DEPRECATED)",
        "description": "This endpoint is deprecated. Please use /2.0/receiving/{id}/cancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the receiving order to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "receiving_write"
            ]
          }
        ]
      }
    },
    "/1.0/return/{id}": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get Return Order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the return order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnOrderViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Returns"
        ],
        "summary": "Modify Return Order",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the return order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Model defining the return",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnOrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_write"
            ]
          }
        ]
      }
    },
    "/1.0/return": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get Return Orders",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Page of return orders to get",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Amount of return orders per page to request",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortOrder",
            "in": "query",
            "description": "Order to sort results by",
            "schema": {
              "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.SortOrder"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start date to filter orders inserted later than",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End date to filter orders inserted earlier than",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "IDs",
            "in": "query",
            "description": "Comma separated list of return orders ids to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ReferenceIds",
            "in": "query",
            "description": "Comma separated list of reference ids to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Status",
            "in": "query",
            "description": "Comma separated list of statuses to filter by",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnStatus"
              }
            }
          },
          {
            "name": "FulfillmentCenterIds",
            "in": "query",
            "description": "Comma separated list of destination fulfillment center IDs to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "TrackingNumbers",
            "in": "query",
            "description": "Comma separated list of tracking numbers to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OriginalShipmentIds",
            "in": "query",
            "description": "Comma separated list of original shipment IDs to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "InventoryIds",
            "in": "query",
            "description": "Comma separated list of inventory IDs contained in return to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "type": "int",
                  "description": "Number of the current page",
                  "format": ""
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "type": "int",
                  "description": "Total number of pages of results",
                  "format": ""
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "type": "int",
                  "description": "Total number of results",
                  "format": ""
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "type": "int",
                  "description": "Number of results per page",
                  "format": ""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnOrderViewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Create Return Order",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Model defining the return",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnOrderViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_write"
            ]
          }
        ]
      }
    },
    "/1.0/return/{id}/cancel": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Cancel Return Order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the return order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnOrderViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_write"
            ]
          }
        ]
      }
    },
    "/1.0/return/{id}/statushistory": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get One Return's status history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the return order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "Channel Id for Operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnOrderStatusHistoryViewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "returns_read"
            ]
          }
        ]
      }
    },
    "/1.0/webhook": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhooks",
        "description": "All parameters are AND filters",
        "parameters": [
          {
            "name": "Topic",
            "in": "query",
            "description": "Topic of the webhooks requested",
            "schema": {
              "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Common.Topics"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page of Webhooks to get",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Page of Webhooks to get",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "Amount of Webhooks per page to request",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "description": "Amount of Webhooks per page to request",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Page-Number": {
                "description": "Number of the current page",
                "schema": {
                  "type": "int",
                  "description": "Number of the current page",
                  "format": ""
                }
              },
              "Total-Pages": {
                "description": "Total number of pages of results",
                "schema": {
                  "type": "int",
                  "description": "Total number of pages of results",
                  "format": ""
                }
              },
              "Total-Count": {
                "description": "Total number of results",
                "schema": {
                  "type": "int",
                  "description": "Total number of results",
                  "format": ""
                }
              },
              "Page-Size": {
                "description": "Number of results per page",
                "schema": {
                  "type": "int",
                  "description": "Number of results per page",
                  "format": ""
                }
              },
              "Next-Page": {
                "description": "The href of the next page of results, if there is a next page",
                "schema": {
                  "type": "string",
                  "description": "The href of the next page of results, if there is a next page",
                  "format": ""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Api.Models.WebhookViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a new webhook subscription",
        "parameters": [
          {
            "name": "shipbob_channel_id",
            "in": "header",
            "description": "",
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Api.Models.CreateWebhookSubscriptionModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Api.Models.CreateWebhookSubscriptionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Api.Models.CreateWebhookSubscriptionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Api.Models.CreateWebhookSubscriptionModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Api.Models.WebhookViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/1.0/webhook/{id}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete an existing webhook subscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "No access right at this time"
          },
          "403": {
            "description": "No access"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/1.0/location": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get locations",
        "parameters": [
          {
            "name": "IncludeInactive",
            "in": "query",
            "description": "Whether the inactive locations should be included or not",
            "schema": {
              "type": "boolean",
              "description": "Whether the inactive locations should be included or not",
              "nullable": true
            }
          },
          {
            "name": "ReceivingEnabled",
            "in": "query",
            "description": "Return all the receiving enabled locations",
            "schema": {
              "type": "boolean",
              "description": "Return all the receiving enabled locations",
              "nullable": true
            }
          },
          {
            "name": "AccessGranted",
            "in": "query",
            "description": "Return all the access granted locations",
            "schema": {
              "type": "boolean",
              "description": "Return all the access granted locations",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.InternalLocationViewModel"
                      },
                      {
                        "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.InternalLocationViewModelV2"
                      },
                      {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.InternalLocationViewModelV2"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization missing or invalid"
          },
          "403": {
            "description": "The provided credentials are not authorized to access this resource"
          }
        },
        "security": [
          {
            "oauth2": [
              "locations_read"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ShipBob.Channels.Api.ViewModels.ChannelViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the channel",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel",
            "nullable": true
          },
          "application_name": {
            "type": "string",
            "description": "Name of the application that owns the channel",
            "nullable": true,
            "example": "Api"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of permissions granted for the channel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "$type": {
            "type": "string"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "required": [
          "$type"
        ],
        "discriminator": {
          "propertyName": "$type"
        }
      },
      "Shipbob.Inventory.Api.ViewModels.DimensionViewModel": {
        "type": "object",
        "properties": {
          "weight": {
            "type": "number",
            "description": "Weight in ounces of this inventory item",
            "format": "double"
          },
          "length": {
            "type": "number",
            "description": "Length in inches of this inventory item",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width in inches of this inventory item",
            "format": "double"
          },
          "depth": {
            "type": "number",
            "description": "Depth in inches of this inventory item",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Information about an inventory item's dimensions"
      },
      "Shipbob.Inventory.Api.ViewModels.FulfillmentCenterQuantityViewModel": {
        "type": "object",
        "properties": {
          "fulfillmentCenterId": {
            "type": "integer",
            "description": "Unique id of the fulfillment center",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the fulfillment center",
            "nullable": true,
            "example": "Cicero"
          },
          "fulfillableQuantity": {
            "type": "integer",
            "description": "Amount of fulfillable quantity at this fulfillment center",
            "format": "int32"
          },
          "onHandQuantity": {
            "type": "integer",
            "description": "Amount of onhand quantity at this fulfillment center",
            "format": "int32"
          },
          "committedQuantity": {
            "type": "integer",
            "description": "Amount of committed quantity at this fulfillment center",
            "format": "int32"
          },
          "awaitingQuantity": {
            "type": "integer",
            "description": "Amount of quantity awaiting arrival of a receiving order at this fulfillment center",
            "format": "int32"
          },
          "internalTransferQuantity": {
            "type": "integer",
            "description": "The quantity of items that are in the process of internal transit \r\nbetween ShipBob fulfillment centers, with a destination of this fulfillment center.\r\nThese items are not pickable or fulfillable until they have been received and moved \r\nto the \"On Hand\" quantity of the destination FC.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Break down of fulfillable quantity by fulfillment center"
      },
      "Shipbob.Inventory.Api.ViewModels.InventoryViewModel": {
        "type": "object",
        "properties": {
          "inventoryId": {
            "type": "integer",
            "description": "Unique id of the inventory item",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the inventory item",
            "nullable": true,
            "example": "Medium Blue T-Shirt"
          },
          "isDigital": {
            "type": "boolean",
            "description": "True if the inventory item is marked as a digital item"
          },
          "isCasePick": {
            "type": "boolean",
            "description": "True if the inventory item is marked as case pick"
          },
          "isLot": {
            "type": "boolean",
            "description": "True if this inventory item is organized into lots"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.DimensionViewModel"
          },
          "totalFulfillableQuantity": {
            "type": "integer",
            "description": "Total fulfillable quantity of this inventory item",
            "format": "int32"
          },
          "totalOnHandQuantity": {
            "type": "integer",
            "description": "Total onhand quantity of this inventory item",
            "format": "int32"
          },
          "totalCommitedQuantity": {
            "type": "integer",
            "description": "Total committed quantity of this inventory item",
            "format": "int32"
          },
          "totalSellableQuantity": {
            "type": "integer",
            "description": "Total quantity that can be sold without overselling the inventory item.\r\nThis is calculated by subtracting the total exception quantity from the\r\nfulfillable quantity.",
            "format": "int32"
          },
          "totalAwaitingQuantity": {
            "type": "integer",
            "description": "Total quantity in unreceived receiving orders for this inventory item",
            "format": "int32"
          },
          "totalExceptionQuantity": {
            "type": "integer",
            "description": "The total quantity of all items that are contained within orders that\r\nare in exception/out of stock status. Out of stock orders have not been\r\nprocessed and therefore do not have lot or fulfillment centers assigned.",
            "format": "int32"
          },
          "totalInternalTransferQuantity": {
            "type": "integer",
            "description": "The total quantity of all items that are in the process of internal transit \r\nbetween ShipBob fulfillment centers. These items are not pickable or fulfillable\r\nuntil they have been received and moved to the \"On Hand\" quantity of the destination FC.\r\nInternal transit quantities for each FC represent the incoming transfer stock\r\nfor that specific location.",
            "format": "int32"
          },
          "totalBackorderedQuantity": {
            "type": "integer",
            "description": "The amount of the item you need to send to ShipBob to fulfill all exception orders containing \r\nthe item. This is the exception_quantity less the fulfillable_quantity of the item.",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the inventory is active or not"
          },
          "fulfillableQuantityByFulfillmentCenter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.FulfillmentCenterQuantityViewModel"
            },
            "description": "Fulfillable quantity of this inventory item broken down by fulfillment center location",
            "nullable": true
          },
          "fulfillableQuantityByLot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.LotQuantityViewModel"
            },
            "description": "Fulfillable quantity of this inventory item broken down by lot",
            "nullable": true
          },
          "packagingAttribute": {
            "$ref": "#/components/schemas/Shipbob.Inventory.Domain.Models.PackagingAttribute"
          }
        },
        "additionalProperties": false,
        "description": "Information about an inventory item"
      },
      "Shipbob.Inventory.Api.ViewModels.LotQuantityViewModel": {
        "type": "object",
        "properties": {
          "lotNumber": {
            "type": "string",
            "description": "Identification number of this lot",
            "nullable": true,
            "example": "1234"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date for this lot",
            "format": "date-time",
            "nullable": true
          },
          "fulfillableQuantity": {
            "type": "integer",
            "description": "Fulfillable quantity of inventory items belonging to this lot",
            "format": "int32"
          },
          "onHandQuantity": {
            "type": "integer",
            "description": "OnHand quantity of inventory items belonging to this lot",
            "format": "int32"
          },
          "committedQuantity": {
            "type": "integer",
            "description": "Committed quantity of inventory items belonging to this lot",
            "format": "int32"
          },
          "awaitingQuantity": {
            "type": "integer",
            "description": "Quantity of inventory items belonging to this lot awaiting arrival of a receiving order",
            "format": "int32"
          },
          "internalTransferQuantity": {
            "type": "integer",
            "description": "The quantity of all items belonging to this lot that are in the process of internal transit \r\nbetween ShipBob fulfillment centers. These items are not pickable or fulfillable\r\nuntil they have been received and moved to the \"On Hand\" quantity of the destination FC.\r\nInternal transit quantities for each FC represent the incoming transfer stock\r\nfor that specific location.",
            "format": "int32"
          },
          "fulfillableQuantityByFulfillmentCenter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Inventory.Api.ViewModels.FulfillmentCenterQuantityViewModel"
            },
            "description": "Fulfillable quantity of inventory items belonging to this lot broken down by fulfillment center location",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Break down of fulfillable quantity by lot"
      },
      "Shipbob.Inventory.Domain.Models.PackagingAttribute": {
        "enum": [
          "None",
          "Fragile",
          "Foldable",
          "Stackable",
          "Book",
          "CustomPackaging",
          "CustomDunnage",
          "MarketingInsert",
          "Poster"
        ],
        "type": "integer",
        "format": "int32"
      },
      "ShipBob.Orders.Presentation.ViewModels.EstimationAddressViewModel": {
        "required": [
          "country"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "description": "First line of the address",
            "example": "100 Nowhere Blvd"
          },
          "address2": {
            "type": "string",
            "description": "Second line of the address",
            "example": "Suite 100"
          },
          "company_name": {
            "type": "string",
            "description": "Name of the company receiving the shipment",
            "example": "Wayne Enterprises"
          },
          "city": {
            "type": "string",
            "description": "The city",
            "example": "Gotham City"
          },
          "state": {
            "type": "string",
            "description": "The state or province",
            "example": "NJ"
          },
          "country": {
            "type": "string",
            "description": "The country (Must be ISO Alpha-2 for estimates)",
            "example": "US"
          },
          "zip_code": {
            "type": "string",
            "description": "The zip code or postal code",
            "example": "07093"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.Models.EstimateProductInfoModel": {
        "required": [
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the product (Must be provided if reference_id is unknown)",
            "format": "int32",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "Unique reference id of the product (Must be provided if ID is unknown)",
            "example": "TShirtBlueM"
          },
          "quantity": {
            "maximum": 199,
            "minimum": 1,
            "type": "integer",
            "description": "The quantity of this product ordered",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.Models.EstimateFulfillmentRequestModel": {
        "required": [
          "address",
          "products"
        ],
        "type": "object",
        "properties": {
          "shipping_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of strings specifying shipping methods for which to fetch estimates.\r\n\r\nIf this field is omitted we will return estimates for all shipping methods defined in ShipBob"
          },
          "address": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.EstimationAddressViewModel"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.EstimateProductInfoModel"
            },
            "description": "Products to be included in the order. Each product must include one of reference_id or id"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.FulfillmentCenterViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the fulfillment center",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the fulfillment center",
            "example": "Cicero (IL)"
          }
        },
        "additionalProperties": false,
        "description": "Information about a fulfillment center that a shipment can belong to"
      },
      "ShipBob.Orders.Presentation.ViewModels.EstimateDetailViewModel": {
        "type": "object",
        "properties": {
          "fulfillment_center": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.FulfillmentCenterViewModel"
          },
          "shipping_method": {
            "type": "string",
            "description": "Provided shipping method. Maps to ship option in ShipBob."
          },
          "estimated_price": {
            "type": "number",
            "description": "Estimated price in dollars for the provided shipping method",
            "format": "double"
          },
          "estimated_currency_code": {
            "type": "string",
            "description": "Estimated local currency code"
          },
          "total_weight_oz": {
            "type": "number",
            "description": "Total weight of items in cart including packaging.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.EstimateViewModel": {
        "type": "object",
        "properties": {
          "estimates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.EstimateDetailViewModel"
            },
            "description": "Array of estimates for each shipping method"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.ChannelInfoViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the channel",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel",
            "example": "ShipBobs-Shopify-Store"
          }
        },
        "additionalProperties": false,
        "description": "Created by channel metadata"
      },
      "ShipBob.Orders.Presentation.ViewModels.RetailerProgramDataAddressViewModel": {
        "required": [
          "address1",
          "city",
          "country",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "MarkFor",
              "ShipFrom"
            ],
            "type": "string",
            "description": "Specifies the type of address:\r\nShipFrom\r\nMarkFor"
          },
          "address1": {
            "type": "string",
            "description": "First line of the address",
            "example": "100 Nowhere Blvd"
          },
          "address2": {
            "type": "string",
            "description": "Second line of the address",
            "example": "Suite 100"
          },
          "company_name": {
            "type": "string",
            "description": "Name of the company receiving the shipment",
            "example": "Wayne Enterprises"
          },
          "city": {
            "type": "string",
            "description": "The city",
            "example": "Gotham City"
          },
          "state": {
            "type": "string",
            "description": "The state or province",
            "example": "NJ"
          },
          "country": {
            "type": "string",
            "description": "The country (Must be ISO Alpha-2 for estimates)",
            "example": "US"
          },
          "zip_code": {
            "type": "string",
            "description": "The zip code or postal code",
            "example": "07093"
          }
        },
        "additionalProperties": false,
        "description": "Address to used when creating a B2B/DropShip order."
      },
      "ShipBob.Orders.Presentation.ViewModels.AddressViewModel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RetailerProgramDataAddressViewModel"
          }
        ]
      },
      "ShipBob.Orders.Presentation.ViewModels.RecipientInfoViewModel": {
        "required": [
          "address",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the recipient",
            "example": "John Doe"
          },
          "address": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.AddressViewModel"
          },
          "email": {
            "type": "string",
            "description": "Email address of the recipient",
            "example": "john@example.com"
          },
          "phone_number": {
            "maxLength": 50,
            "type": "string",
            "description": "Phone number of the recipient",
            "example": "555-555-5555"
          }
        },
        "additionalProperties": false,
        "description": "Information about the recipient of an order"
      },
      "ShipBob.Orders.Presentation.ViewModels.ProductInfoViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the product",
            "format": "int32",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "Unique reference id of the product",
            "example": "TShirtBlueM"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of this product ordered",
            "format": "int32"
          },
          "quantity_unit_of_measure_code": {
            "type": "string",
            "description": "Defined standard for measure for an item (each, inner pack, case, pallet).  Values: EA, INP, CS and PL"
          },
          "sku": {
            "type": "string",
            "description": "Stock keeping unit for the product",
            "example": "TShirtBlueM"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number - unique and internationally recognized identifier assigned to item by company GS1"
          },
          "upc": {
            "type": "string",
            "description": "Universal Product Code - Unique external identifier"
          },
          "unit_price": {
            "type": "number",
            "description": "Price for one item",
            "format": "double",
            "nullable": true
          },
          "external_line_id": {
            "type": "integer",
            "description": "Numeric assignment per item. Used as a reference number for multiple purposes such as split orders, split containers, etc.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.TagViewModel": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The key of the tag",
            "example": "Handling instructions"
          },
          "value": {
            "maxLength": 500,
            "type": "string",
            "description": "The value of the tag",
            "example": "Fragile"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.RecipientViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the recipient",
            "example": "John Doe"
          },
          "address": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.AddressViewModel"
          },
          "email": {
            "type": "string",
            "description": "Email address of the recipient",
            "example": "john@example.com"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the recipient",
            "example": "555-555-5555"
          }
        },
        "additionalProperties": false,
        "description": "Information about the recipient of a shipment"
      },
      "ShipBob.Orders.Presentation.ViewModels.StatusDetailViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Short name of the status detail"
          },
          "description": {
            "type": "string",
            "description": "Describes what the status detail means"
          },
          "id": {
            "type": "integer",
            "description": "The id of the status detail",
            "format": "int32"
          },
          "inventory_id": {
            "type": "integer",
            "description": "Inventory Id the detail applies to (if applicable)",
            "format": "int32",
            "nullable": true
          },
          "exception_fulfillment_center_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.TrackingViewModel": {
        "type": "object",
        "properties": {
          "carrier": {
            "type": "string",
            "description": "Carrier of the shipment",
            "example": "USPS"
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking number of the shipment",
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC"
          },
          "carrier_service": {
            "type": "string",
            "description": "The carrier's service which was used for this shipment",
            "example": "Priority"
          },
          "tracking_url": {
            "type": "string",
            "description": "URL to the website where a shipment can be tracked",
            "example": "https://www.example.com/tracking?id=860C8CDC8F0B4FC7AB69AC86C20539EC"
          },
          "bol": {
            "type": "string",
            "description": "Bill of lading (BOL) number. Document acknowledging receipt of cargo for shipment."
          },
          "shipping_date": {
            "type": "string",
            "description": "Date freight was shipped on",
            "format": "date-time",
            "nullable": true
          },
          "pro_number": {
            "type": "string",
            "description": "Tracking number used for freight carriers"
          },
          "scac": {
            "type": "string",
            "description": "Standard Carrier Alpha Code (SCAC). Unique 2-4 letter code used to identify transportation companies."
          }
        },
        "additionalProperties": false,
        "description": "Tracking information for a shipment"
      },
      "ShipBob.Orders.Presentation.ViewModels.InventoryViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the inventory",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the inventory item",
            "example": "Medium Blue T-Shirt"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the inventory item to be included in the fulfillment",
            "format": "int32"
          },
          "quantity_committed": {
            "type": "integer",
            "description": "The quantity of the inventory item allocated from the assigned fulfillment center and committed to the order. If quantity committed is less than order quantity, then the inventory item is out of stock at the assigned fulfillment center.",
            "format": "int32"
          },
          "lot": {
            "type": "string",
            "description": "Lot number of the inventory",
            "example": "22222"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date of the inventory",
            "format": "date-time",
            "nullable": true
          },
          "serial_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Serial number of the inventory"
          },
          "is_dangerous_goods": {
            "type": "boolean",
            "description": "Is inventory Dangerous Good",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Information about inventory belonging to a store product"
      },
      "ShipBob.Orders.Presentation.ViewModels.ShipmentProductViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the product",
            "format": "int32"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique reference id of the product",
            "example": "TShirtBlueM"
          },
          "name": {
            "type": "string",
            "description": "Name of the product",
            "example": "Medium Blue T-Shirt"
          },
          "sku": {
            "type": "string",
            "description": "Stock keeping unit for the product",
            "example": "TShirtBlueM"
          },
          "inventory_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.InventoryViewModel"
            },
            "description": "Information about fulfillable inventory items belonging to this product"
          }
        },
        "additionalProperties": false,
        "description": "Information about a store product belonging to a shipment"
      },
      "ShipBob.Orders.Presentation.ViewModels.CartonMeasurementsViewModel": {
        "type": "object",
        "properties": {
          "total_weight_oz": {
            "type": "number",
            "description": "Total weight in ounces",
            "format": "double"
          },
          "length_in": {
            "type": "number",
            "description": "Total length in inches",
            "format": "double"
          },
          "width_in": {
            "type": "number",
            "description": "Total width in inches",
            "format": "double"
          },
          "depth_in": {
            "type": "number",
            "description": "Total depth in inches",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Measurements of a carton"
      },
      "ShipBob.Orders.Presentation.ViewModels.CartonDetailsViewModel": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentProductViewModel"
            },
            "description": "List of what is packed in this carton"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.CartonViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID assigned to this carton",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Type of this carton container",
            "example": "Box or pallet"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode assigned to this carton"
          },
          "measurements": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CartonMeasurementsViewModel"
          },
          "carton_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CartonDetailsViewModel"
            },
            "description": "Details about the contents of this carton"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.ParentCartonViewModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of this carton container",
            "example": "Box or pallet"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode assigned to this carton"
          },
          "measurements": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CartonMeasurementsViewModel"
          },
          "cartons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CartonViewModel"
            },
            "description": "Cartons packed inside this parent container"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.MeasurementsViewModel": {
        "type": "object",
        "properties": {
          "total_weight_oz": {
            "type": "integer",
            "description": "Total weight in ounces",
            "format": "int32"
          },
          "length_in": {
            "type": "integer",
            "description": "Total length in inches",
            "format": "int32"
          },
          "width_in": {
            "type": "integer",
            "description": "Total width in inches",
            "format": "int32"
          },
          "depth_in": {
            "type": "integer",
            "description": "Total depth in inches",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Measurements of a shipment"
      },
      "ShipBob.Orders.Presentation.ViewModels.InternalShipmentViewModel": {
        "type": "object",
        "properties": {
          "store_order_id": {
            "type": "string",
            "description": "Unique store order id of the shipment"
          },
          "id": {
            "type": "integer",
            "description": "Unique id of the shipment",
            "format": "int32"
          },
          "order_id": {
            "type": "integer",
            "description": "Id of the order this shipment belongs to",
            "format": "int32"
          },
          "reference_id": {
            "type": "string",
            "description": "Client-defined external unique id of the order this shipment belongs to"
          },
          "recipient": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RecipientViewModel"
          },
          "created_date": {
            "type": "string",
            "description": "Date this shipment was created",
            "format": "date-time"
          },
          "last_update_at": {
            "type": "string",
            "description": "Date this shipment was last updated",
            "format": "date-time",
            "nullable": true
          },
          "last_tracking_update_at": {
            "type": "string",
            "description": "Timestamp for the last time this shipment had a tracking update",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "enum": [
              "None",
              "Processing",
              "Pending",
              "Completed",
              "Exception",
              "OnHold",
              "Cancelled",
              "CleanSweeped",
              "LabeledCreated",
              "ImportReview"
            ],
            "type": "string",
            "description": "The shipment status"
          },
          "status_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.StatusDetailViewModel"
            },
            "description": "Additional details about the shipment status"
          },
          "location": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.FulfillmentCenterViewModel"
          },
          "invoice_amount": {
            "type": "number",
            "description": "Monetary amount that was invoiced for this shipment",
            "format": "double",
            "nullable": true
          },
          "invoice_currency_code": {
            "type": "string"
          },
          "insurance_value": {
            "type": "number",
            "description": "Monetary amount that this shipment was insured for",
            "format": "double",
            "nullable": true
          },
          "ship_option": {
            "type": "string",
            "description": "Name of the shipping option used for this shipment",
            "example": "Standard"
          },
          "package_material_type": {
            "enum": [
              "Unknown",
              "Box",
              "BubbleMailer",
              "PolyMailer",
              "FragileBox",
              "PosterTube",
              "Custom",
              "Bookfold",
              "OwnContainer",
              "Undefined"
            ],
            "type": "string",
            "description": "Container type for the shipment",
            "example": "Box"
          },
          "tracking": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.TrackingViewModel"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentProductViewModel"
            },
            "description": "Information about the products contained in this shipment"
          },
          "parent_cartons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ParentCartonViewModel"
            },
            "description": "Carton information for this shipment"
          },
          "measurements": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.MeasurementsViewModel"
          },
          "require_signature": {
            "type": "boolean",
            "description": "If a shipment requires signature"
          },
          "estimated_fulfillment_date": {
            "type": "string",
            "description": "The datetime of ShipBob\u2019s commitment for completing\r\nthe shipment and handing to the carrier for delivery.",
            "format": "date-time",
            "nullable": true
          },
          "actual_fulfillment_date": {
            "type": "string",
            "description": "The datetime of ShipBob\u2019s completion of the fulfillment operation as promised.\r\nCurrently, this means the shipment has been picked, packed, and label has been printed.",
            "format": "date-time",
            "nullable": true
          },
          "estimated_fulfillment_date_status": {
            "enum": [
              "AwaitingInventoryAllocation",
              "AwaitingReset",
              "Unavailable",
              "PendingOnTime",
              "FulfilledOnTime",
              "PendingLate",
              "FulfilledLate"
            ],
            "type": "string",
            "description": "Status of ShipBob\u2019s completion of the fulfillment operation."
          },
          "is_tracking_uploaded": {
            "type": "boolean",
            "description": "Indicates whether the Shipment was marked with tracking information\r\nuploaded to a third-party system where the order originated."
          },
          "gift_message": {
            "maxLength": 500,
            "type": "string",
            "description": "Gift message associated with the shipment"
          },
          "delivery_date": {
            "type": "string",
            "description": "The datetime of Shipment delivered to customer.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.InternalShipmentViewModel"
          }
        ],
        "description": "Information about a shipment"
      },
      "ShipBob.Orders.Presentation.ViewModels.ShippingTermsViewModel": {
        "type": "object",
        "properties": {
          "carrier_type": {
            "enum": [
              "Parcel",
              "Freight"
            ],
            "type": "string",
            "description": "Identifies whether to ship parcel or freight.\r\n            \r\nParcel: Smaller, light weight boxes.\r\n            \r\nFreight: Larger boxes, usually transported by truckload.",
            "nullable": true
          },
          "payment_term": {
            "enum": [
              "Collect",
              "ThirdParty",
              "Prepaid",
              "MerchantResponsible"
            ],
            "type": "string",
            "description": "Identifies the party responsible for shipping charges.\r\n            \r\nCollect: The person/entity receiving the product pays the shipping charges.\r\n            \r\nThirdParty: Another party pays for the shipping charges (not Shipbob) [parcel only].\r\n            \r\nPrepaid: The shipper pays the shipping charges (Shipbob or merchant).\r\n            \r\nMerchantResponsible: The merchant will be responsible for uploading shipping labels or booking freight transportation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains shipping properties that need to be used for fulfilling an order."
      },
      "ShipBob.Orders.Presentation.ViewModels.RetailerProgramDataViewModel": {
        "required": [
          "purchase_order_number",
          "retailer_program_type"
        ],
        "type": "object",
        "properties": {
          "purchase_order_number": {
            "type": "string",
            "description": "First initial documentation sent from buyer to seller with item(s) and quantities."
          },
          "retailer_program_type": {
            "type": "string",
            "description": "Identifies retailer-merchant combination",
            "example": "TGTDS"
          },
          "mark_for_store": {
            "type": "string",
            "description": "Store Number",
            "example": "TGT105"
          },
          "department": {
            "type": "string",
            "description": "Identifies a merchant's store department",
            "example": "245"
          },
          "delivery_date": {
            "type": "string",
            "description": "Expected delivery date",
            "format": "date-time",
            "nullable": true
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RetailerProgramDataAddressViewModel"
            },
            "description": "Ship From - Certain retailers want to display the ship from address as their return facility, not Shipbob\u2019s warehouse address        /// \r\nMark For Address - Final destination address"
          },
          "customer_ticket_number": {
            "type": "string",
            "description": "Customer Ticket Number",
            "example": "co_12345"
          }
        },
        "additionalProperties": false,
        "description": "Contains properties that needs to be used for fulfilling B2B/Dropship orders."
      },
      "ShipBob.Orders.Presentation.Models.Financials": {
        "type": "object",
        "properties": {
          "total_price": {
            "type": "number",
            "description": "Sum of all line item prices, discounts, and taxes in USD",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.OrderViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the order",
            "format": "int32"
          },
          "created_date": {
            "type": "string",
            "description": "Date this order was created",
            "format": "date-time"
          },
          "purchase_date": {
            "type": "string",
            "description": "Date this order was purchase by the end user",
            "format": "date-time",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "Client-defined external unique id of the order"
          },
          "order_number": {
            "type": "string",
            "description": "User friendly orderId or store order number that will be shown on the Orders Page. If not provided, referenceId will be used"
          },
          "status": {
            "enum": [
              "Processing",
              "Exception",
              "PartiallyFulfilled",
              "Fulfilled",
              "Cancelled",
              "ImportReview"
            ],
            "type": "string",
            "description": "The order status"
          },
          "type": {
            "enum": [
              "DTC",
              "DropShip",
              "B2B"
            ],
            "type": "string",
            "description": "Shipment type of the order",
            "example": "DTC"
          },
          "channel": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ChannelInfoViewModel"
          },
          "shipping_method": {
            "type": "string",
            "description": "Client-defined shipping method",
            "example": "Free 2-day Shipping"
          },
          "recipient": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RecipientInfoViewModel"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ProductInfoViewModel"
            },
            "description": "List of products included in the order"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.TagViewModel"
            },
            "description": "Client-defined order tags"
          },
          "shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShipmentViewModel"
            },
            "description": "Shipments affiliated with the order"
          },
          "gift_message": {
            "type": "string",
            "description": "Gift message associated with the order"
          },
          "shipping_terms": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShippingTermsViewModel"
          },
          "retailer_program_data": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RetailerProgramDataViewModel"
          },
          "financials": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.Financials"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.Models.AddProductToOrderByProductIdModel": {
        "required": [
          "id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the product",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of this product ordered",
            "format": "int32"
          },
          "quantity_unit_of_measure_code": {
            "type": "string",
            "description": "Defined standard for measure for an item (each, inner pack, case, pallet).  Values: EA, INP, CS and PL"
          },
          "external_line_id": {
            "type": "integer",
            "description": "Numeric assignment per item. Used as a reference number for multiple purposes such as split orders, split containers, etc.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.Models.AddProductToOrderByReferenceIdModel": {
        "required": [
          "quantity",
          "reference_id"
        ],
        "type": "object",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "Unique reference id of the product",
            "example": "TShirtBlueM"
          },
          "name": {
            "type": "string",
            "description": "Name of the product. Required if there is not an existing ShipBob product with a matching reference_id value.",
            "example": "TShirtBlueM"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of this product ordered",
            "format": "int32"
          },
          "quantity_unit_of_measure_code": {
            "type": "string",
            "description": "Defined standard for measure for an item (each, inner pack, case, pallet).  Values: EA, INP, CS and PL"
          },
          "gtin": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Global Trade Item Number - unique and internationally recognized identifier assigned to item by company GS1"
          },
          "upc": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Universal Product Code - Unique external identifier"
          },
          "sku": {
            "type": "string",
            "description": "Product SKU"
          },
          "unit_price": {
            "type": "number",
            "description": "Price for one item",
            "format": "double",
            "nullable": true
          },
          "external_line_id": {
            "type": "integer",
            "description": "Numeric assignment per item. Used as a reference number for multiple purposes such as split orders, split containers, etc.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.Models.AddProductToOrderModel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddProductToOrderByProductIdModel"
          },
          {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddProductToOrderByReferenceIdModel"
          }
        ]
      },
      "ShipBob.Orders.Presentation.Models.CreateOrderModel": {
        "required": [
          "products",
          "recipient",
          "reference_id",
          "shipping_method"
        ],
        "type": "object",
        "properties": {
          "shipping_method": {
            "type": "string",
            "description": "Client-defined shipping method matching what the user has listed as the shipping method on the Ship Option Mapping setup page in the ShipBob Merchant Portal. If they don\u2019t match, we will create a new one and default it to Standard",
            "example": "Free 2-day Shipping"
          },
          "recipient": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RecipientInfoViewModel"
          },
          "products": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.AddProductToOrderModel"
            },
            "description": "Products included in the order. Products identified by reference_id must also include the product name if there is no matching ShipBob product."
          },
          "reference_id": {
            "maxLength": 300,
            "type": "string",
            "description": "Unique and immutable order identifier from your upstream system"
          },
          "order_number": {
            "maxLength": 400,
            "type": "string",
            "description": "User friendly orderId or store order number that will be shown on the Orders Page. If not provided, referenceId will be used"
          },
          "type": {
            "enum": [
              "DTC",
              "DropShip",
              "B2B"
            ],
            "type": "string",
            "description": "Defaults to Direct to Consumer (DTC) if not provided. Note: B2B is not supported at this time"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.TagViewModel"
            },
            "description": "Key value pair array to store extra information at the order level for API purposes. ShipBob won't display the info in the ShipBob Merchant Portal or react based on this data."
          },
          "purchase_date": {
            "type": "string",
            "description": "Date this order was purchase by the end user",
            "format": "date-time",
            "nullable": true
          },
          "location_id": {
            "type": "integer",
            "description": "Desired Fulfillment Center Location ID. If not specified, ShipBob will determine the location that fulfills this order.",
            "format": "int32",
            "nullable": true
          },
          "shipping_terms": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ShippingTermsViewModel"
          },
          "retailer_program_data": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.RetailerProgramDataViewModel"
          },
          "gift_message": {
            "maxLength": 500,
            "type": "string",
            "description": "Gift message associated with the order"
          },
          "financials": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.Models.Financials"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.CanceledShipmentViewModel": {
        "type": "object",
        "properties": {
          "action": {
            "enum": [
              "Cancel"
            ],
            "type": "string",
            "description": ""
          },
          "shipment_id": {
            "type": "integer",
            "description": "The ID of the shipment",
            "format": "int64"
          },
          "is_success": {
            "type": "boolean",
            "description": "If the cancel action was successful"
          },
          "reason": {
            "type": "string",
            "description": "The reason the cancellation result"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ShipBob.Orders.Presentation.ViewModels.CanceledOrderViewModel": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "The ID of the canceled order",
            "format": "int32"
          },
          "order": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.OrderViewModel"
          },
          "status": {
            "enum": [
              "Success",
              "Failure",
              "PartialSuccess"
            ],
            "type": "string",
            "description": "The overall result of canceling the shipments associated with the order"
          },
          "canceled_shipment_results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CanceledShipmentViewModel"
            },
            "description": "Results of canceling the shipments associated with the order"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ShipBob.Orders.Presentation.Models.AddStoreOrderJsonModel": {
        "required": [
          "order_json"
        ],
        "type": "object",
        "properties": {
          "order_json": {
            "type": "string",
            "description": "Json String that represent the order on a store front system"
          }
        },
        "additionalProperties": false,
        "description": "Model for adding a Store Order Json to a ShipBob Order."
      },
      "ShipBob.Orders.Presentation.ViewModels.ShipmentLogViewModel": {
        "type": "object",
        "properties": {
          "log_type_id": {
            "type": "integer",
            "description": "Log type id of the shipment",
            "format": "int32"
          },
          "log_type_name": {
            "type": "string",
            "description": "Name of the log type"
          },
          "log_type_text": {
            "type": "string",
            "description": "Summary of log type meaning"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of event",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Specifics data for the event"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.Models.CancelShipmentsModel": {
        "type": "object",
        "properties": {
          "shipment_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Shipment IDs to cancel"
          }
        },
        "additionalProperties": false,
        "description": "Model for cancel multiple shipments at once"
      },
      "ShipBob.Orders.Presentation.ViewModels.CanceledShipmentsViewModel": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.CanceledShipmentViewModel"
            },
            "description": "The results of all cancellation actions"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ShipBob.Orders.Presentation.ViewModels.ServiceLevelDetailViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id for the service level",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name or title of the service level"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Orders.Presentation.ViewModels.ShipMethodDetailViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id for shipping method.",
            "format": "int32"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the shipping method is active"
          },
          "default": {
            "type": "boolean",
            "description": "Indicates the shipping method is a ShipBob default shipping method."
          },
          "name": {
            "type": "string",
            "description": "Name of the ship method as selected by the merchant and saved in ShipBob\u2019s database (i.e. \u201cground\u201d). Corresponds to the shipping_method field in the Orders API."
          },
          "service_level": {
            "$ref": "#/components/schemas/ShipBob.Orders.Presentation.ViewModels.ServiceLevelDetailViewModel"
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Products.Api.Models.Public.CreateProductModel": {
        "required": [
          "name",
          "reference_id"
        ],
        "type": "object",
        "properties": {
          "reference_id": {
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Unique reference identifier for the product. Any linked or generated inventory will also be uniquely identified by this value",
            "example": "TShirtBlueM"
          },
          "sku": {
            "maxLength": 400,
            "type": "string",
            "description": "Stock keeping unit for the product",
            "nullable": true,
            "example": "TShirtBlueM"
          },
          "name": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "The name of the product",
            "example": "Medium Blue T-Shirt"
          },
          "barcode": {
            "maxLength": 150,
            "type": "string",
            "description": "Barcode for the product",
            "nullable": true,
            "example": "123456789012"
          },
          "gtin": {
            "maxLength": 50,
            "type": "string",
            "description": "Global Trade Item Number - unique and internationally recognized identifier assigned to item by company GS1.",
            "nullable": true,
            "example": "012345678905"
          },
          "upc": {
            "maxLength": 50,
            "type": "string",
            "description": "Universal Product Code - Unique external identifier",
            "nullable": true,
            "example": "012345678912"
          },
          "unit_price": {
            "type": "number",
            "description": "The price of one unit",
            "format": "double",
            "nullable": true,
            "example": 20.32
          }
        },
        "additionalProperties": false,
        "description": "The product to create"
      },
      "Shipbob.Products.Api.Models.Public.UpdateProductModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the product",
            "example": "Medium Blue T-Shirt"
          },
          "sku": {
            "type": "string",
            "description": "The stock keeping unit of the product",
            "nullable": true,
            "example": "TShirtBlueM"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode for the product",
            "nullable": true,
            "example": "123456789012"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number - unique and internationally recognized identifier assigned to item by company GS1.",
            "nullable": true,
            "example": "012345678905"
          },
          "upc": {
            "type": "string",
            "description": "Universal Product Code - Unique external identifier",
            "nullable": true,
            "example": "012345678912"
          },
          "unit_price": {
            "type": "number",
            "description": "The price of one unit",
            "format": "double",
            "nullable": true,
            "example": 20.32
          }
        },
        "additionalProperties": false,
        "description": "Updates to an existing product product"
      },
      "Shipbob.Products.Api.ViewModels.Public.BundleRootInformationViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the bundle root product",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the bundle root product",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Products.Api.ViewModels.Public.ChannelViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the store channel",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the store channel",
            "nullable": true,
            "example": "House of Slippers"
          }
        },
        "additionalProperties": false,
        "description": "Information about a store channel"
      },
      "Shipbob.Products.Api.ViewModels.Public.FulfillmentCenterQuantityViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the fulfillment center",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the fulfillment center",
            "nullable": true,
            "example": "Cicero"
          },
          "fulfillable_quantity": {
            "type": "integer",
            "description": "Amount of fulfillable quantity at this fulfillment center",
            "format": "int32"
          },
          "onhand_quantity": {
            "type": "integer",
            "description": "Amount of onhand quantity at this fulfillment center",
            "format": "int32"
          },
          "committed_quantity": {
            "type": "integer",
            "description": "Amount of committed quantity at this fulfillment center",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Break down of quantities by fulfillment center"
      },
      "Shipbob.Products.Api.ViewModels.Public.InventoryItemViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the inventory item",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the inventory item",
            "nullable": true,
            "example": "Medium Blue T-Shirt"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the inventory item included in a store product",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The inventory that store products can resolve to when packing a shipment"
      },
      "Shipbob.Products.Api.ViewModels.Public.ProductViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the product",
            "format": "int32"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique reference identifier of the product",
            "nullable": true,
            "example": "TShirtBlueM"
          },
          "bundle_root_information": {
            "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.BundleRootInformationViewModel"
          },
          "created_date": {
            "type": "string",
            "description": "Date the product was created",
            "format": "date-time"
          },
          "channel": {
            "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.ChannelViewModel"
          },
          "sku": {
            "type": "string",
            "description": "Stock keeping unit for the product",
            "nullable": true,
            "example": "TShirtBlueM"
          },
          "name": {
            "type": "string",
            "description": "The name of the product",
            "nullable": true,
            "example": "Medium Blue T-Shirt"
          },
          "barcode": {
            "type": "string",
            "description": "Barcode for the product",
            "nullable": true,
            "example": "123456789012"
          },
          "gtin": {
            "type": "string",
            "description": "Global Trade Item Number - unique and internationally recognized identifier assigned to item by company GS1.",
            "nullable": true,
            "example": "012345678905"
          },
          "upc": {
            "type": "string",
            "description": "Universal Product Code - Unique external identifier",
            "nullable": true,
            "example": "012345678912"
          },
          "unit_price": {
            "type": "number",
            "description": "The price of one unit",
            "format": "double",
            "nullable": true,
            "example": 20.32
          },
          "total_fulfillable_quantity": {
            "type": "integer",
            "description": "Total fulfillable quantity of this product",
            "format": "int32"
          },
          "total_onhand_quantity": {
            "type": "integer",
            "description": "Total on hand quantity of this product",
            "format": "int32"
          },
          "total_committed_quantity": {
            "type": "integer",
            "description": "Total committed quantity of this product",
            "format": "int32"
          },
          "fulfillable_inventory_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.InventoryItemViewModel"
            },
            "description": "The inventory that this product will resolve to when packing a shipment",
            "nullable": true
          },
          "fulfillable_quantity_by_fulfillment_center": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Products.Api.ViewModels.Public.FulfillmentCenterQuantityViewModel"
            },
            "description": "Fulfillable quantity of this product broken down by fulfillment center location",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Products.Common.Models.ProductActiveStatus": {
        "enum": [
          "Any",
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "Shipbob.Products.Common.Models.ProductBundleStatus": {
        "enum": [
          "Any",
          "Bundle",
          "NotBundle"
        ],
        "type": "string"
      },
      "Shipbob.Receiving.Public.Api.Models.FulfillmentCenterViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the fulfillment center",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the fulfillment center",
            "nullable": true,
            "example": "Cicero (IL)"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone the fulfillment center is located in",
            "nullable": true,
            "example": "Central Standard Time"
          },
          "address1": {
            "type": "string",
            "description": "Address line one of the fulfillment center",
            "nullable": true,
            "example": "5900 W Ogden Ave"
          },
          "address2": {
            "type": "string",
            "description": "Address line two of the fulfillment center",
            "nullable": true,
            "example": "Suite 100"
          },
          "city": {
            "type": "string",
            "description": "City the fulfillment center is located in",
            "nullable": true,
            "example": "Cicero"
          },
          "state": {
            "type": "string",
            "description": "State the fulfillment center is located in",
            "nullable": true,
            "example": "IL"
          },
          "country": {
            "type": "string",
            "description": "Country the fulfillment center is located in",
            "nullable": true,
            "example": "USA"
          },
          "zip_code": {
            "type": "string",
            "description": "Postal code of the fulfillment center",
            "nullable": true,
            "example": "60804"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number contact for the fulfillment center",
            "nullable": true,
            "example": "555-555-5555"
          },
          "email": {
            "type": "string",
            "description": "Email contact for the fulfillment center",
            "nullable": true,
            "example": "example@example.com"
          }
        },
        "additionalProperties": false,
        "description": "Information about a fulfillment center"
      },
      "Shipbob.Receiving.Public.Common.Models.ReceivingStatus": {
        "enum": [
          "Awaiting",
          "Processing",
          "Completed",
          "Cancelled",
          "Incomplete",
          "Arrived",
          "PartiallyArrived"
        ],
        "type": "string"
      },
      "Shipbob.Receiving.Public.Common.Models.PackageType": {
        "enum": [
          "Package",
          "Pallet",
          "FloorLoadedContainer"
        ],
        "type": "string"
      },
      "Shipbob.Receiving.Public.Common.Models.PackingType": {
        "enum": [
          "EverythingInOneBox",
          "OneSkuPerBox",
          "MultipleSkuPerBox"
        ],
        "type": "string"
      },
      "Shipbob.Receiving.Public.Api.Models.V2.InventoryQuantityViewModel": {
        "type": "object",
        "properties": {
          "inventory_id": {
            "type": "integer",
            "description": "ID of the inventory item",
            "format": "int32"
          },
          "sku": {
            "type": "string",
            "description": "Sku of the inventory item",
            "nullable": true
          },
          "expected_quantity": {
            "type": "integer",
            "description": "Quantity of the inventory item submitted in the WRO",
            "format": "int32"
          },
          "received_quantity": {
            "type": "integer",
            "description": "Quantity of the inventory item received by the warehouse",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Receiving.Public.Api.Models.V2.WarehouseReceivingOrderViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the warehouse receiving order",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.ReceivingStatus"
          },
          "package_type": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.PackageType"
          },
          "box_packaging_type": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.PackingType"
          },
          "expected_arrival_date": {
            "type": "string",
            "description": "Expected date that all packages will have arrived",
            "format": "date-time"
          },
          "insert_date": {
            "type": "string",
            "description": "Insert date of the receiving order",
            "format": "date-time"
          },
          "last_updated_date": {
            "type": "string",
            "description": "Last date the receiving order was updated",
            "format": "date-time"
          },
          "box_labels_uri": {
            "type": "string",
            "description": "URL to the packing slip to be included in each box shipment for this receiving order",
            "nullable": true,
            "example": "https://api.shipbob.com/1.0/receiving/1/labels"
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.FulfillmentCenterViewModel"
          },
          "purchase_order_number": {
            "type": "string",
            "description": "Purchase order number for a receiving order",
            "nullable": true
          },
          "inventory_quantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.V2.InventoryQuantityViewModel"
            },
            "description": "Inventory items and quantities within the WRO",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.Mvc.ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Shipbob.Receiving.Public.Api.Models.AssignOrderToFulfillmentCenterModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the fulfillment center to assign this receiving order to",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Model containing information that assigns a receiving order to a fulfillment center.\r\nIf the fulfillment center provided is in a receiving hub region, then the response will be the receiving hub location."
      },
      "Shipbob.Receiving.Public.Api.Models.AddBoxItemToBoxModel": {
        "required": [
          "inventory_id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Quantity of the items in the box",
            "format": "int32"
          },
          "inventory_id": {
            "type": "integer",
            "description": "Unique inventory id of the items in the box",
            "format": "int32"
          },
          "lot_number": {
            "type": "string",
            "description": "Lot number of the items in the box",
            "nullable": true,
            "example": "2222"
          },
          "lot_date": {
            "type": "string",
            "description": "Lot expiration date for the items in the box",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an inventory item contained inside a receiving order box"
      },
      "Shipbob.Receiving.Public.Api.Models.AddBoxToOrderModel": {
        "required": [
          "box_items",
          "tracking_number"
        ],
        "type": "object",
        "properties": {
          "tracking_number": {
            "type": "string",
            "description": "Tracking number for the box shipment",
            "nullable": true,
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC"
          },
          "box_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.AddBoxItemToBoxModel"
            },
            "description": "Items contained in this box",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a box shipment to be added to a receiving order"
      },
      "Shipbob.Receiving.Public.Api.Models.CreateReceivingOrderModel": {
        "required": [
          "box_packaging_type",
          "boxes",
          "expected_arrival_date",
          "fulfillment_center",
          "package_type"
        ],
        "type": "object",
        "properties": {
          "fulfillment_center": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.AssignOrderToFulfillmentCenterModel"
          },
          "package_type": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.PackageType"
          },
          "box_packaging_type": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.PackingType"
          },
          "boxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.AddBoxToOrderModel"
            },
            "description": "Box shipments to be added to this receiving order",
            "nullable": true
          },
          "expected_arrival_date": {
            "type": "string",
            "description": "Expected arrival date of all the box shipments in this receiving order",
            "format": "date-time"
          },
          "purchase_order_number": {
            "type": "string",
            "description": "Purchase order number for this receiving order",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information to create a new receiving order"
      },
      "Shipbob.Receiving.Public.Common.Models.BoxStatus": {
        "enum": [
          "Awaiting",
          "Arrived",
          "Completed",
          "Counting",
          "Stowing",
          "Cancelled"
        ],
        "type": "string"
      },
      "Shipbob.Receiving.Public.Api.Models.BoxItemViewModel": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Quantity of the item included",
            "format": "int32"
          },
          "received_quantity": {
            "type": "integer",
            "description": "Quantity of the item that was received after processing the receiving order",
            "format": "int32"
          },
          "inventory_id": {
            "type": "integer",
            "description": "Unique identifier of the inventory item",
            "format": "int32"
          },
          "lot_number": {
            "type": "string",
            "description": "Lot number the item belongs to",
            "nullable": true
          },
          "lot_date": {
            "type": "string",
            "description": "Expiration date of the item's lot",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an item contained inside a box as part of a receiving order"
      },
      "Shipbob.Receiving.Public.Api.Models.BoxViewModel": {
        "type": "object",
        "properties": {
          "box_number": {
            "type": "integer",
            "description": "The number of the box in the receiving order",
            "format": "int32"
          },
          "box_status": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.BoxStatus"
          },
          "arrived_date": {
            "type": "string",
            "description": "Date the box arrived",
            "format": "date-time",
            "nullable": true
          },
          "received_date": {
            "type": "string",
            "description": "Date the box was received",
            "format": "date-time",
            "nullable": true
          },
          "counting_started_date": {
            "type": "string",
            "description": "Date counting of the box's inventory items started",
            "format": "date-time",
            "nullable": true
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking number of the box shipment",
            "nullable": true,
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC"
          },
          "box_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.BoxItemViewModel"
            },
            "description": "Information about the items included in the box",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a box shipment included in a receiving order"
      },
      "Shipbob.Receiving.Public.Api.Models.ReceivingOrderViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the warehouse receiving order",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.ReceivingStatus"
          },
          "package_type": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.PackageType"
          },
          "box_packaging_type": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Common.Models.PackingType"
          },
          "expected_arrival_date": {
            "type": "string",
            "description": "Expected date that all packages will have arrived",
            "format": "date-time"
          },
          "insert_date": {
            "type": "string",
            "description": "Insert date of the receiving order",
            "format": "date-time"
          },
          "last_updated_date": {
            "type": "string",
            "description": "Last date the receiving order was updated",
            "format": "date-time"
          },
          "box_labels_uri": {
            "type": "string",
            "description": "URL to the packing slip to be included in each box shipment for this receiving order",
            "nullable": true,
            "example": "https://api.shipbob.com/1.0/receiving/1/labels"
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.FulfillmentCenterViewModel"
          },
          "purchase_order_number": {
            "type": "string",
            "description": "Purchase order number for a receiving order",
            "nullable": true
          },
          "boxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Receiving.Public.Api.Models.BoxViewModel"
            },
            "description": "Information about the boxes being shipped in this receiving order",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a receiving order"
      },
      "Shipbob.Returns.Public.Api.ViewModels.ChannelInfoViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the channel",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel",
            "nullable": true,
            "example": "ShipBobs-Shopify-Store"
          }
        },
        "additionalProperties": false,
        "description": "Created by channel metadata"
      },
      "Shipbob.Returns.Public.Common.ReturnStatus": {
        "enum": [
          "AwaitingArrival",
          "Arrived",
          "Processing",
          "Completed",
          "Cancelled"
        ],
        "type": "string"
      },
      "Shipbob.Returns.Public.Common.TransactionLogSource": {
        "enum": [
          "ReturnLabelInvoice",
          "ReturnProcessingFee",
          "ReturnToSenderFee"
        ],
        "type": "string"
      },
      "Shipbob.Returns.Public.Api.ViewModels.TransactionViewModel": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Transaction amount in dollars",
            "format": "double",
            "example": 2.5
          },
          "transaction_type": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.TransactionLogSource"
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Api.ViewModels.FulfillmentCenterViewModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the fulfillment center",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the fulfillment center",
            "nullable": true,
            "example": "Cicero (IL)"
          }
        },
        "additionalProperties": false,
        "description": "Information about a fulfillment center"
      },
      "Shipbob.Returns.Public.Common.ReturnAction": {
        "enum": [
          "Default",
          "Restock",
          "Quarantine",
          "Dispose"
        ],
        "type": "string"
      },
      "Shipbob.Returns.Public.Common.ReturnActionSource": {
        "enum": [
          "InventoryDefault",
          "Override"
        ],
        "type": "string"
      },
      "Shipbob.Returns.Public.Api.ViewModels.ReturnActionRequestedViewModel": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnAction"
          },
          "action_type": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnActionSource"
          },
          "instructions": {
            "type": "string",
            "description": "Specific instructions to be taken for the inventory when processing the return",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Api.ViewModels.ReturnActionTakenViewModel": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnAction"
          },
          "action_reason": {
            "type": "string",
            "description": "Reason the given action was taken",
            "nullable": true
          },
          "quantity_processed": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Quantity of inventory processed with the taken action",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Api.ViewModels.InventoryItemViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the inventory item",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the inventory item",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity expected to be processed with the return",
            "format": "int32"
          },
          "action_requested": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnActionRequestedViewModel"
          },
          "action_taken": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnActionTakenViewModel"
            },
            "description": "Action(s) taken when processing the return",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Common.ReturnType": {
        "enum": [
          "Regular",
          "ReturnToSender"
        ],
        "type": "string"
      },
      "Shipbob.Returns.Public.Api.ViewModels.ReturnOrderViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique id of the Return Order",
            "format": "int32"
          },
          "channel": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ChannelInfoViewModel"
          },
          "insert_date": {
            "type": "string",
            "description": "Date this return order was created",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnStatus"
          },
          "invoice_amount": {
            "type": "number",
            "description": "Invoiced amount of return order (sum of transaction amounts)",
            "format": "double",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.TransactionViewModel"
            },
            "description": "Array of transactions affiliated with the return order",
            "nullable": true
          },
          "fulfillment_center": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.FulfillmentCenterViewModel"
          },
          "reference_id": {
            "type": "string",
            "description": "Client-defined external unique id of the return order",
            "nullable": true
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking number of the return shipment",
            "nullable": true,
            "example": "860C8CDC8F0B4FC7AB69AC86C20539EC"
          },
          "inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.InventoryItemViewModel"
            },
            "description": "List of inventory included in the return order",
            "nullable": true
          },
          "original_shipment_id": {
            "type": "integer",
            "description": "Id of the corresponding shipment that is the souce of the return",
            "format": "int32",
            "nullable": true
          },
          "return_type": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnType"
          },
          "completed_date": {
            "type": "string",
            "description": "Completed date for a return order.",
            "format": "date-time",
            "nullable": true
          },
          "store_order_id": {
            "type": "string",
            "description": "Store order for the related shipment.",
            "nullable": true
          },
          "customer_name": {
            "type": "string",
            "description": "Customer name from the related shipment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Api.ViewModels.ReturnInventoryViewModel": {
        "required": [
          "id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the inventory item to return",
            "format": "int32",
            "example": 111222
          },
          "quantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Quantity of the returned inventory item in the return",
            "format": "int32",
            "example": 1
          },
          "requested_action": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnAction"
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Api.ViewModels.CreateReturnViewModel": {
        "required": [
          "fulfillment_center",
          "inventory",
          "reference_id"
        ],
        "type": "object",
        "properties": {
          "fulfillment_center": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.FulfillmentCenterViewModel"
          },
          "reference_id": {
            "maxLength": 50,
            "type": "string",
            "description": "Client-defined external unique identifier for the return order",
            "nullable": true,
            "example": "ShipBob_Return_123"
          },
          "tracking_number": {
            "maxLength": 500,
            "type": "string",
            "description": "Tracking number for the return shipment",
            "nullable": true,
            "example": "1Z9999999999999999"
          },
          "inventory": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipbob.Returns.Public.Api.ViewModels.ReturnInventoryViewModel"
            },
            "description": "Array of inventory items being returned",
            "nullable": true
          },
          "original_shipment_id": {
            "type": "integer",
            "description": "Shipment from which the items in the return originated",
            "format": "int32",
            "nullable": true,
            "example": 123456
          }
        },
        "additionalProperties": false
      },
      "Shipbob.Returns.Public.Common.SortOrder": {
        "enum": [
          "Newest",
          "Oldest"
        ],
        "type": "string"
      },
      "Shipbob.Returns.Public.Api.ViewModels.ReturnOrderStatusHistoryViewModel": {
        "type": "object",
        "properties": {
          "time_stamp": {
            "type": "string",
            "description": "Date this corresponding return order status was created",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/Shipbob.Returns.Public.Common.ReturnStatus"
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Webhooks.Public.Common.Topics": {
        "enum": [
          "order_shipped",
          "shipment_delivered",
          "shipment_exception",
          "shipment_onhold",
          "shipment_cancelled"
        ],
        "type": "string"
      },
      "ShipBob.Webhooks.Public.Api.Models.WebhookViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the webhook subscription",
            "format": "int32",
            "example": 12345
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp the webhook subscription was created",
            "format": "date-time"
          },
          "topic": {
            "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Common.Topics"
          },
          "subscription_url": {
            "type": "string",
            "description": "URL subscription events will be posted to",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipBob.Webhooks.Public.Api.Models.CreateWebhookSubscriptionModel": {
        "required": [
          "subscription_url",
          "topic"
        ],
        "type": "object",
        "properties": {
          "topic": {
            "$ref": "#/components/schemas/ShipBob.Webhooks.Public.Common.Topics"
          },
          "subscription_url": {
            "type": "string",
            "description": "URL we will call when an event matching the subscription topic is raised. Must have ssl enabled (https) and accept POST requests with content type of application/json",
            "format": "uri",
            "example": "https://mywebsite.com/shipbob/handler"
          }
        },
        "additionalProperties": false
      },
      "Integrations.Location.Public.Api.ViewModels.OrganizationRoleViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Integrations.Location.Public.Api.ViewModels.FcTypeViewModel": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "description": "Unique Id for the fulfillment center type",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the fc type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "$type"
        }
      },
      "Integrations.Location.Public.Api.ViewModels.FcTypeViewModelV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FcTypeViewModel"
          },
          {
            "type": "object",
            "properties": {
              "organization_type_id": {
                "type": "string",
                "format": "uuid"
              },
              "organization_type_name": {
                "type": "string",
                "nullable": true
              },
              "is_child": {
                "type": "boolean"
              },
              "organization_roles": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.OrganizationRoleViewModel"
                },
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Integrations.Location.Public.Api.ViewModels.FcAttributeViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique Id for the fulfillment center attribute",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Integrations.Location.Public.Common.ServiceTypeEnum": {
        "enum": [
          "Receiving",
          "Returns"
        ],
        "type": "string"
      },
      "Integrations.Location.Public.Api.ViewModels.AddressViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name to use in the address of the location for this service",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "First part of the address of the location for this service",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "Second part of the address of the location for this service",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City of the location",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State of the location",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country of the location",
            "nullable": true
          },
          "zip_code": {
            "type": "string",
            "description": "Zip code of the location",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "description": "Phone Number of the location for this service",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email of the location for this service",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The service-specific address of the location. Each object contains address type, address1, address2, city, state, country, zip code, phone number, and email"
      },
      "Integrations.Location.Public.Api.ViewModels.ServiceViewModel": {
        "type": "object",
        "properties": {
          "service_type": {
            "$ref": "#/components/schemas/Integrations.Location.Public.Common.ServiceTypeEnum"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the user is authorized to access this service at the location"
          },
          "address": {
            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.AddressViewModel"
          }
        },
        "additionalProperties": false
      },
      "Integrations.Location.Public.Api.ViewModels.FulfillmentCenterRegionViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique Id for the location region",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the region the location is in.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Integrations.Location.Public.Api.ViewModels.LocationViewModel": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "description": "Id of the location in ShipBob\u2019s database",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the location. Follows the naming convention City (State Code)\r\nfor domestic FCs and City (Country Code) for international FCs",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of the location. Combination of nearest Airport Code and the sequence number.",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "description": "Time zone of the location",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the location is operationally active or inactive"
          },
          "is_receiving_enabled": {
            "type": "boolean",
            "description": "Indicates if the receiving is enabled for FC"
          },
          "is_shipping_enabled": {
            "type": "boolean",
            "description": "Indicates if the shipping is enabled for FC"
          },
          "access_granted": {
            "type": "boolean",
            "description": "Indicates whether or not the user is authorized to interact at all with the location"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available attributes for the location",
            "nullable": true
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.ServiceViewModel"
            },
            "description": "Services provided by the location",
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FulfillmentCenterRegionViewModel"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "$type"
        }
      },
      "Integrations.Location.Public.Api.ViewModels.InternalLocationViewModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.LocationViewModel"
          },
          {
            "type": "object",
            "properties": {
              "is_enabled_for_new_user": {
                "type": "boolean"
              },
              "fulfillment_center_type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FcTypeViewModelV2"
                  }
                ],
                "nullable": true
              },
              "is_external": {
                "type": "boolean"
              },
              "fulfillment_center_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FcAttributeViewModel"
                },
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Integrations.Location.Public.Api.ViewModels.LocationViewModelV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.LocationViewModel"
          },
          {
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "organization_id": {
                "type": "string",
                "format": "uuid"
              },
              "parent_id": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "owner_id": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "discriminator": {
              "propertyName": "$type"
            }
          }
        ]
      },
      "Integrations.Location.Public.Api.ViewModels.InternalLocationViewModelV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.LocationViewModelV2"
          },
          {
            "type": "object",
            "properties": {
              "is_enabled_for_new_user": {
                "type": "boolean"
              },
              "fulfillment_center_type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FcTypeViewModelV2"
                  }
                ],
                "nullable": true
              },
              "fulfillment_center_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FcAttributeViewModel"
                },
                "nullable": true
              },
              "organization_id": {
                "type": "string",
                "format": "uuid"
              },
              "parent_id": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "owner_id": {
                "type": "string",
                "format": "uuid",
                "nullable": true
              },
              "id": {
                "type": "integer",
                "description": "Id of the location in ShipBob\u2019s database",
                "format": "int32"
              },
              "name": {
                "type": "string",
                "description": "Name of the location. Follows the naming convention City (State Code)\r\nfor domestic FCs and City (Country Code) for international FCs",
                "nullable": true
              },
              "abbreviation": {
                "type": "string",
                "description": "Abbreviation of the location. Combination of nearest Airport Code and the sequence number.",
                "nullable": true
              },
              "timezone": {
                "type": "string",
                "description": "Time zone of the location",
                "nullable": true
              },
              "is_active": {
                "type": "boolean",
                "description": "Indicates if the location is operationally active or inactive"
              },
              "is_receiving_enabled": {
                "type": "boolean",
                "description": "Indicates if the receiving is enabled for FC"
              },
              "is_shipping_enabled": {
                "type": "boolean",
                "description": "Indicates if the shipping is enabled for FC"
              },
              "access_granted": {
                "type": "boolean",
                "description": "Indicates whether or not the user is authorized to interact at all with the location"
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Available attributes for the location",
                "nullable": true
              },
              "services": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.ServiceViewModel"
                },
                "description": "Services provided by the location",
                "nullable": true
              },
              "region": {
                "$ref": "#/components/schemas/Integrations.Location.Public.Api.ViewModels.FulfillmentCenterRegionViewModel"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.shipbob.com/connect/integrate",
            "tokenUrl": "https://auth.shipbob.com/connect/token",
            "scopes": {
              "channels_read": "Read channel metadata",
              "channels_write": "Write channel metadata",
              "inventory_read": "Access read operations",
              "inventory_write": "Access write operations",
              "orders_read": "Access read operations",
              "orders_write": "Access write operations",
              "products_read": "Access read operations",
              "products_write": "Access write operations",
              "receiving_read": "Access receiving read operations",
              "receiving_write": "Access receiving write operations",
              "returns_read": "Access returns read operations",
              "returns_write": "Access returns write operations",
              "webhooks_read": "Access read operations",
              "webhooks_write": "Access write operations",
              "locations_read": "Access locations read operations"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Orders",
      "description": " >  Note: The orderId in the API response will not match the Id displayed in the ShipBob Merchant Portal when you navigate to the Orders page. ShipBob is currently undergoing a schema migration and the Id displayed in the ShipBob Merchant Portal is the shipmentId not the orderId. In the future, the portal will display both orderId(s) and shipmentId(s). \n\n Use the Orders Resource to create and retrieve orders in ShipBob. \n\n An order a digital record of a complete purchase that comes from an upstream source (i.e. Shopify) and is intended for ShipBob to fulfill. The order object includes products purchased, shipping address details, shipping method selected etc. Orders are created in ShipBob via a channel. \n\n When ShipBob fulfills the order, one or more shipments are created for that order. A shipment is a record of the physical package(s) sent out via a carrier. If an order is shipped in multiple packages then 2 or more shipments can be created for that order. \n\n ### Tips for creating orders in ShipBob via the POST Order endpoint: \n\n * Populate the referenceId with a unique and immutable order identifier from your upstream system. This field was created to allow you to tieback records in ShipBob with your upstream system. \n\n * Ensure that the <em> shipping method </em> passed in the API request matches exactly what the user has listed as the <em> shipping method </em> on the <em>  Ship Option Mapping </em> setup page in the ShipBob Merchant Portal. If they don\u2019t match, ShipBob will assume that the user wants to leverage ShipBob\u2019s default shipping method. \n\n * You can leverage either productId (the ShipBob productId) or the product referenceId (your system's  unique Identifier for products) when creating an order. \n\n Use the Shipments endpoints to retrieve fulfillment information for shipments or orders. \n\n A shipment is an object that is the result of a fulfillment of an order. An order can have one or more shipments. Say Shopify order #122323 contains 3 different products, shipped in two separate packages, there would be 2 shipments for that order. \n\n  Serial numbers are unique identifiers for an individual item (e.g. your specific iPhone X that you bought at the Apple Store). No inventory item can possess duplicate serial numbers. Merchants can request \u201cserial scan\u201d, which means ShipBob will capture the serial number(s) upon sending a shipment so the merchant knows which customer received which individual item(s)."
    },
    {
      "name": "Products",
      "description": "Use the Products Resource to retrieve and create product records in ShipBob. \n\n A product is a virtual record created in ShipBob\u2019s system via a channel. Say a merchant has two Shopify stores (each store would have its own channel), Kevin\u2019s Shopify Store #133 and Kevin\u2019s Shopify store #134. If the same SKU was sold on both stores, two products would be created for that SKU, one product would be created to represent the SKU sold on Store #133 and one to represent it on Store on #134, with productIds 3884009 and 3884008 respectively. \n\n While a product is a virtual record, the inventory item is a representation of a physical good. So in the above example, as product 3884009 and product 3884008 represent the same SKU sold on different channels, the same inventory item will be mapped to both products. Every product will have one or more inventory items mapped to it. Bundle products, a set of products that are sold to consumers as one combined package, think gift or multi packs, may have 2 or more inventory items mapped to them. \n\n ### Tips for creating products in ShipBob via the POST Product endpoints: \n\n * ShipBob needs products to be created at the lowest level. So if a product has 3 variants, small, medium and large, a separate product needs to be created in ShipBob for all three.\n\n * Populate the referenceId with a unique and immutable product identifier from your upstream system. This field was created to allow you to tie back records in ShipBob with your upstream system. \n\n * Use specific and/or unique names to describe each product so they can be easily identified by users in the ShipBob Merchant Portal. In particular, when creating variants, please give them distinguishable names i.e. for a Blue shirt that comes in two sizes, small and medium, strong product names would be Blue shirt size:small and Blue shirt size:medium. \n\n > **NOTE:** The productId returned in the API response will not match the id displayed in the ShipBob Merchant Portal when you navigate to Inventory > Products. ShipBob is currently undergoing a schema migration and the Id displayed in the ShipBob Merchant Portal is the inventoryId not the productId. In the future, the portal will display both productId(s) and inventoryId(s)"
    },
    {
      "name": "Inventory",
      "description": " Use the Inventory Resource to retrieve ShipBob  inventory items and quantities. \n\n An inventory item is a representation of a physical good, that may or may not have physical stock in ShipBob\u2019s fulfillment centers. Every product will have one or more inventory items mapped to it. A bundle product (a set of products that are sold as one combined package - e.g.  gift or multi packs) is an example of a product that has  2 or more inventory items mapped to it. \n\n Lot items are physical items that have expiration dates or batch numbers that should be fulfilled in a FIFO (first in, first out) manner. Most food items are lot items. Quantities by lot # and/or expiration date are also listed in the Inventory object."
    },
    {
      "name": "Channels",
      "description": "Use the Channel Resource to list \u201cchannels\u201d which you have access to. You will use this channelId for subsequent API calls made to ShipBob endpoints. \n\n A channel is a specific installation of an application built by a vendor on top of our API \u2013 e.g. Kevin\u2019s Shopify Store #133432.  All write and most read endpoints require a channel to be passed in the header to complete the request. The channel is used to Identify where the data originally came from.  \n\n Applications that are granted multi-channel permissions will be able to read data from all channels that belong to a user. However, multi-channel applications will only be able to write on behalf of their own channel."
    },
    {
      "name": "Returns",
      "description": "Use the Returns resource to retrieve, create, edit and cancel return records in ShipBob. \n\n A return is a request for ShipBob to perform an action on inventory that is coming back into our fulfillment centers. Typically, the return is a result of an order being requested to be refunded or exchanged. ShipBob does not handle refunds or exchanges - we simply process the inventory according to the merchant specifications. \n\n Returns can only be **modified** or **cancelled** when they are in the Awaiting Arrival status. Returns that are being Processed or have been Completed cannot be modified or cancelled. \n\n ### Tips for creating return orders: \n\n * Populate the referenceId with a unique and immutable return identifier from your upstream system. This field was created to allow you to tie back records in ShipBob with your upstream system. \n\n *Include each inventoryId exactly once in the inventory object. If an inventoryId is included more than once, the call will return an error code \n\n * Provide a tracking # when submitting a return, while it is not a required field, it is the the most surefire way for ShipBob staff to properly and quickly identify the return package when it reaches our fulfillment center. \n\n * Only include inventory items to the return record that will be returned in the same box i.e. if InventoryId 12232 and InventoryId 12039 will be returned in two seperate boxes, two return orders should be created. \n\n * ShipBob does not process returns for digital items or bundle inventory items. Return calls that include digital inventory  items (e.g. ebooks) or bundle inventory items (i.e. multipacks, combination of multiple inventory items)  will return an error code. \n\n * If you choose to provide a requested action (it is an optional field), only provide one requested action per inventory item. So if  you have more than 1 quantity of a given item being returned within the same box, all quantities of the item have to have the same action associated with them. If you don\u2019t provide a requested action, it will default to the action the User set for that inventory item in the ShipBob Merchant portal."
    },
    {
      "name": "Receiving",
      "description": "Note: 1.0/receiving endpoints have been deprecated. Please use 2.0/receiving instead. \n\n Use the Receiving Resource to retrieve, create and cancel Warehouse Receiving Orders (WROs). \n\n A WRO is a request form that tells ShipBob's fulfillment centers what inventory should be received and stocked. Some other solutions call this an \u201cASN\u201d or Advanced Ship Notice. WROs may include multiple inventory items with specific quantities. More details on creating a WRO can be found [here](https://support.shipbob.com/s/article/New-Send-Inventory-to-ShipBob-WRO). \n\n A WRO can only be **canceled** if it is in the Awaiting status. WROs in Awaiting status are considered to still be in transit to ShipBob FCs. WROs that have Partially Arrived, have been Processed or are Completed, cannot be canceled."
    },
    {
      "name": "Webhooks",
      "description": "Use the Webhooks Resource to create, view or delete subscriptions for a user."
    },
    {
      "name": "Locations",
      "description": "Use this API to interact with the physical locations across ShipBob's fulfillment network. \n\n An active ShipBob location is operational for fulfillment processes, including receiving inventory and processing returns. It's important to note that some locations, access is granted to all merchants by default, while some locations require special request for merchants to be granted access. \n\n For each location, determine if it can be leveraged for the user by viewing the access_granted & receiving_enabled fields."
    }
  ],
  "servers": [
    {
      "url": "https://api.shipbob.com/"
    }
  ]
}