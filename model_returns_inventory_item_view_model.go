/*
 * ShipBob Developer API
 *
 * ShipBob Developer API Documentation
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// ReturnsInventoryItemViewModel struct for ReturnsInventoryItemViewModel
type ReturnsInventoryItemViewModel struct {
	ActionRequested *ReturnsReturnActionRequestedViewModel `json:"action_requested,omitempty"`
	// Action(s) taken when processing the return
	ActionTaken []ReturnsReturnActionTakenViewModel `json:"action_taken,omitempty"`
	// Unique id of the inventory item
	Id *int32 `json:"id,omitempty"`
	// Name of the inventory item
	Name NullableString `json:"name,omitempty"`
	// Quantity expected to be processed with the return
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewReturnsInventoryItemViewModel instantiates a new ReturnsInventoryItemViewModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnsInventoryItemViewModel() *ReturnsInventoryItemViewModel {
	this := ReturnsInventoryItemViewModel{}
	return &this
}

// NewReturnsInventoryItemViewModelWithDefaults instantiates a new ReturnsInventoryItemViewModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnsInventoryItemViewModelWithDefaults() *ReturnsInventoryItemViewModel {
	this := ReturnsInventoryItemViewModel{}
	return &this
}

// GetActionRequested returns the ActionRequested field value if set, zero value otherwise.
func (o *ReturnsInventoryItemViewModel) GetActionRequested() ReturnsReturnActionRequestedViewModel {
	if o == nil || o.ActionRequested == nil {
		var ret ReturnsReturnActionRequestedViewModel
		return ret
	}
	return *o.ActionRequested
}

// GetActionRequestedOk returns a tuple with the ActionRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnsInventoryItemViewModel) GetActionRequestedOk() (*ReturnsReturnActionRequestedViewModel, bool) {
	if o == nil || o.ActionRequested == nil {
		return nil, false
	}
	return o.ActionRequested, true
}

// HasActionRequested returns a boolean if a field has been set.
func (o *ReturnsInventoryItemViewModel) HasActionRequested() bool {
	if o != nil && o.ActionRequested != nil {
		return true
	}

	return false
}

// SetActionRequested gets a reference to the given ReturnsReturnActionRequestedViewModel and assigns it to the ActionRequested field.
func (o *ReturnsInventoryItemViewModel) SetActionRequested(v ReturnsReturnActionRequestedViewModel) {
	o.ActionRequested = &v
}

// GetActionTaken returns the ActionTaken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReturnsInventoryItemViewModel) GetActionTaken() []ReturnsReturnActionTakenViewModel {
	if o == nil  {
		var ret []ReturnsReturnActionTakenViewModel
		return ret
	}
	return o.ActionTaken
}

// GetActionTakenOk returns a tuple with the ActionTaken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReturnsInventoryItemViewModel) GetActionTakenOk() (*[]ReturnsReturnActionTakenViewModel, bool) {
	if o == nil || o.ActionTaken == nil {
		return nil, false
	}
	return &o.ActionTaken, true
}

// HasActionTaken returns a boolean if a field has been set.
func (o *ReturnsInventoryItemViewModel) HasActionTaken() bool {
	if o != nil && o.ActionTaken != nil {
		return true
	}

	return false
}

// SetActionTaken gets a reference to the given []ReturnsReturnActionTakenViewModel and assigns it to the ActionTaken field.
func (o *ReturnsInventoryItemViewModel) SetActionTaken(v []ReturnsReturnActionTakenViewModel) {
	o.ActionTaken = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReturnsInventoryItemViewModel) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnsInventoryItemViewModel) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReturnsInventoryItemViewModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReturnsInventoryItemViewModel) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReturnsInventoryItemViewModel) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReturnsInventoryItemViewModel) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ReturnsInventoryItemViewModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ReturnsInventoryItemViewModel) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ReturnsInventoryItemViewModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ReturnsInventoryItemViewModel) UnsetName() {
	o.Name.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ReturnsInventoryItemViewModel) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnsInventoryItemViewModel) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ReturnsInventoryItemViewModel) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ReturnsInventoryItemViewModel) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o ReturnsInventoryItemViewModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionRequested != nil {
		toSerialize["action_requested"] = o.ActionRequested
	}
	if o.ActionTaken != nil {
		toSerialize["action_taken"] = o.ActionTaken
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableReturnsInventoryItemViewModel struct {
	value *ReturnsInventoryItemViewModel
	isSet bool
}

func (v NullableReturnsInventoryItemViewModel) Get() *ReturnsInventoryItemViewModel {
	return v.value
}

func (v *NullableReturnsInventoryItemViewModel) Set(val *ReturnsInventoryItemViewModel) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnsInventoryItemViewModel) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnsInventoryItemViewModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnsInventoryItemViewModel(val *ReturnsInventoryItemViewModel) *NullableReturnsInventoryItemViewModel {
	return &NullableReturnsInventoryItemViewModel{value: val, isSet: true}
}

func (v NullableReturnsInventoryItemViewModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnsInventoryItemViewModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


