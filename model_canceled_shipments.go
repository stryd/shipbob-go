/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
)

// checks if the CanceledShipments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CanceledShipments{}

// CanceledShipments
type CanceledShipments struct {
	// The results of all cancellation actions
	Results []CanceledShipment `json:"results,omitempty"`
}

// NewCanceledShipments instantiates a new CanceledShipments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCanceledShipments() *CanceledShipments {
	this := CanceledShipments{}
	return &this
}

// NewCanceledShipmentsWithDefaults instantiates a new CanceledShipments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCanceledShipmentsWithDefaults() *CanceledShipments {
	this := CanceledShipments{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *CanceledShipments) GetResults() []CanceledShipment {
	if o == nil || IsNil(o.Results) {
		var ret []CanceledShipment
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CanceledShipments) GetResultsOk() ([]CanceledShipment, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *CanceledShipments) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []CanceledShipment and assigns it to the Results field.
func (o *CanceledShipments) SetResults(v []CanceledShipment) {
	o.Results = v
}

func (o CanceledShipments) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CanceledShipments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableCanceledShipments struct {
	value *CanceledShipments
	isSet bool
}

func (v NullableCanceledShipments) Get() *CanceledShipments {
	return v.value
}

func (v *NullableCanceledShipments) Set(val *CanceledShipments) {
	v.value = val
	v.isSet = true
}

func (v NullableCanceledShipments) IsSet() bool {
	return v.isSet
}

func (v *NullableCanceledShipments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCanceledShipments(val *CanceledShipments) *NullableCanceledShipments {
	return &NullableCanceledShipments{value: val, isSet: true}
}

func (v NullableCanceledShipments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCanceledShipments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
