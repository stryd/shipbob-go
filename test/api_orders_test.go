/*
ShipBob Developer API

Testing OrdersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package shipbob

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/stryd/shipbob-go"
)

func Test_shipbob_OrdersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrdersApiService CancelOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrdersApi.CancelOrder(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService CancelOrderShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shipmentId int32
		var orderId string

		resp, httpRes, err := apiClient.OrdersApi.CancelOrderShipment(context.Background(), shipmentId, orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService CancelShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.CancelShipment(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService CreateOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersApi.CreateOrder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService CreateOrderEstimate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersApi.CreateOrderEstimate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService CreateOrderStoreOrderJson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrdersApi.CreateOrderStoreOrderJson(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService CreateShipmentCancelbulk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersApi.CreateShipmentCancelbulk(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrdersApi.GetOrder(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrderShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32
		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.GetOrderShipment(context.Background(), orderId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrderShipmentLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32
		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.GetOrderShipmentLogs(context.Background(), orderId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrderShipmentTimelines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32
		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.GetOrderShipmentTimelines(context.Background(), orderId, shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrderShipments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrdersApi.GetOrderShipments(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrderStoreOrderJsons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId int32

		resp, httpRes, err := apiClient.OrdersApi.GetOrderStoreOrderJsons(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersApi.GetOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetShipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.GetShipment(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetShipmentLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.GetShipmentLogs(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetShipmentTimelines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shipmentId int32

		resp, httpRes, err := apiClient.OrdersApi.GetShipmentTimelines(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersApiService GetShippingmethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersApi.GetShippingmethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
