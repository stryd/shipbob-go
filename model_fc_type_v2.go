/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the FcTypeV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FcTypeV2{}

// FcTypeV2 struct for FcTypeV2
type FcTypeV2 struct {
	FcType
	IsChild              *bool              `json:"is_child,omitempty"`
	OrganizationRoles    []OrganizationRole `json:"organization_roles,omitempty"`
	OrganizationTypeId   *string            `json:"organization_type_id,omitempty"`
	OrganizationTypeName NullableString     `json:"organization_type_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FcTypeV2 FcTypeV2

// NewFcTypeV2 instantiates a new FcTypeV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcTypeV2() *FcTypeV2 {
	this := FcTypeV2{}
	return &this
}

// NewFcTypeV2WithDefaults instantiates a new FcTypeV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcTypeV2WithDefaults() *FcTypeV2 {
	this := FcTypeV2{}
	return &this
}

// GetIsChild returns the IsChild field value if set, zero value otherwise.
func (o *FcTypeV2) GetIsChild() bool {
	if o == nil || IsNil(o.IsChild) {
		var ret bool
		return ret
	}
	return *o.IsChild
}

// GetIsChildOk returns a tuple with the IsChild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcTypeV2) GetIsChildOk() (*bool, bool) {
	if o == nil || IsNil(o.IsChild) {
		return nil, false
	}
	return o.IsChild, true
}

// HasIsChild returns a boolean if a field has been set.
func (o *FcTypeV2) HasIsChild() bool {
	if o != nil && !IsNil(o.IsChild) {
		return true
	}

	return false
}

// SetIsChild gets a reference to the given bool and assigns it to the IsChild field.
func (o *FcTypeV2) SetIsChild(v bool) {
	o.IsChild = &v
}

// GetOrganizationRoles returns the OrganizationRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcTypeV2) GetOrganizationRoles() []OrganizationRole {
	if o == nil {
		var ret []OrganizationRole
		return ret
	}
	return o.OrganizationRoles
}

// GetOrganizationRolesOk returns a tuple with the OrganizationRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcTypeV2) GetOrganizationRolesOk() ([]OrganizationRole, bool) {
	if o == nil || IsNil(o.OrganizationRoles) {
		return nil, false
	}
	return o.OrganizationRoles, true
}

// HasOrganizationRoles returns a boolean if a field has been set.
func (o *FcTypeV2) HasOrganizationRoles() bool {
	if o != nil && IsNil(o.OrganizationRoles) {
		return true
	}

	return false
}

// SetOrganizationRoles gets a reference to the given []OrganizationRole and assigns it to the OrganizationRoles field.
func (o *FcTypeV2) SetOrganizationRoles(v []OrganizationRole) {
	o.OrganizationRoles = v
}

// GetOrganizationTypeId returns the OrganizationTypeId field value if set, zero value otherwise.
func (o *FcTypeV2) GetOrganizationTypeId() string {
	if o == nil || IsNil(o.OrganizationTypeId) {
		var ret string
		return ret
	}
	return *o.OrganizationTypeId
}

// GetOrganizationTypeIdOk returns a tuple with the OrganizationTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcTypeV2) GetOrganizationTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationTypeId) {
		return nil, false
	}
	return o.OrganizationTypeId, true
}

// HasOrganizationTypeId returns a boolean if a field has been set.
func (o *FcTypeV2) HasOrganizationTypeId() bool {
	if o != nil && !IsNil(o.OrganizationTypeId) {
		return true
	}

	return false
}

// SetOrganizationTypeId gets a reference to the given string and assigns it to the OrganizationTypeId field.
func (o *FcTypeV2) SetOrganizationTypeId(v string) {
	o.OrganizationTypeId = &v
}

// GetOrganizationTypeName returns the OrganizationTypeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FcTypeV2) GetOrganizationTypeName() string {
	if o == nil || IsNil(o.OrganizationTypeName.Get()) {
		var ret string
		return ret
	}
	return *o.OrganizationTypeName.Get()
}

// GetOrganizationTypeNameOk returns a tuple with the OrganizationTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FcTypeV2) GetOrganizationTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationTypeName.Get(), o.OrganizationTypeName.IsSet()
}

// HasOrganizationTypeName returns a boolean if a field has been set.
func (o *FcTypeV2) HasOrganizationTypeName() bool {
	if o != nil && o.OrganizationTypeName.IsSet() {
		return true
	}

	return false
}

// SetOrganizationTypeName gets a reference to the given NullableString and assigns it to the OrganizationTypeName field.
func (o *FcTypeV2) SetOrganizationTypeName(v string) {
	o.OrganizationTypeName.Set(&v)
}

// SetOrganizationTypeNameNil sets the value for OrganizationTypeName to be an explicit nil
func (o *FcTypeV2) SetOrganizationTypeNameNil() {
	o.OrganizationTypeName.Set(nil)
}

// UnsetOrganizationTypeName ensures that no value is present for OrganizationTypeName, not even an explicit nil
func (o *FcTypeV2) UnsetOrganizationTypeName() {
	o.OrganizationTypeName.Unset()
}

func (o FcTypeV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FcTypeV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedFcType, errFcType := json.Marshal(o.FcType)
	if errFcType != nil {
		return map[string]interface{}{}, errFcType
	}
	errFcType = json.Unmarshal([]byte(serializedFcType), &toSerialize)
	if errFcType != nil {
		return map[string]interface{}{}, errFcType
	}
	if !IsNil(o.IsChild) {
		toSerialize["is_child"] = o.IsChild
	}
	if o.OrganizationRoles != nil {
		toSerialize["organization_roles"] = o.OrganizationRoles
	}
	if !IsNil(o.OrganizationTypeId) {
		toSerialize["organization_type_id"] = o.OrganizationTypeId
	}
	if o.OrganizationTypeName.IsSet() {
		toSerialize["organization_type_name"] = o.OrganizationTypeName.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FcTypeV2) UnmarshalJSON(bytes []byte) (err error) {
	type FcTypeV2WithoutEmbeddedStruct struct {
		IsChild              *bool              `json:"is_child,omitempty"`
		OrganizationRoles    []OrganizationRole `json:"organization_roles,omitempty"`
		OrganizationTypeId   *string            `json:"organization_type_id,omitempty"`
		OrganizationTypeName NullableString     `json:"organization_type_name,omitempty"`
	}

	varFcTypeV2WithoutEmbeddedStruct := FcTypeV2WithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varFcTypeV2WithoutEmbeddedStruct)
	if err == nil {
		varFcTypeV2 := _FcTypeV2{}
		varFcTypeV2.IsChild = varFcTypeV2WithoutEmbeddedStruct.IsChild
		varFcTypeV2.OrganizationRoles = varFcTypeV2WithoutEmbeddedStruct.OrganizationRoles
		varFcTypeV2.OrganizationTypeId = varFcTypeV2WithoutEmbeddedStruct.OrganizationTypeId
		varFcTypeV2.OrganizationTypeName = varFcTypeV2WithoutEmbeddedStruct.OrganizationTypeName
		*o = FcTypeV2(varFcTypeV2)
	} else {
		return err
	}

	varFcTypeV2 := _FcTypeV2{}

	err = json.Unmarshal(bytes, &varFcTypeV2)
	if err == nil {
		o.FcType = varFcTypeV2.FcType
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "is_child")
		delete(additionalProperties, "organization_roles")
		delete(additionalProperties, "organization_type_id")
		delete(additionalProperties, "organization_type_name")

		// remove fields from embedded structs
		reflectFcType := reflect.ValueOf(o.FcType)
		for i := 0; i < reflectFcType.Type().NumField(); i++ {
			t := reflectFcType.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFcTypeV2 struct {
	value *FcTypeV2
	isSet bool
}

func (v NullableFcTypeV2) Get() *FcTypeV2 {
	return v.value
}

func (v *NullableFcTypeV2) Set(val *FcTypeV2) {
	v.value = val
	v.isSet = true
}

func (v NullableFcTypeV2) IsSet() bool {
	return v.isSet
}

func (v *NullableFcTypeV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcTypeV2(val *FcTypeV2) *NullableFcTypeV2 {
	return &NullableFcTypeV2{value: val, isSet: true}
}

func (v NullableFcTypeV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcTypeV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
