/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// InternalLocationAllOfFulfillmentCenterType - struct for InternalLocationAllOfFulfillmentCenterType
type InternalLocationAllOfFulfillmentCenterType struct {
	FcTypeV2 *FcTypeV2
}

// FcTypeV2AsInternalLocationAllOfFulfillmentCenterType is a convenience function that returns FcTypeV2 wrapped in InternalLocationAllOfFulfillmentCenterType
func FcTypeV2AsInternalLocationAllOfFulfillmentCenterType(v *FcTypeV2) InternalLocationAllOfFulfillmentCenterType {
	return InternalLocationAllOfFulfillmentCenterType{
		FcTypeV2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InternalLocationAllOfFulfillmentCenterType) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into FcTypeV2
	err = newStrictDecoder(data).Decode(&dst.FcTypeV2)
	if err == nil {
		jsonFcTypeV2, _ := json.Marshal(dst.FcTypeV2)
		if string(jsonFcTypeV2) == "{}" { // empty struct
			dst.FcTypeV2 = nil
		} else {
			match++
		}
	} else {
		dst.FcTypeV2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FcTypeV2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InternalLocationAllOfFulfillmentCenterType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InternalLocationAllOfFulfillmentCenterType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InternalLocationAllOfFulfillmentCenterType) MarshalJSON() ([]byte, error) {
	if src.FcTypeV2 != nil {
		return json.Marshal(&src.FcTypeV2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InternalLocationAllOfFulfillmentCenterType) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FcTypeV2 != nil {
		return obj.FcTypeV2
	}

	// all schemas are nil
	return nil
}

type NullableInternalLocationAllOfFulfillmentCenterType struct {
	value *InternalLocationAllOfFulfillmentCenterType
	isSet bool
}

func (v NullableInternalLocationAllOfFulfillmentCenterType) Get() *InternalLocationAllOfFulfillmentCenterType {
	return v.value
}

func (v *NullableInternalLocationAllOfFulfillmentCenterType) Set(val *InternalLocationAllOfFulfillmentCenterType) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalLocationAllOfFulfillmentCenterType) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalLocationAllOfFulfillmentCenterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalLocationAllOfFulfillmentCenterType(val *InternalLocationAllOfFulfillmentCenterType) *NullableInternalLocationAllOfFulfillmentCenterType {
	return &NullableInternalLocationAllOfFulfillmentCenterType{value: val, isSet: true}
}

func (v NullableInternalLocationAllOfFulfillmentCenterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalLocationAllOfFulfillmentCenterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
