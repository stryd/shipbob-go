/*
ShipBob Developer API

ShipBob Developer API Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"reflect"
	"strings"
)

// checks if the LocationV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationV2{}

// LocationV2 struct for LocationV2
type LocationV2 struct {
	Location
	OrganizationId       *string        `json:"organization_id,omitempty"`
	OwnerId              NullableString `json:"owner_id,omitempty"`
	ParentId             NullableString `json:"parent_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocationV2 LocationV2

// NewLocationV2 instantiates a new LocationV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationV2(ttype string) *LocationV2 {
	this := LocationV2{}
	this.Ttype = ttype
	return &this
}

// NewLocationV2WithDefaults instantiates a new LocationV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationV2WithDefaults() *LocationV2 {
	this := LocationV2{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *LocationV2) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationV2) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *LocationV2) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *LocationV2) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationV2) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId.Get()) {
		var ret string
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationV2) GetOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *LocationV2) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableString and assigns it to the OwnerId field.
func (o *LocationV2) SetOwnerId(v string) {
	o.OwnerId.Set(&v)
}

// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *LocationV2) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *LocationV2) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocationV2) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocationV2) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *LocationV2) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *LocationV2) SetParentId(v string) {
	o.ParentId.Set(&v)
}

// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *LocationV2) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *LocationV2) UnsetParentId() {
	o.ParentId.Unset()
}

func (o LocationV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedLocation, errLocation := json.Marshal(o.Location)
	if errLocation != nil {
		return map[string]interface{}{}, errLocation
	}
	errLocation = json.Unmarshal([]byte(serializedLocation), &toSerialize)
	if errLocation != nil {
		return map[string]interface{}{}, errLocation
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if o.OwnerId.IsSet() {
		toSerialize["owner_id"] = o.OwnerId.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationV2) UnmarshalJSON(bytes []byte) (err error) {
	type LocationV2WithoutEmbeddedStruct struct {
		OrganizationId *string        `json:"organization_id,omitempty"`
		OwnerId        NullableString `json:"owner_id,omitempty"`
		ParentId       NullableString `json:"parent_id,omitempty"`
	}

	varLocationV2WithoutEmbeddedStruct := LocationV2WithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varLocationV2WithoutEmbeddedStruct)
	if err == nil {
		varLocationV2 := _LocationV2{}
		varLocationV2.OrganizationId = varLocationV2WithoutEmbeddedStruct.OrganizationId
		varLocationV2.OwnerId = varLocationV2WithoutEmbeddedStruct.OwnerId
		varLocationV2.ParentId = varLocationV2WithoutEmbeddedStruct.ParentId
		*o = LocationV2(varLocationV2)
	} else {
		return err
	}

	varLocationV2 := _LocationV2{}

	err = json.Unmarshal(bytes, &varLocationV2)
	if err == nil {
		o.Location = varLocationV2.Location
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "owner_id")
		delete(additionalProperties, "parent_id")

		// remove fields from embedded structs
		reflectLocation := reflect.ValueOf(o.Location)
		for i := 0; i < reflectLocation.Type().NumField(); i++ {
			t := reflectLocation.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationV2 struct {
	value *LocationV2
	isSet bool
}

func (v NullableLocationV2) Get() *LocationV2 {
	return v.value
}

func (v *NullableLocationV2) Set(val *LocationV2) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationV2) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationV2(val *LocationV2) *NullableLocationV2 {
	return &NullableLocationV2{value: val, isSet: true}
}

func (v NullableLocationV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
