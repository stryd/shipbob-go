/*
 * ShipBob Developer API
 *
 * ShipBob Developer API Documentation
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipbob

import (
	"encoding/json"
	"fmt"
)

// OrdersAddProductToOrderModel - struct for OrdersAddProductToOrderModel
type OrdersAddProductToOrderModel struct {
	OrdersAddProductToOrderByProductIdModel *OrdersAddProductToOrderByProductIdModel
	OrdersAddProductToOrderByReferenceIdModel *OrdersAddProductToOrderByReferenceIdModel
}

// OrdersAddProductToOrderByProductIdModelAsOrdersAddProductToOrderModel is a convenience function that returns OrdersAddProductToOrderByProductIdModel wrapped in OrdersAddProductToOrderModel
func OrdersAddProductToOrderByProductIdModelAsOrdersAddProductToOrderModel(v *OrdersAddProductToOrderByProductIdModel) OrdersAddProductToOrderModel {
	return OrdersAddProductToOrderModel{ OrdersAddProductToOrderByProductIdModel: v}
}

// OrdersAddProductToOrderByReferenceIdModelAsOrdersAddProductToOrderModel is a convenience function that returns OrdersAddProductToOrderByReferenceIdModel wrapped in OrdersAddProductToOrderModel
func OrdersAddProductToOrderByReferenceIdModelAsOrdersAddProductToOrderModel(v *OrdersAddProductToOrderByReferenceIdModel) OrdersAddProductToOrderModel {
	return OrdersAddProductToOrderModel{ OrdersAddProductToOrderByReferenceIdModel: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrdersAddProductToOrderModel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OrdersAddProductToOrderByProductIdModel
	err = json.Unmarshal(data, &dst.OrdersAddProductToOrderByProductIdModel)
	if err == nil {
		jsonOrdersAddProductToOrderByProductIdModel, _ := json.Marshal(dst.OrdersAddProductToOrderByProductIdModel)
		if string(jsonOrdersAddProductToOrderByProductIdModel) == "{}" { // empty struct
			dst.OrdersAddProductToOrderByProductIdModel = nil
		} else {
			match++
		}
	} else {
		dst.OrdersAddProductToOrderByProductIdModel = nil
	}

	// try to unmarshal data into OrdersAddProductToOrderByReferenceIdModel
	err = json.Unmarshal(data, &dst.OrdersAddProductToOrderByReferenceIdModel)
	if err == nil {
		jsonOrdersAddProductToOrderByReferenceIdModel, _ := json.Marshal(dst.OrdersAddProductToOrderByReferenceIdModel)
		if string(jsonOrdersAddProductToOrderByReferenceIdModel) == "{}" { // empty struct
			dst.OrdersAddProductToOrderByReferenceIdModel = nil
		} else {
			match++
		}
	} else {
		dst.OrdersAddProductToOrderByReferenceIdModel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OrdersAddProductToOrderByProductIdModel = nil
		dst.OrdersAddProductToOrderByReferenceIdModel = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(OrdersAddProductToOrderModel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(OrdersAddProductToOrderModel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrdersAddProductToOrderModel) MarshalJSON() ([]byte, error) {
	if src.OrdersAddProductToOrderByProductIdModel != nil {
		return json.Marshal(&src.OrdersAddProductToOrderByProductIdModel)
	}

	if src.OrdersAddProductToOrderByReferenceIdModel != nil {
		return json.Marshal(&src.OrdersAddProductToOrderByReferenceIdModel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrdersAddProductToOrderModel) GetActualInstance() (interface{}) {
	if obj.OrdersAddProductToOrderByProductIdModel != nil {
		return obj.OrdersAddProductToOrderByProductIdModel
	}

	if obj.OrdersAddProductToOrderByReferenceIdModel != nil {
		return obj.OrdersAddProductToOrderByReferenceIdModel
	}

	// all schemas are nil
	return nil
}

type NullableOrdersAddProductToOrderModel struct {
	value *OrdersAddProductToOrderModel
	isSet bool
}

func (v NullableOrdersAddProductToOrderModel) Get() *OrdersAddProductToOrderModel {
	return v.value
}

func (v *NullableOrdersAddProductToOrderModel) Set(val *OrdersAddProductToOrderModel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersAddProductToOrderModel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersAddProductToOrderModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersAddProductToOrderModel(val *OrdersAddProductToOrderModel) *NullableOrdersAddProductToOrderModel {
	return &NullableOrdersAddProductToOrderModel{value: val, isSet: true}
}

func (v NullableOrdersAddProductToOrderModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersAddProductToOrderModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


